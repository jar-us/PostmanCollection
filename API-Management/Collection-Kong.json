{
	"info": {
		"_postman_id": "aa874d3b-da1b-4daa-b9af-7f42bd2536b1",
		"name": "Course - Kong API Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Course Content",
			"item": [
				{
					"name": "Hello Kong",
					"item": [
						{
							"name": "Kong Admin Home",
							"id": "5832c9bb-d097-48be-8a32-c72de53b1cfa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}"
							},
							"response": []
						}
					],
					"id": "9372599a-f7a5-4cda-9564-b0ec8a2b892c"
				},
				{
					"name": "QR Code",
					"item": [
						{
							"name": "Generate QR Code",
							"id": "0ae40250-8d6d-41f3-bca3-13648d46efc1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.gateway}}/qr/v1/create-qr-code?data=hello",
									"host": [
										"{{kong.gateway}}"
									],
									"path": [
										"qr",
										"v1",
										"create-qr-code"
									],
									"query": [
										{
											"key": "data",
											"value": "hello"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate QR Code HTTPS",
							"id": "f5799b10-5bc8-445b-922c-e3abca4213eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.gateway.ssl}}/qr/v1/create-qr-code?data=hello",
									"host": [
										"{{kong.gateway.ssl}}"
									],
									"path": [
										"qr",
										"v1",
										"create-qr-code"
									],
									"query": [
										{
											"key": "data",
											"value": "hello"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7d8ad063-0de7-4a30-b1b6-48ab45867fe5"
				},
				{
					"name": "Service",
					"item": [
						{
							"name": "Service - Add",
							"id": "ac5aa7c1-2966-4836-a781-86f39511d60a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"url\" : \"https://api.qrserver.com\",\n\t\"name\" : \"qr\",\n\t\"retries\" : 3,\n\t\"connect_timeout\" : 60000,\n\t\"write_timeout\" : 60000,\n\t\"read_timeout\" : 60000\n}"
								},
								"url": "{{kong.admin}}/services"
							},
							"response": [
								{
									"id": "55f77580-2b85-4161-81a4-9e6ffed7b84a",
									"name": "Service - Add",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"url\" : \"https://api.qrserver.com\",\n\t\"name\" : \"qr\",\n\t\"retries\" : 3,\n\t\"connect_timeout\" : 60000,\n\t\"write_timeout\" : 60000,\n\t\"read_timeout\" : 60000\n}"
										},
										"url": "{{kong.admin}}/services"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 29 Feb 2024 16:09:18 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Length",
											"value": "370"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "10"
										},
										{
											"key": "Server",
											"value": "kong/3.5.0"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"created_at\": 1709222958,\n    \"updated_at\": 1709222958,\n    \"client_certificate\": null,\n    \"tls_verify\": null,\n    \"tls_verify_depth\": null,\n    \"connect_timeout\": 60000,\n    \"read_timeout\": 60000,\n    \"path\": null,\n    \"host\": \"api.qrserver.com\",\n    \"tags\": null,\n    \"ca_certificates\": null,\n    \"name\": \"qr\",\n    \"id\": \"8ac18f4d-ec94-4acb-b735-9639c0c58ae8\",\n    \"enabled\": true,\n    \"write_timeout\": 60000,\n    \"retries\": 3,\n    \"protocol\": \"https\",\n    \"port\": 443\n}"
								}
							]
						},
						{
							"name": "Service - List All",
							"id": "ea5cd7b3-beb0-4506-a11c-4dc90a6cd2b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/services"
							},
							"response": []
						},
						{
							"name": "Service - Get Info",
							"id": "29213998-0e50-4c90-bec2-12e18861a5b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/services/:service-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name"
									],
									"variable": [
										{
											"id": "1e0cc6b8-60a5-4726-b26e-3702fe2eeec1",
											"key": "service-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Service - Get Info by Route",
							"id": "e1a352a7-ae90-4f38-9311-88ae9d832809",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/routes/:route-id/service",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"routes",
										":route-id",
										"service"
									],
									"variable": [
										{
											"id": "d15bf935-ecc3-4be6-90ae-0d83dbb4c285",
											"key": "route-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Service - Update",
							"id": "ec092296-db74-4596-bdd4-96d06bd682dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"url\" : \"http://gamma:9003\"\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/services/:service-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name"
									],
									"variable": [
										{
											"id": "4f0e1b0f-ccff-449d-b21c-4205f6cf1e5f",
											"key": "service-name",
											"value": "qr"
										}
									]
								}
							},
							"response": [
								{
									"id": "bee71a7d-a4d5-4334-9f1e-5c35938eb7cd",
									"name": "Service - Update",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"url\" : \"http://gamma:9003\"\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:service-name",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":service-name"
											],
											"variable": [
												{
													"id": "4f0e1b0f-ccff-449d-b21c-4205f6cf1e5f",
													"key": "service-name",
													"value": "qr"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 29 Feb 2024 16:50:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Length",
											"value": "359"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "8"
										},
										{
											"key": "Server",
											"value": "kong/3.5.0"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"created_at\": 1709222958,\n    \"updated_at\": 1709225453,\n    \"client_certificate\": null,\n    \"tls_verify\": null,\n    \"tls_verify_depth\": null,\n    \"connect_timeout\": 60000,\n    \"read_timeout\": 60000,\n    \"path\": null,\n    \"host\": \"gamma\",\n    \"tags\": null,\n    \"ca_certificates\": null,\n    \"name\": \"qr\",\n    \"id\": \"8ac18f4d-ec94-4acb-b735-9639c0c58ae8\",\n    \"enabled\": true,\n    \"write_timeout\": 60000,\n    \"retries\": 3,\n    \"protocol\": \"http\",\n    \"port\": 9003\n}"
								}
							]
						},
						{
							"name": "Service - Update by Route",
							"id": "d745762f-cb93-479d-940e-2c2a72af99cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"url\" : \"http://gamma:9003/\",\n\t\"name\" : \"gamma\",\n\t\"retries\" : 5,\n\t\"connect_timeout\" : 60000,\n\t\"write_timeout\" : 60000,\n\t\"read_timeout\" : 60000\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/routes/:route-id/service",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"routes",
										":route-id",
										"service"
									],
									"variable": [
										{
											"id": "8cfa3da7-ea49-4d61-9736-fdfe3065e985",
											"key": "route-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Service - Create or Update",
							"id": "efbebaa3-c285-48b6-a340-cf3710934d26",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"url\" : \"http://gamma:9003/\",\n\t\"name\" : \"gamma\",\n\t\"retries\" : 5,\n\t\"connect_timeout\" : 60000,\n\t\"write_timeout\" : 60000,\n\t\"read_timeout\" : 60000\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/services/:service-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name"
									],
									"variable": [
										{
											"id": "8173de98-48a2-4ab5-a00c-9a0620ee57ae",
											"key": "service-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Service - Delete",
							"id": "86085013-118d-4562-8ea1-630eeec28a02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{kong.admin}}/services/:service-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name"
									],
									"variable": [
										{
											"id": "da84a223-d747-4e14-921a-014e0a8e05a1",
											"key": "service-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f44181e1-51da-43fe-9f88-8522a623c205"
				},
				{
					"name": "Route",
					"item": [
						{
							"name": "Route - Add by Service",
							"id": "00c9ca3a-81a3-4a51-a9e9-123144fb09e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"paths\": [\n        \"/qr\"\n    ],\n    \"methods\": []\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/services/:service-name/routes",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name",
										"routes"
									],
									"variable": [
										{
											"key": "service-name",
											"value": "qr"
										}
									]
								}
							},
							"response": [
								{
									"id": "423bb9fb-e4e2-4bda-8712-62ec64d02b5f",
									"name": "Route - Add by Service",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"paths\": [\n        \"/qr\"\n    ],\n    \"methods\": []\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:service-name/routes",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":service-name",
												"routes"
											],
											"variable": [
												{
													"key": "service-name",
													"value": "qr"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 29 Feb 2024 16:15:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Length",
											"value": "470"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "28"
										},
										{
											"key": "Server",
											"value": "kong/3.5.0"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"created_at\": 1709223329,\n    \"updated_at\": 1709223329,\n    \"methods\": [],\n    \"sources\": null,\n    \"destinations\": null,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"hosts\": null,\n    \"paths\": [\n        \"/qr\"\n    ],\n    \"headers\": null,\n    \"name\": null,\n    \"id\": \"8b43bc21-056f-4f82-9266-2452f873c575\",\n    \"tags\": null,\n    \"snis\": null,\n    \"path_handling\": \"v0\",\n    \"strip_path\": true,\n    \"response_buffering\": true,\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"service\": {\n        \"id\": \"8ac18f4d-ec94-4acb-b735-9639c0c58ae8\"\n    },\n    \"https_redirect_status_code\": 426,\n    \"request_buffering\": true\n}"
								}
							]
						},
						{
							"name": "Route - List All",
							"id": "6b1f22cc-514f-4e82-b009-ebbd16252b96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/routes"
							},
							"response": []
						},
						{
							"name": "Route - List by Service",
							"id": "cf3ffa81-fa05-4286-b2f8-7ecfc690721a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/services/:service-name/routes",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"services",
										":service-name",
										"routes"
									],
									"variable": [
										{
											"id": "fc612a8e-fec3-41e1-8e22-6492c906a687",
											"key": "service-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Route - List by Route ID",
							"id": "e10d177a-3f58-4ea7-adfe-98ff317d04fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/routes/:route-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"routes",
										":route-id"
									],
									"variable": [
										{
											"id": "c1d49b36-d990-43bf-8414-f2b34009ce8a",
											"key": "route-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Route - Update",
							"id": "558b27a4-cee9-42e3-9b39-4d5a9310e1fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"paths\": [\n        \"/practical-java\"\n    ],\n    \"methods\": []\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/routes/:route-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"routes",
										":route-id"
									],
									"variable": [
										{
											"id": "19996a9d-4cd3-4e66-b3ec-db7c77f75044",
											"key": "route-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Route - Create or Update",
							"id": "84c334af-d372-42cc-bee6-64f2b858bde7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"paths\": [\n        \"/practical-java\"\n    ],\n    \"methods\": [\n    \t\"GET\"\n    ]\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/routes/:route-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"routes",
										":route-id"
									],
									"variable": [
										{
											"id": "79a93c4d-f4c6-402a-9858-45205ee4f826",
											"key": "route-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Route - Delete",
							"id": "f8eab66b-14a2-413d-92d0-3fd345f1bb96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{kong.admin}}/routes/route-id"
							},
							"response": []
						}
					],
					"id": "45dc0550-0ba8-4398-ba51-99e8049b7d68"
				},
				{
					"name": "Consumer",
					"item": [
						{
							"name": "Consumer - Add",
							"id": "ff7f771f-e66f-4896-bf05-5da475993d5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\" : \"helen\",\n\t\"custom_id\" : \"U025\"\n}"
								},
								"url": "{{kong.admin}}/consumers"
							},
							"response": []
						},
						{
							"name": "Consumer - List All",
							"id": "7002c930-a4bc-4728-a9c7-48a1ca7ef796",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/consumers"
							},
							"response": []
						},
						{
							"name": "Consumer - List by Username or ID",
							"id": "423b1282-768f-4060-b47c-2830f2d55d31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-username",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-username"
									],
									"variable": [
										{
											"id": "cc36df32-eceb-472f-ae57-33440e178493",
											"key": "consumer-username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - List by ID",
							"id": "966140e5-32aa-4390-a21f-78765adef488",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-id"
									],
									"variable": [
										{
											"id": "be03ab80-47ef-4f6e-9a25-c7e2ad34d38f",
											"key": "consumer-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Update by Username",
							"id": "6e595929-17cd-42cf-a7cd-0c7308c87182",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\" : \"kong-consumer\",\n\t\"custom_id\" : \"\"\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-username",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-username"
									],
									"variable": [
										{
											"id": "352feb89-1cbc-4054-9ea6-2b82d297ee95",
											"key": "consumer-username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Update by ID",
							"id": "ff381f58-ba45-4c26-badd-be7c05605ab1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\" : \"practical-java-consumer\",\n\t\"custom_id\" : \"\"\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-id"
									],
									"variable": [
										{
											"id": "9ab5e848-54fc-494c-a577-773480929d75",
											"key": "consumer-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Create or Update by Username",
							"id": "74b70370-7295-46a3-a499-4b76f4dee7ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\" : \"kong-consumer\",\n\t\"custom_id\" : \"\"\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-username",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-username"
									],
									"variable": [
										{
											"id": "fc8997a2-0fa2-4b0b-a3a7-722549e037ae",
											"key": "consumer-username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Create or Update by ID",
							"id": "bf000a84-c6dd-4a9f-b3ee-cc2fd5072e79",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\" : \"kong-consumer\",\n\t\"custom_id\" : \"\"\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-username",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-username"
									],
									"variable": [
										{
											"id": "71efc0db-bbaf-45db-9e7c-db435d04f979",
											"key": "consumer-username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Delete by Username",
							"id": "e9081689-4308-4124-9e25-e36910bb4ed4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-username",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-username"
									],
									"variable": [
										{
											"id": "d2d83ea5-bb24-417b-87d9-75c4c8db7e6d",
											"key": "consumer-username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer - Delete by ID",
							"id": "7ab93e7f-0ab0-4905-85e6-cdaea51667e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{kong.admin}}/consumers/:consumer-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"consumers",
										":consumer-id"
									],
									"variable": [
										{
											"id": "6f57ed4e-cb6f-4274-b11b-cf9a3b693fc4",
											"key": "consumer-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "53c3f65c-7cae-4c2b-b3c6-8074da03668c"
				},
				{
					"name": "Plugin",
					"item": [
						{
							"name": "Authentication",
							"item": [
								{
									"name": "API Key",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "6f8b9979-7d0b-4669-8ac8-86ed467e03dc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/key-auth"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable API Key Auth",
											"id": "5be6df91-ff02-4503-92e0-9f8a1f7af6b1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"key-auth\",\n    \"enabled\": true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n    \"config\": {\n        \"key_names\": null,\n        \"key_in_body\": null,\n        \"hide_credentials\": null,\n        \"anonymous\": null,\n        \"run_on_preflight\": null\n    }\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										},
										{
											"name": "Plugin - Create API Key Credential",
											"id": "08daa373-5ae5-4fad-ba3c-cf525fcc34b0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/key-auth"
											},
											"response": []
										},
										{
											"name": "Plugin - List API Key Credentials by Username",
											"id": "f1cbfe18-1be1-45b0-815b-be33317534c6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/key-auth"
											},
											"response": []
										},
										{
											"name": "Plugin - Delete API Key Credentials",
											"id": "0e8347c0-2d08-4dee-8a3c-7652c0f7c650",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/key-auth/{{plugin.consumer.api-key.id}}"
											},
											"response": []
										}
									],
									"id": "5418f749-3294-4eb8-bf9c-cceb37ae221f"
								},
								{
									"name": "Basic",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "24a1d795-bc6a-4bb1-92ed-ebb8fce07c4f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/basic-auth"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable Basic Authentication",
											"id": "1222476c-9638-4edc-a251-e0cacf46b216",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"basic-auth\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"hide_credentials\" : false,\n\t\t\"anonymous\": null\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										},
										{
											"name": "Plugin - Create Basic Auth Credential by Username",
											"id": "cf2c122b-a667-4ec6-8afd-cf116498a00e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"username\" : \"username-for-basic-auth\",\n\t\"password\" : \"unencrypted-password-for-basic-auth\"\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/basic-auth",
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get Basic Auth User List",
											"id": "d4ad3f02-f33b-4bec-bede-a868d5783faa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{kong.admin}}/basic-auths?size=50&offset=0",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"basic-auths"
													],
													"query": [
														{
															"key": "size",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												},
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get Consumer based on Credential Username",
											"id": "b3e47814-a9ca-4e87-aec5-6007c6905afa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/basic-auths/{{plugin.basic-auth.username}}/consumer",
												"description": "Retrieve a Consumer associated with a basic-auth Credential.\nUse basic-auth username or id as parameter"
											},
											"response": []
										}
									],
									"id": "0b23052d-8a9d-4022-a532-1469e69fe8b4"
								},
								{
									"name": "JWT",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "0c282cd6-d60d-4817-9202-995fd7c171fa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/jwt"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable JWT Auth",
											"id": "a1830ca2-3973-4300-bfcc-4162295af9d6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"jwt\",\n    \"enabled\": true,\n    \"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\": {\n        \"uri_param_names\": null,\n        \"cookie_names\": null,\n        \"claims_to_verify\": null,\n        \"key_claim_name\": null,\n        \"secret_is_base64\": null,\n        \"anonymous\": null,\n        \"run_on_preflight\": null\n    }\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										},
										{
											"name": "Plugin - Create JWT Credential",
											"id": "5a6af358-1b56-4722-8a61-35a6aff3e8dd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/jwt"
											},
											"response": []
										},
										{
											"name": "Plugin - List JWT Credentials by Username",
											"id": "ffdfa4b5-79db-46a4-9df4-ca66ef49b287",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/jwt"
											},
											"response": []
										},
										{
											"name": "Plugin - Delete JWT Credentials",
											"id": "a0a214d8-e2f1-48a5-b3b9-f1f6a717e942",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/jwt/{{plugin.consumer.jwt.id}}"
											},
											"response": []
										}
									],
									"id": "cb98c7a2-9169-4de5-a75e-24c0786bf9a6"
								},
								{
									"name": "HMAC",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "c45d6225-75c6-4366-8ad4-d880377e565a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/hmac-auth"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable HMAC Auth",
											"id": "c298941b-775f-4d95-991d-fe692f857970",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"hmac-auth\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"hide_credentials\" : false,\n\t\t\"clock_skew\" : 300,\n\t\t\"validate_request_body\" : false,\n\t\t\"algorithms\" : \"hmac-sha256\",\n\t\t\"enforce_headers\" : null\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										},
										{
											"name": "Plugin - Create HMAC Credential by Username",
											"id": "e6c9b339-d378-404a-91ea-5ea38a07ae8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"username\" : \"timpamungkas\",\n\t\"secret\" : \"secret\"\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/hmac-auth",
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get HMAC User List",
											"id": "40250e45-a50b-4877-83e0-848f5cad7cef",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{kong.admin}}/hmac-auths?size=50&offset=0",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"hmac-auths"
													],
													"query": [
														{
															"key": "size",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												},
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get Consumer based on Credential Username Copy",
											"id": "77f8882f-958e-480f-b861-6c89c57fb537",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/hmac-auths/{{plugin.hmac-auth.username}}/consumer",
												"description": "Retrieve a Consumer associated with a basic-auth Credential.\nUse basic-auth username or id as parameter"
											},
											"response": []
										}
									],
									"id": "26fa98c1-04b9-483c-abb5-4b9d4aa42ee2"
								}
							],
							"id": "fc3439e0-20fd-4462-b848-37d2b13b1e16"
						},
						{
							"name": "Security",
							"item": [
								{
									"name": "Bot Detection",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "387a1353-773b-4f12-9b31-c98880150afc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/bot-detection"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable Bot Detection",
											"id": "dc9373ed-703c-423d-a9dd-c2c661023209",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"bot-detection\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"whitelist\" : [],\t\t\n\t\t\"blacklist\" : []\t\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "6398f066-88bd-44bd-a4b6-33e6ebf12c98"
								},
								{
									"name": "CORS",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "7964d30f-121d-4139-96b3-b7d1057c4bd1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/cors"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable CORS",
											"id": "b1b908b5-4317-4297-8fe8-7bba195857a3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"cors\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"methods\" : [],\t\n\t\t\"headers\" : null,\n\t\t\"exposed_headers\" : null,\n\t\t\"credentials\" : null,\n\t\t\"max_age\" : null,\n\t\t\"preflight_continue\" : null\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "75f4aae3-aab6-436a-b230-6fcc58cc93cd"
								},
								{
									"name": "IP Restriction",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "922f2e2e-5ef8-47aa-94e3-cca9109cafa3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/cors"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable CORS",
											"id": "cd277902-5b8e-4b73-b894-7cc40f4377b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"cors\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"whitelist\" : [],\n\t\t\"blacklist\" : []\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "ce806500-ae40-4f94-abf0-6e813cadbe42"
								}
							],
							"id": "d1cfa310-4de2-4558-bbb6-ec07d0783135"
						},
						{
							"name": "Traffic Control",
							"item": [
								{
									"name": "Access Control List (ACL)",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "bbc276ac-49a6-4aff-a06d-5fa60fafefec",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/acl"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable ACL",
											"id": "792a4900-427d-487b-9a53-d3241725fa02",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"acl\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"whitelist\" : [],\n\t\t\"blacklist\" : []\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										},
										{
											"name": "Plugin - Create ACL Credential by Username",
											"id": "f54cb148-3e65-49bb-8ef1-5da2954b0cac",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"group\" : \"group-01\"\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/acls",
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get All ACL Credentials",
											"id": "33f481f6-1b36-4d4e-b034-f04b33b993df",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"group\" : \"group-01\"\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/acls?size=50&offset=0",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"acls"
													],
													"query": [
														{
															"key": "size",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												},
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Get Consumer for ACL Credentials",
											"id": "8f05e4ab-5f18-4d03-b078-77a4f352b92d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"group\" : \"group-01\"\n}"
												},
												"url": "{{kong.admin}}/acls/{{plugin.acl.id}}/consumer",
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										},
										{
											"name": "Plugin - Delete Consumer from ACL Group",
											"id": "3a0dca1f-aef8-4ac3-aa70-3d2758a390ab",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"group\" : \"group-01\"\n}"
												},
												"url": "{{kong.admin}}/consumers/{{consumer.username}}/acls/{{plugin.acl.id}}",
												"description": "Create basic authentication credential for specific consumer"
											},
											"response": []
										}
									],
									"id": "e116590a-a85b-46c4-a948-21e3fc57b7bb"
								},
								{
									"name": "Rate Limiting Basic",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "33894253-5a27-4321-9c04-e77ef443c9ec",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/rate-limiting"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable Rate Limiting",
											"id": "a3f81023-d267-4995-b950-c00269d460e8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"rate-limiting\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"limit_by\" : \"ip\",\n\t\t\"second\" : 100\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "a7dbff3d-e686-4f35-a398-5cc542a07fd8"
								},
								{
									"name": "Request Size Limiting",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "634c8238-4d3d-4f94-b7cd-0733f0d286b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/request-size-limiting"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable Request Size Limiting",
											"id": "ff7b9a97-dfe4-4952-bcef-65d8e20bc865",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"request-size-limiting\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"allowed_payload_size\" : 1\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "eb224d4c-185b-458f-b1eb-470193c29f3c"
								},
								{
									"name": "Request Termination",
									"item": [
										{
											"name": "Plugin - Get Schema",
											"id": "8da6ab09-49f9-40c6-866c-1d045de13b04",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": "{{kong.admin}}/plugins/schema/request-termination"
											},
											"response": []
										},
										{
											"name": "Plugin - Enable Request Size Limiting",
											"id": "1155d077-fbbb-4df8-8321-d18b1770fca6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\" : \"request-termination\",\n\t\"enabled\" : true,\n\t\"consumer_id\" : null,\n\t\"service_id\" : null,\n\t\"route_id\" : null,\n\t\"config\" : {\n\t\t\"status_code\" : 503,\n\t\t\"message\" : \"This service is not available\",\n\t\t\"body\" : \"This service is not available\",\n\t\t\"content_type\" : \"application/json;charset=utf-8\"\n\t}\n}"
												},
												"url": "{{kong.admin}}/plugins"
											},
											"response": []
										}
									],
									"id": "d239bb8a-f326-4cfa-8e24-91e59c35ec84"
								}
							],
							"id": "3fbba201-7480-4c81-956b-07cc557f58ab"
						},
						{
							"name": "Plugin - Add (Template)",
							"id": "43a4386d-4320-44ea-ac2f-43f210719f71",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"name\",\n\t\"consumer_id\" : {{consumer.id}},\n\t\"service_id\" : {{service.id}},\n\t\"route_id\" : {{route.id}},\n\t\"enabled\" : true,\n\t\"config\" : {\n\t\t\n\t}\n}"
								},
								"url": "{{kong.admin}}/plugins"
							},
							"response": []
						},
						{
							"name": "Plugin - List All Installed Plugins",
							"id": "eb75bec6-474c-4a38-8f1f-d6f97b15672b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{kong.admin}}/plugins?size=50",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Plugin - List Available Plugins",
							"id": "cae0b8b4-2563-44f5-af73-0edd54743e8c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": "{{kong.admin}}/plugins/enabled"
							},
							"response": []
						},
						{
							"name": "Plugin - Get Schema",
							"id": "de60ba22-3b8a-448b-a5af-e8758ce3644a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{kong.admin}}/plugins/schema/:plugin-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"plugins",
										"schema",
										":plugin-name"
									],
									"variable": [
										{
											"id": "9d949716-fb90-49fe-a0d0-de20f2406aca",
											"key": "plugin-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Plugin - Get by ID",
							"id": "0697d835-7b08-44ac-8dcf-8724b635c059",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{kong.admin}}/plugins/:plugin-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"plugins",
										":plugin-id"
									],
									"variable": [
										{
											"id": "441e03cd-9d95-4528-b256-2c91a6dc3058",
											"key": "plugin-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Plugin - Update by ID (Template)",
							"id": "11b0af4f-28e3-4c57-85e8-9bb762f2513a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"name\",\n\t\"consumer_id\" : {{consumer.id}},\n\t\"service_id\" : {{service.id}},\n\t\"route_id\" : {{route.id}},\n\t\"enabled\" : true,\n\t\"config\" : {\n\t\t\n\t}\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/plugins/:plugin-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"plugins",
										":plugin-id"
									],
									"variable": [
										{
											"id": "84992ec9-0a73-4704-96ff-441fec3b7655",
											"key": "plugin-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Plugin - Delete by ID",
							"id": "6261182c-d676-485a-9c2f-700a22a8a279",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{kong.admin}}/plugins/:plugin-id",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"plugins",
										":plugin-id"
									],
									"variable": [
										{
											"id": "73d17c53-2e5d-4ee1-aadf-732c720d772c",
											"key": "plugin-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "37e2aed7-1ea6-4d1f-a938-61ad706a197f",
					"description": "For list of plugin, please refer [here](https://docs.konghq.com/hub/)\r\n\r\nYou can add a plugin in four different ways:\r\n\r\n  - For every Service/Route and Consumer. Don’t set `consumer_id` and set `service_id` or `route_id`.\r\n  - For every Service/Route and a specific Consumer. Only set `consumer_id`.\r\n  - For every Consumer and a specific Service. Only set `service_id` (warning: some plugins only allow setting their `route_id`)\r\n  - For every Consumer and a specific Route. Only set `route_id` (warning: some plugins only allow setting their `service_id`)\r\n  - For a specific Service/Route and Consumer. Set both `service_id`/`route_id` and `consumer_id`.\r\n  - Note that not all plugins allow to specify `consumer_id`\r\n\r\nPostman templates will for every service / route, and consumer.\r\nShould you need fine-grain control on plugin, please define `consumer_id`, `service_id`, or `route_id`.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "196731f6-b145-456c-81c9-5ace468006e5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3b11488b-c1b1-4b45-bb97-433c308594e5"
							}
						}
					]
				},
				{
					"name": "Upstream",
					"item": [
						{
							"name": "Upstream - Add",
							"id": "c1fab3ff-af1c-448a-8333-586553b013f4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"beta-upstream\",\n\t\"slots\" : 1000,\n\t\"healthchecks\": {\n        \"active\": {\n            \"concurrency\": 4,\n            \"healthy\": {\n                \"interval\": 0,\n                \"successes\": 3\n            },\n            \"http_path\": \"/actuator/health\",\n            \"timeout\": 3,\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"interval\": 0,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        },\n        \"passive\": {\n            \"healthy\": {\n                \"successes\": 3\n            },\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        }\n    }\n}"
								},
								"url": "{{kong.admin}}/upstreams"
							},
							"response": []
						},
						{
							"name": "Upstream - List All",
							"id": "48c1f402-8b21-4b46-ab79-023c861225d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "apikey",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo",
										"type": "text"
									}
								],
								"url": "{{kong.admin}}/upstreams"
							},
							"response": []
						},
						{
							"name": "Upstream - Get by Name or ID",
							"id": "13cd4f70-c371-4ba0-8b9b-2a7b229cf4d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "apikey",
										"type": "text",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo"
									}
								],
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name"
									],
									"variable": [
										{
											"id": "19ffed3b-0596-4e94-a9b7-b8c4ff0aa8cf",
											"key": "upstream-name",
											"value": "alpha-upstream"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upstream - Update",
							"id": "9fbebc81-3028-418c-bb4e-b6db34bf7645",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "apikey",
										"type": "text",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"beta-upstreamx\",\n\t\"slots\" : 1000,\n\t\"healthchecks\": {\n        \"active\": {\n            \"concurrency\": 2,\n            \"healthy\": {\n                \"interval\": 10,\n                \"successes\": 3\n            },\n            \"http_path\": \"/\",\n            \"timeout\": 3,\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"interval\": 10,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        },\n        \"passive\": {\n            \"healthy\": {\n                \"successes\": 3\n            },\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name"
									],
									"variable": [
										{
											"id": "70ad9e1f-4268-494f-a73c-92c4461c1e0d",
											"key": "upstream-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upstream - Create or Update",
							"id": "5376cecc-8b67-4719-9de8-6f80611deedf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apikey",
										"type": "text",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"beta-upstreamx\",\n\t\"slots\" : 1000,\n\t\"healthchecks\": {\n        \"active\": {\n            \"concurrency\": 2,\n            \"healthy\": {\n                \"interval\": 10,\n                \"successes\": 3\n            },\n            \"http_path\": \"/\",\n            \"timeout\": 3,\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"interval\": 10,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        },\n        \"passive\": {\n            \"healthy\": {\n                \"successes\": 3\n            },\n            \"unhealthy\": {\n                \"http_failures\": 3,\n                \"tcp_failures\": 3,\n                \"timeouts\": 3\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name"
									],
									"variable": [
										{
											"id": "571e794a-2a58-408c-811b-c43e43aca4e0",
											"key": "upstream-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upstream - Delete",
							"id": "cc7c26bc-d53e-4c91-9f4d-ded0148eac1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "apikey",
										"type": "text",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name"
									],
									"variable": [
										{
											"id": "febe5148-e3b5-4fdf-9a54-b64b1166a19e",
											"key": "upstream-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upstream - Status",
							"id": "28a0dedf-2ccf-43f8-8e6c-a770f7c15216",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name/health",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name",
										"health"
									],
									"variable": [
										{
											"id": "ddd491b8-01c6-4c36-abc9-df66ac129ea0",
											"key": "upstream-name",
											"value": "alpha-upstream"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "66c7cc89-66dc-47fd-953d-ff70d4faa34a"
				},
				{
					"name": "Target",
					"item": [
						{
							"name": "Target - Add",
							"id": "c1747468-4506-4352-8f4d-438e9afcb5eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"target\" : \"beta:9002\",\n\t\"weight\" : 100\n}"
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name/targets",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name",
										"targets"
									],
									"variable": [
										{
											"id": "1f13b5a4-ceb3-4dbf-9f9f-da535317806f",
											"key": "upstream-name",
											"value": "beta-upstream"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Target - List All",
							"id": "ebc1728f-9361-429e-b587-77abb5776c3d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "apikey",
										"type": "text",
										"value": "B3gZss5o6CMAjqw0zgnu6XajJ1lgzCmo"
									}
								],
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstream-name/targets",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstream-name",
										"targets"
									],
									"variable": [
										{
											"id": "a7f82f32-12fa-4448-8917-6c5b1afc9141",
											"key": "upstream-name",
											"value": "alpha-upstream"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c96b8448-ac55-4972-991d-ee21c0d00ac1"
				},
				{
					"name": "OAuth2 Demo - Gamma",
					"item": [
						{
							"name": "Client Credentials",
							"item": [
								{
									"name": "Get Client Credentials Token",
									"id": "839df626-a8e3-4220-9e06-e3de48a5d42f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"client_id\" : \"apollo-clientid\",\r\n    \"client_secret\" : \"apollo-clientsecret\",\r\n    \"grant_type\" : \"client_credentials\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.gateway.ssl}}/gamma/oauth2/token"
									},
									"response": []
								}
							],
							"id": "93888208-0a9e-49f6-839e-3709d7ef18a8"
						},
						{
							"name": "Implicit",
							"item": [
								{
									"name": "Get Implicit Token",
									"id": "4d3f1884-7909-43c8-857a-ab3538d0cc12",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"client_id\": \"apollo-clientid\",\r\n    \"provision_key\": \"provisionkey\",\r\n    \"authenticated_userid\": \"test-username\",\r\n    \"response_type\": \"token\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.gateway.ssl}}/gamma/oauth2/authorize"
									},
									"response": []
								}
							],
							"id": "d6a7fa07-11c2-4f02-a049-941e694ad373"
						},
						{
							"name": "Authorization Code",
							"item": [
								{
									"name": "01 - Get Authorization Code",
									"id": "fc664f0a-6227-4228-b39f-1b518d61c0c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"client_id\": \"apollo-clientid\",\r\n    \"provision_key\": \"provisionkey\",\r\n    \"authenticated_userid\": \"test-username\",\r\n    \"response_type\": \"code\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.gateway.ssl}}/gamma/oauth2/authorize"
									},
									"response": []
								},
								{
									"name": "02 - Get Token",
									"id": "ee8aa5f3-5950-47fd-9912-041f492fef57",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"client_id\": \"apollo-clientid\",\r\n    \"client_secret\": \"apollo-clientsecret\",\r\n    \"grant_type\": \"authorization_code\",\r\n    \"code\": \"0JibFm6DNk03AwR66jUUFoKdqI4b1U6Y\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.gateway.ssl}}/gamma/oauth2/token"
									},
									"response": []
								},
								{
									"name": "03 - Refresh Token",
									"id": "067621c7-68ed-4563-8bd2-99f763463e49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"client_id\": \"apollo-clientid\",\r\n    \"client_secret\": \"apollo-clientsecret\",\r\n    \"grant_type\": \"refresh_token\",\r\n    \"refresh_token\": \"NZlZuGmsJz7GKGfybQw5Btimyy1bPAAa\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.gateway.ssl}}/gamma/oauth2/token"
									},
									"response": []
								}
							],
							"id": "7d072b2f-bc5e-47e5-bda2-46eec9b11219"
						}
					],
					"id": "7bee6760-5196-4535-9e19-55fa6494e244"
				},
				{
					"name": "REST API Services",
					"item": [
						{
							"name": "Alpha",
							"item": [
								{
									"name": "Alpha - Status",
									"id": "da1f023f-a46c-4080-b2f0-ccb95a79a828",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/actuator/health"
									},
									"response": []
								},
								{
									"name": "Alpha - Fast Response",
									"id": "b0b6131b-78ac-49f3-b62d-eb115a1b8bdf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/api/v1/fast"
									},
									"response": []
								},
								{
									"name": "Alpha - Fast (Random Status)",
									"id": "70c40776-c679-46a1-b0c7-ecfdca405ff6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/api/v1/fast-random"
									},
									"response": []
								},
								{
									"name": "Alpha - Slow Response",
									"id": "acecd42e-7999-4631-8a6b-a0e0d8c98828",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/api/v1/slow"
									},
									"response": []
								},
								{
									"name": "Alpha - Slow (Random Status)",
									"id": "0c6b5b15-817e-4359-90bd-1683dd117b6f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/api/v1/slow-random"
									},
									"response": []
								},
								{
									"name": "Alpha - Very Slow Response",
									"id": "2230591d-db45-4df5-835d-5463788a9433",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{alpha}}/api/v1/very-slow/:param",
											"host": [
												"{{alpha}}"
											],
											"path": [
												"api",
												"v1",
												"very-slow",
												":param"
											],
											"variable": [
												{
													"id": "77099c1d-482d-4df8-bff4-7e27db99845f",
													"key": "param",
													"value": "Tony"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alpha - Who Am I",
									"id": "5fa63082-8712-48a9-b85c-17656dc94973",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{alpha}}/api/v1/who-am-i"
									},
									"response": []
								},
								{
									"name": "Alpha - Echo",
									"id": "dfaa6578-f97c-4b75-80ad-03a11f354b6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-dummy",
												"value": "x-value",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"test\" : \"kong\"\n}"
										},
										"url": {
											"raw": "{{alpha}}/api/v1/echo?q-dummy-one=q-value-one&q-dummy-two=q-value-two",
											"host": [
												"{{alpha}}"
											],
											"path": [
												"api",
												"v1",
												"echo"
											],
											"query": [
												{
													"key": "q-dummy-one",
													"value": "q-value-one"
												},
												{
													"key": "q-dummy-two",
													"value": "q-value-two"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alpha - Random Employee",
									"id": "60079631-6689-462f-b171-46225b4f002c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": "{{alpha}}/api/v1/employee"
									},
									"response": []
								}
							],
							"id": "6af1d9c5-d04b-4d19-8d25-d182c784283a"
						},
						{
							"name": "Beta",
							"item": [
								{
									"name": "Beta - Status",
									"id": "a0651dde-67df-4038-9e73-a6d9685a7b58",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{beta}}/actuator/health"
									},
									"response": []
								},
								{
									"name": "Beta - Fast Response",
									"id": "76eb8daa-d450-4c71-b92e-9633c2841715",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Date",
												"value": "Sun, 24 Dec 2023 09:23:00 GMT",
												"type": "text"
											},
											{
												"key": "Dummy",
												"value": "Kong",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "hmac username=\"helen123\", algorithm=\"hmac-sha256\", headers=\"date dummy @request-target\", signature=\"change-me\"",
												"type": "text"
											}
										],
										"url": "{{beta}}/api/v1/fast"
									},
									"response": []
								},
								{
									"name": "Beta - Fast (Random Status)",
									"id": "15936120-9c68-46b6-8818-b93b03b180f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{beta}}/api/v1/fast-random"
									},
									"response": []
								},
								{
									"name": "Beta - Slow Response",
									"id": "9390c9d1-449a-4d16-8fc5-a1fd9ee56f95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{beta}}/api/v1/slow"
									},
									"response": []
								},
								{
									"name": "Beta - Slow (Random Status)",
									"id": "00a0093b-9a06-40bc-80a2-d7351acb29f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{beta}}/api/v1/slow-random"
									},
									"response": []
								},
								{
									"name": "Beta - Who Am I",
									"id": "50712d4c-68da-43ae-b515-4ac0ee088706",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{beta}}/api/v1/who-am-i"
									},
									"response": []
								},
								{
									"name": "Beta - Echo Body",
									"id": "9b6ee2e9-7db4-4fa8-b317-9c744c77d82a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Date",
												"value": "Sun, 24 Dec 2023 09:23:00 GMT",
												"type": "text"
											},
											{
												"key": "Dummy",
												"value": "hmac with body",
												"type": "text"
											},
											{
												"key": "Digest",
												"value": "SHA-256=hkINZeIdBHagYtwUomsVGo8l7OVs6Wj/TbsICKrkAYI=",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "hmac username=\"helen123\", algorithm=\"hmac-sha256\", headers=\"date dummy digest @request-target\", signature=\"change-me\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"key\": 9999,\r\n    \"foo\": \"bar\",\r\n    \"baz\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{beta}}/api/v1/echo-body"
									},
									"response": []
								},
								{
									"name": "Beta - Calculate MD5",
									"id": "8ed31ac3-deb4-4dea-95e4-b3c4ea913a9a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "f",
													"type": "file",
													"value": null
												}
											]
										},
										"url": "{{beta}}/api/v1/md5"
									},
									"response": []
								}
							],
							"id": "d024af7d-6644-4887-9354-ddee2937ff54"
						},
						{
							"name": "Gamma",
							"item": [
								{
									"name": "Gamma - Status",
									"id": "06791813-6435-4ffb-996e-c08b98b7140d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "Ba2lS2wNXDFNoUGLn5zD9b5rCWrSrPH8"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/actuator/health"
									},
									"response": []
								},
								{
									"name": "Gamma - Create QR",
									"id": "c1194e92-e768-4475-b02b-e6c03aa78ceb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gamma}}/v1/create-qr-code?data=hello",
											"host": [
												"{{gamma}}"
											],
											"path": [
												"v1",
												"create-qr-code"
											],
											"query": [
												{
													"key": "data",
													"value": "hello"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Gamma - Fast Response",
									"id": "51ca82b8-17fe-4784-9ee5-8b59e90cda53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/api/v1/fast"
									},
									"response": []
								},
								{
									"name": "Gamma - Fast (Random Status)",
									"id": "f9b5c411-482f-43dc-ba2f-491e127aa53c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/api/v1/fast-random"
									},
									"response": []
								},
								{
									"name": "Gamma - Slow Response",
									"id": "e8561b2a-c9a4-474c-bbf4-93a6a3471dbf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/api/v1/slow"
									},
									"response": []
								},
								{
									"name": "Gamma - Slow (Random Status)",
									"id": "31e2080d-54f2-4b9b-924e-7834ed08a5b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/api/v1/slow-random"
									},
									"response": []
								},
								{
									"name": "Gamma - Who Am I",
									"id": "8d00de2d-4c25-461d-9682-c0ab955b5f48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{gamma}}/api/v1/who-am-i"
									},
									"response": []
								}
							],
							"id": "2c72c6e8-f125-49ed-95ac-cc9bafde38d3"
						},
						{
							"name": "Omega",
							"item": [
								{
									"name": "Omega - Status",
									"id": "e31f2f67-7ede-4675-96a5-3faed211ead8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/actuator/health"
									},
									"response": []
								},
								{
									"name": "Omega - Fast Response",
									"id": "265c595e-7b0e-4fd5-84c6-a0ff518f660d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/fast"
									},
									"response": []
								},
								{
									"name": "Omega - Fast (Random Status)",
									"id": "53393e6b-d06a-41f0-98bd-0b20fa16d984",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/fast-random"
									},
									"response": []
								},
								{
									"name": "Omega - Slow",
									"id": "7f03793b-decb-4b7b-b5ff-a31b852fc0f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/slow"
									},
									"response": []
								},
								{
									"name": "Omega - Slow (Random Status)",
									"id": "c414ec53-e4ca-456e-ae6c-31f36440c4a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/slow-random"
									},
									"response": []
								},
								{
									"name": "Omega - Who Am I",
									"id": "35aadc93-4317-4245-a927-febdfa6d9926",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/who-am-i"
									},
									"response": []
								},
								{
									"name": "Omega - Chain Sync",
									"id": "1638132e-56a3-4cfc-8042-6078ce11a36b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/chain/sync"
									},
									"response": []
								},
								{
									"name": "Omega - Chain Async",
									"id": "5be60145-977b-440b-8295-1c64c7554a5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/chain/async"
									},
									"response": []
								},
								{
									"name": "Omega - Chain (Random Status)",
									"id": "8da9fbad-3d60-4041-8b81-bb7996d2a0b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{omega}}/api/v1/chain/random-status"
									},
									"response": []
								}
							],
							"id": "87ff412b-8c9f-4869-bdd4-af85970f7713"
						}
					],
					"id": "ceac9ce4-602f-4302-aa10-66c0e04c343b"
				}
			],
			"id": "76a67ce2-6f94-49e0-a4ec-6a1558b71765"
		},
		{
			"name": "Other Kong Admin API",
			"item": [
				{
					"name": "Information Routes ",
					"item": [
						{
							"name": "Retrieve Node Information",
							"id": "362fe886-4948-4c3d-9087-d2d30e0d4ca6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/",
								"description": "## Retieve generic details about a node [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-node-information)\n\n* node_id: A UUID representing the running Kong node. This UUID is randomly generated when Kong starts, so the node will have a different node_id each time it is restarted.\n* available_on_server: Names of plugins that are installed on the node.\n* nabled_in_cluster: Names of plugins that are enabled/configured. That is, the plugins configurations currently in the datastore shared by all Kong nodes."
							},
							"response": [
								{
									"id": "dd008dec-0439-46bb-97f3-622700dea9cf",
									"name": "Retrieve Node Information - 200",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 06 Mar 2020 15:13:42 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Server",
											"value": "kong/2.0.1"
										},
										{
											"key": "Content-Length",
											"value": "8664"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "1"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"plugins\": {\n        \"enabled_in_cluster\": [],\n        \"available_on_server\": {\n            \"correlation-id\": true,\n            \"pre-function\": true,\n            \"cors\": true,\n            \"ldap-auth\": true,\n            \"loggly\": true,\n            \"hmac-auth\": true,\n            \"zipkin\": true,\n            \"request-size-limiting\": true,\n            \"azure-functions\": true,\n            \"request-transformer\": true,\n            \"oauth2\": true,\n            \"response-transformer\": true,\n            \"ip-restriction\": true,\n            \"statsd\": true,\n            \"jwt\": true,\n            \"proxy-cache\": true,\n            \"basic-auth\": true,\n            \"key-auth\": true,\n            \"http-log\": true,\n            \"datadog\": true,\n            \"tcp-log\": true,\n            \"post-function\": true,\n            \"prometheus\": true,\n            \"acl\": true,\n            \"syslog\": true,\n            \"file-log\": true,\n            \"session\": true,\n            \"udp-log\": true,\n            \"response-ratelimiting\": true,\n            \"aws-lambda\": true,\n            \"bot-detection\": true,\n            \"rate-limiting\": true,\n            \"request-termination\": true\n        }\n    },\n    \"tagline\": \"Welcome to kong\",\n    \"configuration\": {\n        \"plugins\": [\n            \"bundled\"\n        ],\n        \"admin_listen\": [\n            \"0.0.0.0:8001\",\n            \"0.0.0.0:8444 ssl\"\n        ],\n        \"lua_ssl_verify_depth\": 1,\n        \"prefix\": \"/usr/local/kong\",\n        \"nginx_conf\": \"/usr/local/kong/nginx.conf\",\n        \"cassandra_username\": \"kong\",\n        \"nginx_events_directives\": [\n            {\n                \"value\": \"auto\",\n                \"name\": \"worker_connections\"\n            },\n            {\n                \"value\": \"on\",\n                \"name\": \"multi_accept\"\n            }\n        ],\n        \"admin_ssl_cert_key\": \"/usr/local/kong/ssl/admin-kong-default.key\",\n        \"dns_resolver\": {},\n        \"nginx_upstream_keepalive_requests\": \"100\",\n        \"nginx_http_upstream_directives\": [\n            {\n                \"value\": \"100\",\n                \"name\": \"keepalive_requests\"\n            },\n            {\n                \"value\": \"60s\",\n                \"name\": \"keepalive_timeout\"\n            },\n            {\n                \"value\": \"60\",\n                \"name\": \"keepalive\"\n            }\n        ],\n        \"nginx_main_daemon\": \"off\",\n        \"stream_proxy_ssl_enabled\": false,\n        \"nginx_acc_logs\": \"/usr/local/kong/logs/access.log\",\n        \"pg_semaphore_timeout\": 60000,\n        \"proxy_listen\": [\n            \"0.0.0.0:8000 reuseport backlog=16384\",\n            \"0.0.0.0:8443 http2 ssl reuseport backlog=16384\"\n        ],\n        \"client_ssl_cert_default\": \"/usr/local/kong/ssl/kong-default.crt\",\n        \"go_pluginserver_exe\": \"/usr/local/bin/go-pluginserver\",\n        \"dns_no_sync\": false,\n        \"db_update_propagation\": 0,\n        \"stream_listen\": [\n            \"off\"\n        ],\n        \"nginx_err_logs\": \"/usr/local/kong/logs/error.log\",\n        \"cassandra_port\": 9042,\n        \"headers\": [\n            \"server_tokens\",\n            \"latency_tokens\"\n        ],\n        \"nginx_http_client_max_body_size\": \"0\",\n        \"status_listen\": [\n            \"off\"\n        ],\n        \"nginx_status_directives\": {},\n        \"cluster_control_plane\": \"127.0.0.1:8005\",\n        \"nginx_http_ssl_prefer_server_ciphers\": \"off\",\n        \"pg_database\": \"kong\",\n        \"nginx_http_client_body_buffer_size\": \"8k\",\n        \"admin_acc_logs\": \"/usr/local/kong/logs/admin_access.log\",\n        \"cassandra_refresh_frequency\": 60,\n        \"nginx_pid\": \"/usr/local/kong/pids/nginx.pid\",\n        \"nginx_main_worker_rlimit_nofile\": \"auto\",\n        \"admin_access_log\": \"/dev/stdout\",\n        \"proxy_listeners\": [\n            {\n                \"listener\": \"0.0.0.0:8000 reuseport backlog=16384\",\n                \"proxy_protocol\": false,\n                \"reuseport\": true,\n                \"deferred\": false,\n                \"ssl\": false,\n                \"ip\": \"0.0.0.0\",\n                \"backlog=16384\": true,\n                \"http2\": false,\n                \"port\": 8000,\n                \"bind\": false\n            },\n            {\n                \"listener\": \"0.0.0.0:8443 ssl http2 reuseport backlog=16384\",\n                \"proxy_protocol\": false,\n                \"reuseport\": true,\n                \"deferred\": false,\n                \"ssl\": true,\n                \"ip\": \"0.0.0.0\",\n                \"backlog=16384\": true,\n                \"http2\": true,\n                \"port\": 8443,\n                \"bind\": false\n            }\n        ],\n        \"db_cache_warmup_entities\": [\n            \"services\",\n            \"plugins\"\n        ],\n        \"enabled_headers\": {\n            \"latency_tokens\": true,\n            \"X-Kong-Response-Latency\": true,\n            \"Server\": true,\n            \"X-Kong-Admin-Latency\": true,\n            \"X-Kong-Upstream-Status\": false,\n            \"Via\": true,\n            \"X-Kong-Proxy-Latency\": true,\n            \"server_tokens\": true,\n            \"X-Kong-Upstream-Latency\": true\n        },\n        \"nginx_http_ssl_protocols\": \"TLSv1.2 TLSv1.3\",\n        \"db_cache_ttl\": 0,\n        \"nginx_events_multi_accept\": \"on\",\n        \"admin_ssl_cert_default\": \"/usr/local/kong/ssl/admin-kong-default.crt\",\n        \"pg_ssl\": false,\n        \"status_access_log\": \"off\",\n        \"cluster_listeners\": [\n            {\n                \"listener\": \"0.0.0.0:8005\",\n                \"proxy_protocol\": false,\n                \"reuseport\": false,\n                \"backlog=%d+\": false,\n                \"deferred\": false,\n                \"ssl\": false,\n                \"ip\": \"0.0.0.0\",\n                \"port\": 8005,\n                \"http2\": false,\n                \"bind\": false\n            }\n        ],\n        \"kong_env\": \"/usr/local/kong/.kong_env\",\n        \"cassandra_schema_consensus_timeout\": 10000,\n        \"log_level\": \"notice\",\n        \"admin_ssl_cert_key_default\": \"/usr/local/kong/ssl/admin-kong-default.key\",\n        \"real_ip_recursive\": \"off\",\n        \"proxy_error_log\": \"/dev/stderr\",\n        \"ssl_cipher_suite\": \"intermediate\",\n        \"router_consistency\": \"strict\",\n        \"pg_port\": 5432,\n        \"cassandra_keyspace\": \"kong\",\n        \"ssl_cert_default\": \"/usr/local/kong/ssl/kong-default.crt\",\n        \"nginx_http_ssl_session_timeout\": \"1d\",\n        \"nginx_upstream_directives\": [\n            {\n                \"value\": \"100\",\n                \"name\": \"keepalive_requests\"\n            },\n            {\n                \"value\": \"60s\",\n                \"name\": \"keepalive_timeout\"\n            },\n            {\n                \"value\": \"60\",\n                \"name\": \"keepalive\"\n            }\n        ],\n        \"role\": \"traditional\",\n        \"admin_ssl_enabled\": true,\n        \"trusted_ips\": {},\n        \"loaded_plugins\": {\n            \"correlation-id\": true,\n            \"pre-function\": true,\n            \"cors\": true,\n            \"rate-limiting\": true,\n            \"loggly\": true,\n            \"hmac-auth\": true,\n            \"zipkin\": true,\n            \"bot-detection\": true,\n            \"azure-functions\": true,\n            \"request-transformer\": true,\n            \"oauth2\": true,\n            \"response-transformer\": true,\n            \"syslog\": true,\n            \"statsd\": true,\n            \"jwt\": true,\n            \"proxy-cache\": true,\n            \"basic-auth\": true,\n            \"key-auth\": true,\n            \"http-log\": true,\n            \"datadog\": true,\n            \"tcp-log\": true,\n            \"post-function\": true,\n            \"ldap-auth\": true,\n            \"acl\": true,\n            \"ip-restriction\": true,\n            \"file-log\": true,\n            \"prometheus\": true,\n            \"udp-log\": true,\n            \"response-ratelimiting\": true,\n            \"aws-lambda\": true,\n            \"request-size-limiting\": true,\n            \"session\": true,\n            \"request-termination\": true\n        },\n        \"nginx_supstream_directives\": {},\n        \"ssl_cert_key\": \"/usr/local/kong/ssl/kong-default.key\",\n        \"pg_user\": \"kong\",\n        \"pg_password\": \"******\",\n        \"cassandra_data_centers\": [\n            \"dc1:2\",\n            \"dc2:3\"\n        ],\n        \"nginx_admin_directives\": {},\n        \"nginx_upstream_keepalive_timeout\": \"60s\",\n        \"nginx_http_directives\": [\n            {\n                \"value\": \"0\",\n                \"name\": \"client_max_body_size\"\n            },\n            {\n                \"value\": \"off\",\n                \"name\": \"ssl_prefer_server_ciphers\"\n            },\n            {\n                \"value\": \"8k\",\n                \"name\": \"client_body_buffer_size\"\n            },\n            {\n                \"value\": \"TLSv1.2 TLSv1.3\",\n                \"name\": \"ssl_protocols\"\n            },\n            {\n                \"value\": \"on\",\n                \"name\": \"ssl_session_tickets\"\n            },\n            {\n                \"value\": \"1d\",\n                \"name\": \"ssl_session_timeout\"\n            },\n            {\n                \"value\": \"prometheus_metrics 5m\",\n                \"name\": \"lua_shared_dict\"\n            }\n        ],\n        \"pg_host\": \"kong-database\",\n        \"nginx_kong_stream_conf\": \"/usr/local/kong/nginx-kong-stream.conf\",\n        \"cassandra_ssl\": false,\n        \"go_plugins_dir\": \"off\",\n        \"cluster_listen\": [\n            \"0.0.0.0:8005\"\n        ],\n        \"dns_order\": [\n            \"LAST\",\n            \"SRV\",\n            \"A\",\n            \"CNAME\"\n        ],\n        \"dns_error_ttl\": 1,\n        \"nginx_sproxy_directives\": {},\n        \"nginx_http_upstream_keepalive_timeout\": \"60s\",\n        \"pg_timeout\": 5000,\n        \"nginx_http_upstream_keepalive_requests\": \"100\",\n        \"database\": \"postgres\",\n        \"nginx_upstream_keepalive\": \"60\",\n        \"nginx_worker_processes\": \"auto\",\n        \"nginx_http_status_directives\": {},\n        \"lua_package_path\": \"./?.lua;./?/init.lua;\",\n        \"router_update_frequency\": 1,\n        \"upstream_keepalive\": 60,\n        \"pg_max_concurrent_queries\": 0,\n        \"proxy_ssl_enabled\": true,\n        \"nginx_http_upstream_keepalive\": \"60\",\n        \"lua_socket_pool_size\": 30,\n        \"nginx_proxy_real_ip_header\": \"X-Real-IP\",\n        \"db_resurrect_ttl\": 30,\n        \"mem_cache_size\": \"128m\",\n        \"cassandra_consistency\": \"ONE\",\n        \"client_max_body_size\": \"0\",\n        \"admin_error_log\": \"/dev/stderr\",\n        \"nginx_main_directives\": [\n            {\n                \"value\": \"off\",\n                \"name\": \"daemon\"\n            },\n            {\n                \"value\": \"auto\",\n                \"name\": \"worker_rlimit_nofile\"\n            },\n            {\n                \"value\": \"auto\",\n                \"name\": \"worker_processes\"\n            }\n        ],\n        \"dns_not_found_ttl\": 30,\n        \"nginx_http_ssl_session_tickets\": \"on\",\n        \"ssl_ciphers\": \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\",\n        \"client_ssl\": false,\n        \"cassandra_repl_strategy\": \"SimpleStrategy\",\n        \"status_error_log\": \"logs/status_error.log\",\n        \"ssl_cert_key_default\": \"/usr/local/kong/ssl/kong-default.key\",\n        \"dns_stale_ttl\": 4,\n        \"nginx_main_worker_processes\": \"auto\",\n        \"nginx_kong_conf\": \"/usr/local/kong/nginx-kong.conf\",\n        \"real_ip_header\": \"X-Real-IP\",\n        \"dns_hostsfile\": \"/etc/hosts\",\n        \"admin_listeners\": [\n            {\n                \"listener\": \"0.0.0.0:8001\",\n                \"proxy_protocol\": false,\n                \"reuseport\": false,\n                \"backlog=%d+\": false,\n                \"deferred\": false,\n                \"ssl\": false,\n                \"ip\": \"0.0.0.0\",\n                \"port\": 8001,\n                \"http2\": false,\n                \"bind\": false\n            },\n            {\n                \"listener\": \"0.0.0.0:8444 ssl\",\n                \"proxy_protocol\": false,\n                \"reuseport\": false,\n                \"backlog=%d+\": false,\n                \"deferred\": false,\n                \"ssl\": true,\n                \"ip\": \"0.0.0.0\",\n                \"port\": 8444,\n                \"http2\": false,\n                \"bind\": false\n            }\n        ],\n        \"cassandra_contact_points\": [\n            \"kong-database\"\n        ],\n        \"ssl_cert\": \"/usr/local/kong/ssl/kong-default.crt\",\n        \"nginx_proxy_real_ip_recursive\": \"off\",\n        \"proxy_access_log\": \"/dev/stdout\",\n        \"cassandra_ssl_verify\": false,\n        \"admin_ssl_cert\": \"/usr/local/kong/ssl/admin-kong-default.crt\",\n        \"cassandra_repl_factor\": 1,\n        \"db_update_frequency\": 5,\n        \"nginx_optimizations\": true,\n        \"nginx_proxy_directives\": [\n            {\n                \"value\": \"X-Real-IP\",\n                \"name\": \"real_ip_header\"\n            },\n            {\n                \"value\": \"off\",\n                \"name\": \"real_ip_recursive\"\n            }\n        ],\n        \"nginx_daemon\": \"off\",\n        \"anonymous_reports\": true,\n        \"cassandra_timeout\": 5000,\n        \"status_listeners\": {},\n        \"client_ssl_cert_key_default\": \"/usr/local/kong/ssl/kong-default.key\",\n        \"pg_ssl_verify\": false,\n        \"client_body_buffer_size\": \"8k\",\n        \"nginx_events_worker_connections\": \"auto\",\n        \"stream_listeners\": {},\n        \"error_default_type\": \"text/plain\",\n        \"lua_package_cpath\": \"\",\n        \"cassandra_lb_policy\": \"RequestRoundRobin\",\n        \"nginx_stream_directives\": [\n            {\n                \"value\": \"stream_prometheus_metrics 5m\",\n                \"name\": \"lua_shared_dict\"\n            }\n        ],\n        \"ssl_cert_csr_default\": \"/usr/local/kong/ssl/kong-default.csr\"\n    },\n    \"version\": \"2.0.1\",\n    \"node_id\": \"60d82979-75a1-4c56-aceb-e99d637265c9\",\n    \"lua_version\": \"LuaJIT 2.1.0-beta3\",\n    \"prng_seeds\": {\n        \"pid: 23\": 181234361471,\n        \"pid: 22\": 351146012690,\n        \"pid: 1\": 145823120472\n    },\n    \"timers\": {\n        \"pending\": 7,\n        \"running\": 0\n    },\n    \"hostname\": \"cb1b9b178042\"\n}"
								}
							]
						}
					],
					"id": "9529d9f6-7e79-4bfb-9c90-7db1231e6d10",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#information-routes"
				},
				{
					"name": "Health Routes",
					"item": [
						{
							"name": "Retrieve Node Status",
							"id": "a3e1fefa-ac27-49bc-b8d6-0f5aab9dc42e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/status",
								"description": "## Retrieve Node Status [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-node-status)\n\n* Retrieve usage information about a node, with some basic information about the connections being processed by the underlying nginx process, the status of the database connection, and node’s memory usage.\n* If you want to monitor the Kong process, since Kong is built on top of nginx, every existing nginx monitoring tool or agent can be used.\n\n* memory: Metrics about the memory usage.\n\t* workers_lua_vms: An array with all workers of the Kong node, where each entry contains:\n\t* http_allocated_gc: HTTP submodule’s Lua virtual machine’s memory usage information, as reported by collectgarbage(\"count\"), for every active worker, i.e. a worker that received a proxy call in the last 10 seconds.\n\t* pid: worker’s process identification number.\nlua_shared_dicts: An array of information about dictionaries that are shared with all workers in a Kong node, where each array node contains how much memory is dedicated for the specific shared dictionary (capacity) and how much of said memory is in use (allocated_slabs). These shared dictionaries have least recent used (LRU) eviction capabilities, so a full dictionary, where allocated_slabs == capacity, will work properly. However for some dictionaries, e.g. cache HIT/MISS shared dictionaries, increasing their size can be beneficial for the overall performance of a Kong node.\n\t*  The memory usage unit and precision can be changed using the querystring arguments unit and scale:\n\t\t* unit: one of b/B, k/K, m/M, g/G, which will return results in bytes, kibibytes, mebibytes, or gibibytes, respectively. When “bytes” are requested, the memory values in the response will have a number type instead of string. Defaults to m.\n\t\t* scale: the number of digits to the right of the decimal points when values are given in human-readable memory strings (unit other than “bytes”). Defaults to 2. You can get the shared dictionaries memory usage in kibibytes with 4 digits of precision by doing: GET /status?unit=k&scale=4\n* server: Metrics about the nginx HTTP/S server.\n\t* total_requests: The total number of client requests.\n\t* connections_active: The current number of active client connections including Waiting connections.\n\t* connections_accepted: The total number of accepted client connections.\n\t* connections_handled: The total number of handled connections. Generally, the parameter value is the same as accepts unless some resource limits have been reached.\n\t* connections_reading: The current number of connections where Kong is reading the request header.\n\t* connections_writing: The current number of connections where nginx is writing the response back to the client.\n\t* connections_waiting: The current number of idle client connections waiting for a request.\n* database: Metrics about the database.\n\t* reachable: A boolean value reflecting the state of the database connection. Please note that this flag does not reflect the health of the database itself."
							},
							"response": [
								{
									"id": "3b1c1ea3-dd5b-4f68-b2ef-bf79c3c3c154",
									"name": "Retrieve Node Status - 200",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/status"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 12 Mar 2020 00:40:05 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Server",
											"value": "kong/2.0.1"
										},
										{
											"key": "Content-Length",
											"value": "1153"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "913"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"database\": {\n        \"reachable\": true\n    },\n    \"memory\": {\n        \"workers_lua_vms\": [\n            {\n                \"http_allocated_gc\": \"0.03 MiB\",\n                \"pid\": 22\n            },\n            {\n                \"http_allocated_gc\": \"0.03 MiB\",\n                \"pid\": 23\n            }\n        ],\n        \"lua_shared_dicts\": {\n            \"kong_locks\": {\n                \"allocated_slabs\": \"0.06 MiB\",\n                \"capacity\": \"8.00 MiB\"\n            },\n            \"kong\": {\n                \"allocated_slabs\": \"0.04 MiB\",\n                \"capacity\": \"5.00 MiB\"\n            },\n            \"kong_process_events\": {\n                \"allocated_slabs\": \"0.04 MiB\",\n                \"capacity\": \"5.00 MiB\"\n            },\n            \"kong_db_cache_miss\": {\n                \"allocated_slabs\": \"0.08 MiB\",\n                \"capacity\": \"12.00 MiB\"\n            },\n            \"kong_healthchecks\": {\n                \"allocated_slabs\": \"0.04 MiB\",\n                \"capacity\": \"5.00 MiB\"\n            },\n            \"kong_cluster_events\": {\n                \"allocated_slabs\": \"0.04 MiB\",\n                \"capacity\": \"5.00 MiB\"\n            },\n            \"kong_core_db_cache_miss\": {\n                \"allocated_slabs\": \"0.08 MiB\",\n                \"capacity\": \"12.00 MiB\"\n            },\n            \"kong_core_db_cache\": {\n                \"allocated_slabs\": \"0.77 MiB\",\n                \"capacity\": \"128.00 MiB\"\n            },\n            \"prometheus_metrics\": {\n                \"allocated_slabs\": \"0.04 MiB\",\n                \"capacity\": \"5.00 MiB\"\n            },\n            \"kong_db_cache\": {\n                \"allocated_slabs\": \"0.76 MiB\",\n                \"capacity\": \"128.00 MiB\"\n            },\n            \"kong_rate_limiting_counters\": {\n                \"allocated_slabs\": \"0.08 MiB\",\n                \"capacity\": \"12.00 MiB\"\n            }\n        }\n    },\n    \"server\": {\n        \"connections_writing\": 1,\n        \"total_requests\": 21,\n        \"connections_handled\": 15,\n        \"connections_accepted\": 15,\n        \"connections_reading\": 0,\n        \"connections_active\": 4,\n        \"connections_waiting\": 3\n    }\n}"
								}
							]
						}
					],
					"id": "5d9a5ceb-7ac8-4130-95da-90a8311899ee",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#health-routes"
				},
				{
					"name": "Tags",
					"item": [
						{
							"name": "List All Tags",
							"id": "f52195d7-243c-45ab-af6f-ad1e456576c6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{kong.admin}}/tags",
								"description": "## Retrieve Node Status [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-tags)\n\n\n* Returns a paginated list of all the tags in the system.\n* The list of entities will not be restricted to a single entity type: all the entities tagged with tags will be present on this list.\n* If an entity is tagged with more than one tag, the entity_id for that entity will appear more than once in the resulting list. Similarly, if several entities have been tagged with the same tag, the tag will appear in several items of this list."
							},
							"response": [
								{
									"id": "92a81486-5c12-4052-add1-7e2580ba7ddb",
									"name": "List All Tags - 200",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/tags"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 13 Mar 2020 01:04:37 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Server",
											"value": "kong/2.0.1"
										},
										{
											"key": "Content-Length",
											"value": "1002"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "3"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"next\": null,\n    \"data\": [\n        {\n            \"entity_id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"low-priority\"\n        },\n        {\n            \"entity_id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n            \"entity_name\": \"routes\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n            \"entity_name\": \"routes\",\n            \"tag\": \"low-priority\"\n        },\n        {\n            \"entity_id\": \"c883d8e7-0a33-4153-9d18-0741a3412125\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"c883d8e7-0a33-4153-9d18-0741a3412125\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"low-priority\"\n        },\n        {\n            \"entity_id\": \"e080cdd2-cdf4-4634-9d5d-1668c6929697\",\n            \"entity_name\": \"plugins\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"e080cdd2-cdf4-4634-9d5d-1668c6929697\",\n            \"entity_name\": \"plugins\",\n            \"tag\": \"low-priority\"\n        },\n        {\n            \"entity_id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n            \"entity_name\": \"upstreams\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n            \"entity_name\": \"upstreams\",\n            \"tag\": \"low-priority\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "List Entity Ids by Tag",
							"id": "fc56fb1a-dfce-4b44-831b-bcb3296b0397",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/tags/:tags",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"tags",
										":tags"
									],
									"variable": [
										{
											"id": "6db49073-34c0-4083-a510-63f9b9e352b7",
											"key": "tags",
											"value": "{{tags}}",
											"description": "Returns the entities that have been tagged with the specified tag."
										}
									]
								},
								"description": "## List Entity Ids by Tag [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-entity-ids-by-tag)\n\n* Returns the entities that have been tagged with the specified tag.\n* The list of entities will not be restricted to a single entity type: all the entities tagged with tags will be present on this list."
							},
							"response": [
								{
									"id": "2f4b1fb8-823d-449d-9b06-d3721801889f",
									"name": "List Entity Ids by Tag - 200",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/tags/:tags",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"tags",
												":tags"
											],
											"variable": [
												{
													"key": "tags",
													"value": "user-level",
													"description": "Returns the entities that have been tagged with the specified tag."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 13 Mar 2020 01:32:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Server",
											"value": "kong/2.0.1"
										},
										{
											"key": "Content-Length",
											"value": "507"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "2"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"next\": null,\n    \"data\": [\n        {\n            \"entity_id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n            \"entity_name\": \"routes\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"c883d8e7-0a33-4153-9d18-0741a3412125\",\n            \"entity_name\": \"consumers\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"e080cdd2-cdf4-4634-9d5d-1668c6929697\",\n            \"entity_name\": \"plugins\",\n            \"tag\": \"user-level\"\n        },\n        {\n            \"entity_id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n            \"entity_name\": \"upstreams\",\n            \"tag\": \"user-level\"\n        }\n    ]\n}"
								},
								{
									"id": "7178d7ca-b1f1-4b1f-b884-7d75013e5628",
									"name": "List Entity Ids by Tag - 400",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/tags/:tags",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"tags",
												":tags"
											],
											"variable": [
												{
													"key": "tags",
													"value": "user-level,low-priority",
													"description": "Returns the entities that have been tagged with the specified tag."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 13 Mar 2020 01:33:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Server",
											"value": "kong/2.0.1"
										},
										{
											"key": "Content-Length",
											"value": "90"
										},
										{
											"key": "X-Kong-Admin-Latency",
											"value": "0"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"name\": \"invalid unique tag\",\n    \"message\": \"invalid value: user-level,low-priority\",\n    \"code\": 10\n}"
								}
							]
						}
					],
					"id": "e142d1ca-18b7-4002-bc1c-87da3ec1948b",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#tags\n\n* Tags are strings associated to entities in Kong. Each tag must be composed of one or more alphanumeric characters, _, -, . or ~.\n* Most core entities can be tagged via their tags attribute, upon creation or edition.\n* Tags can be used to filter core entities as well, via the ?tags query string parameter.\n * For example: if you normally get a list of all the Services by doing:\n<br><table><tr><th>GET /services</th></tr></table>\n * You can get the list of all the Services tagged example by doing:\n<br><table><tr><th>GET /services?tags=example</th></tr></table>\n * Similarly, if you want to filter Services so that you only get the ones tagged example and admin, you can do that like so:\n<br><table><tr><th>GET /services?tags=example,admin</th></tr></table>\n * Finally, if you wanted to filter the Services tagged example or admin, you could use:\n<br><table><tr><th>GET /services?tags=example/admin</th></tr></table>\n* Some notes:\n * A maximum of 5 tags can be queried simultaneously in a single request with , or /\nMixing operators is not supported: if you try to mix , with / in the same querystring, you will receive an error.\n * You may need to quote and/or escape some characters when using them from the command line.\n * Filtering by tags is not supported in foreign key relationship endpoints. For example, the tags parameter will be ignored in a request such as\n<br><table><tr><th>GET /services/foo/routes?tags=a,b</th></tr></table>\n * offset parameters are not guaranteed to work if the tags parameter is altered or removed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2e345b28-a9cf-4834-82c3-cc249d4eb071"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0d345098-bb39-441e-9c0d-df8f15be2a0b"
							}
						}
					]
				},
				{
					"name": "Service Object",
					"item": [
						{
							"name": "Add Service",
							"item": [
								{
									"name": "Create Service",
									"id": "a26e3e0f-3c6f-456a-83d6-d059601af051",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"httpbin.org\",\n    \"connect_timeout\": 60000,\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": null,\n    \"client_certificate\": null\n}"
										},
										"url": "{{kong.admin}}/services",
										"description": "## Create Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-service)\n\n* Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc.\n* The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its protocol, host, port and path individually.\n*Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the Proxy Reference for a detailed explanation of how Kong proxies traffic.\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "3df9f201-df02-4437-a744-a30ea4f5d2e1",
											"name": "Create Service - 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"httpbin.org\",\n    \"connect_timeout\": 60000,\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": null,\n    \"client_certificate\": null\n}"
												},
												"url": "{{kong.admin}}/services"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 01:57:34 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "294"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "8"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"host\": \"httpbin.org\",\n    \"created_at\": 1584064654,\n    \"connect_timeout\": 60000,\n    \"id\": \"0022319a-a0b7-49d9-9eba-f2794f461de8\",\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"updated_at\": 1584064654,\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": null,\n    \"client_certificate\": null\n}"
										},
										{
											"id": "fcd334f6-ff8e-48b9-86be-bf7f71f9199e",
											"name": "Create Service - 409",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
												},
												"url": "{{kong.admin}}/services"
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sat, 07 Mar 2020 23:04:28 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "145"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "5"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"UNIQUE violation detected on '{name=\\\"httpbin-api\\\"}'\",\n    \"name\": \"unique constraint violation\",\n    \"fields\": {\n        \"name\": \"httpbin-api\"\n    },\n    \"code\": 5\n}"
										}
									]
								},
								{
									"name": "Create Service Associated to a Specific Certificate",
									"id": "3f29ae85-2ab2-4016-866c-567edf66df70",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateIdorName/services",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateIdorName",
												"services"
											],
											"variable": [
												{
													"id": "6a0b3bd0-3ce6-4d8f-9b40-619de4dd55e4",
													"key": "certificateIdorName",
													"value": ""
												}
											]
										},
										"description": "## Create Service Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-service-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Certificate that should be associated to the newly-created Service.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "0135b10f-86d3-4b78-af48-8cc597df3b9a",
											"name": "Create Service Associated to a Specific Certificate",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateIdorName/services",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateIdorName",
														"services"
													],
													"variable": [
														{
															"key": "certificateIdorName",
															"value": ""
														}
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"9748f662-7711-4a90-8186-dc02f10eb0f5\",\n    \"created_at\": 1422386534,\n    \"updated_at\": 1422386534,\n    \"name\": \"my-service\",\n    \"retries\": 5,\n    \"protocol\": \"http\",\n    \"host\": \"example.com\",\n    \"port\": 80,\n    \"path\": \"/some_api\",\n    \"connect_timeout\": 60000,\n    \"write_timeout\": 60000,\n    \"read_timeout\": 60000,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"client_certificate\": {\n        \"id\": \"4e3ad2e4-0bc4-4638-8e34-c84a417ba39b\"\n    }\n}"
										},
										{
											"id": "510556f8-8ab0-40db-97c8-7a567ab4c08a",
											"name": "Create Service",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"description": "https://docs.konghq.com/2.0.x/admin-api/#supported-content-types",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
												},
												"url": "{{kong.admin}}/services"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 06 Mar 2020 19:57:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "294"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "19"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"host\": \"httpbin.org\",\n    \"created_at\": 1583524667,\n    \"connect_timeout\": 60000,\n    \"id\": \"ebcbaad6-797f-435c-be22-63051db717c3\",\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"updated_at\": 1583524667,\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": null,\n    \"client_certificate\": null\n}"
										}
									]
								}
							],
							"id": "c93c4fc8-4a08-4de5-a552-8e5ea0f9f834",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-service"
						},
						{
							"name": "List Services",
							"item": [
								{
									"name": "List all services",
									"id": "20e317e1-84da-4795-ad36-35b8f0e69d50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services?tags={{tags}}",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services"
											],
											"query": [
												{
													"key": "tags",
													"value": "{{tags}}"
												}
											]
										},
										"description": "## List all services [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-services)\n* Services can be both tagged and filtered by [tags](https://docs.konghq.com/2.0.x/admin-api/#tags)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>query</td>\n    <td>Tags can be used to filter core entities as well, via the ?tags querystring parameter. See https://docs.konghq.com/2.0.x/admin-api/#tags </td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "acf2697e-3c69-4472-ad40-789f1c5f99ad",
											"name": "List all services - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/services"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sat, 07 Mar 2020 23:07:29 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "317"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a5fb8d9b-a99d-40e9-9d35-72d42a62d83a\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-service\",\n\t\t\t\"retries\": 5,\n\t\t\t\"protocol\": \"http\",\n\t\t\t\"host\": \"example.com\",\n\t\t\t\"port\": 80,\n\t\t\t\"path\": \"/some_api\",\n\t\t\t\"connect_timeout\": 60000,\n\t\t\t\"write_timeout\": 60000,\n\t\t\t\"read_timeout\": 60000,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"client_certificate\": {\n\t\t\t\t\"id\": \"51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"fc73f2af-890d-4f9b-8363-af8945001f7f\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-service\",\n\t\t\t\"retries\": 5,\n\t\t\t\"protocol\": \"http\",\n\t\t\t\"host\": \"example.com\",\n\t\t\t\"port\": 80,\n\t\t\t\"path\": \"/another_api\",\n\t\t\t\"connect_timeout\": 60000,\n\t\t\t\"write_timeout\": 60000,\n\t\t\t\"read_timeout\": 60000,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"client_certificate\": {\n\t\t\t\t\"id\": \"4506673d-c825-444c-a25b-602e3c2ec16e\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/services?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										},
										{
											"id": "6a5e1f53-3c2a-46de-b92a-14a858ffdb85",
											"name": "List all services - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services?tags={{tags}}",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services"
													],
													"query": [
														{
															"key": "tags",
															"value": "{{tags}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 02:11:46 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "343"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"next\": \"sed pariatur Ut veniam do\",\n \"data\": [\n  {\n   \"host\": \"httpbin.org\",\n   \"created_at\": 1584064654,\n   \"connect_timeout\": 60000,\n   \"id\": \"0022319a-a0b7-49d9-9eba-f2794f461de8\",\n   \"protocol\": \"https\",\n   \"name\": \"httpbin-apil\",\n   \"read_timeout\": 60000,\n   \"port\": 443,\n   \"path\": \"/\",\n   \"updated_at\": 1584065489,\n   \"retries\": 5,\n   \"write_timeout\": 60000,\n   \"tags\": [\n    \"user-level\",\n    \"low-priority\"\n   ],\n   \"client_certificate\": {\n    \"id\": \"ut\"\n   }\n  }\n ]\n}"
										}
									]
								},
								{
									"name": "List Services Associated to a Specific Certificate",
									"id": "0d52db2a-c8fb-4992-b90a-57173c1d20bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateNameOrId/services",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateNameOrId",
												"services"
											],
											"variable": [
												{
													"id": "7b3611e1-b984-4bf8-885d-81071fb36316",
													"key": "certificateNameOrId"
												}
											]
										},
										"description": "## List Services Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-services-associated-to-a-specific-certificate)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Certificate whose Services are to be retrieved. When using this endpoint, only Services associated to the specified Certificate will be listed.</td>\n  </tr>"
									},
									"response": [
										{
											"id": "38ecce6e-0791-4aa1-aa17-9f7a7db633ca",
											"name": "List Services Associated to a Specific Certificate - 404",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateNameOrId/services",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateNameOrId",
														"services"
													],
													"variable": [
														{
															"key": "certificateNameOrId",
															"value": ""
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:07:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										}
									]
								}
							],
							"id": "741b96eb-b54a-413a-8fe9-8f69d735e9b4",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-services"
						},
						{
							"name": "Retrieve Service",
							"item": [
								{
									"name": "Retrieve Service",
									"id": "61b77f0f-6113-40d8-97b2-1fa22eb3fd6f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrID",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrID"
											],
											"variable": [
												{
													"id": "624973b0-5d15-4423-bcc2-c7b9d082e270",
													"key": "serviceNameOrID",
													"value": "{{serviceNameOrID}}"
												}
											]
										},
										"description": "## Retrieve Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "4b360fbf-559c-420c-bda0-a28d3ab44f3d",
											"name": "Retrieve Service - 404",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrID"
													],
													"variable": [
														{
															"key": "serviceNameOrID",
															"value": "{{serviceNameOrID}}b"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 02:06:03 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										},
										{
											"id": "049439c3-6f86-453d-8e74-8cf46c276489",
											"name": "Retrieve Service - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrID"
													],
													"variable": [
														{
															"key": "serviceNameOrID",
															"value": "{{serviceNameOrID}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 02:05:23 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "294"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"host\": \"httpbin.org\",\n    \"created_at\": 1584064654,\n    \"connect_timeout\": 60000,\n    \"id\": \"0022319a-a0b7-49d9-9eba-f2794f461de8\",\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"updated_at\": 1584064654,\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": null,\n    \"client_certificate\": null\n}"
										}
									]
								},
								{
									"name": "Retrieve Service Associated to a Specific Certificate",
									"id": "d2ac2f0d-bade-4a1f-ab81-ced94ee3c6de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "2355ebf0-cd46-490d-ae6e-c7d49c32bb32",
													"key": "certificateId",
													"value": ""
												},
												{
													"id": "9e24bdff-b81f-452d-8f41-c056e63f9020",
													"key": "serviceNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Retrieve Service Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to retrieve.</td>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Retrieve Service Associated to a Specific Route",
									"id": "af5cc521-2cc3-4560-ac74-9f71a1193ec6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"service"
											],
											"variable": [
												{
													"id": "906f8d2b-ded4-4ff4-9317-9e1925923a3a",
													"key": "routeNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Retrieve Service Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-route)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route associated to the Service to be retrieved.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Retrieve Service Associated to a Specific Plugin",
									"id": "a3604ae0-5037-4113-8aa5-4c84c7a65568",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"service"
											],
											"variable": [
												{
													"id": "5a1da12a-a3af-4630-9052-ca7a9ca60f5f",
													"key": "pluginId",
													"value": ""
												}
											]
										},
										"description": "## Retrieve Service Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Service to be retrieved.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "a313bd17-0aec-4257-8702-cf90945cdfe6",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "70f923e1-1d3f-4e2c-b3ca-01a139369236"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4579efbb-d0d9-440e-ba74-2ab4b28e319b"
									}
								}
							]
						},
						{
							"name": "Update Service",
							"item": [
								{
									"name": "Update Service",
									"id": "8375c84e-91e3-44ea-80aa-ec00adfd46c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\":  [\"user-level\", \"low-priority\"],\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "71932460-9a70-48ea-95eb-c27fb09a4809",
													"key": "serviceNameOrId",
													"value": "httpbin-api"
												}
											]
										},
										"description": "## Update Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "26eec809-4f36-40f7-9dcb-cacfa9b9ecca",
											"name": "Update Service - 200",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\":  [\"user-level\", \"low-priority\"],\n\t\"client_certificate\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 02:10:35 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "319"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "16"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"host\": \"httpbin.org\",\n    \"created_at\": 1584064654,\n    \"connect_timeout\": 60000,\n    \"id\": \"0022319a-a0b7-49d9-9eba-f2794f461de8\",\n    \"protocol\": \"https\",\n    \"name\": \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\": 443,\n    \"path\": \"/\",\n    \"updated_at\": 1584065435,\n    \"retries\": 5,\n    \"write_timeout\": 60000,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"client_certificate\": null\n}"
										}
									]
								},
								{
									"name": "Update Service Associated to a Specific Certificate",
									"id": "0561cb16-ca2e-4fe3-8b0c-a49fc06dba84",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "a25e6cde-d2d5-4a6c-bea4-a5b0a76b2065",
													"key": "certificateId",
													"value": ""
												},
												{
													"id": "2ba5736b-8b0c-4e6a-8163-e7d3b78c683d",
													"key": "serviceNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Update Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-certificate)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update</td>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Update Service Associated to a Specific Route",
									"id": "937951b1-85c8-452b-acb0-91cc98199663",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"service"
											],
											"variable": [
												{
													"id": "cf0aa20c-2369-444c-b4c4-34a7eb9d3b71",
													"key": "routeNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Update Service Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-route)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Update Service Associated to a Specific Plugin",
									"id": "e8acb998-cfcc-4401-8027-07d7b44e4288",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"service"
											],
											"variable": [
												{
													"id": "01322d2b-5af3-418d-af04-50e5d4d3c64e",
													"key": "pluginId",
													"value": ""
												}
											]
										},
										"description": "## Update Service Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "a2cd7e93-fbe4-4ba5-a80d-07d39735458e",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-service"
						},
						{
							"name": "Upsert Service",
							"item": [
								{
									"name": "Create Or Update Service",
									"id": "c5befe0d-b4c9-40cd-afb3-431f241be234",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "18f327c3-812c-4791-908f-528b1aeb9a0f",
													"key": "serviceNameOrId",
													"value": "httpbin-api"
												}
											]
										},
										"description": "## Create Or Update Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service)\n\n* Inserts (or replaces) the Service under the requested resource with the definition specified in the body. The Service will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Service being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Service without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "ab8fc93d-15d6-4f4c-82c5-6a032c19f432",
											"name": "Update Service_Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"host\": \"httpbin.org\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null,\n\t\"url\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sun, 08 Mar 2020 01:20:52 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "330"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"3 schema violations (host: required field missing; path: should start with: /; protocol: expected one of: grpc, grpcs, http, https, tcp, tls)\",\n    \"name\": \"schema violation\",\n    \"fields\": {\n        \"host\": \"required field missing\",\n        \"path\": \"should start with: /\",\n        \"protocol\": \"expected one of: grpc, grpcs, http, https, tcp, tls\"\n    },\n    \"code\": 2\n}"
										},
										{
											"id": "54a53858-ef63-4cbb-8331-fb2a09e14f3c",
											"name": "Update Service",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sun, 08 Mar 2020 01:25:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "294"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"host\": \"httpbin.org\",\r\n    \"created_at\": 1583630747,\r\n    \"connect_timeout\": 60000,\r\n    \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\",\r\n    \"protocol\": \"https\",\r\n    \"name\": \"httpbin-api\",\r\n    \"read_timeout\": 60000,\r\n    \"port\": 443,\r\n    \"path\": \"/\",\r\n    \"updated_at\": 1583630747,\r\n    \"retries\": 5,\r\n    \"write_timeout\": 60000,\r\n    \"tags\": null,\r\n    \"client_certificate\": null\r\n}"
										}
									]
								},
								{
									"name": "Create Or Update Service Associated to a Specific Certificate",
									"id": "64bcea45-feb1-4495-9215-c37df19b52cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "86ca33ec-269b-498d-bafc-108702b9fb57",
													"key": "certificateId",
													"value": ""
												},
												{
													"id": "0f971374-fa1b-4155-9217-eeade65d5f8c",
													"key": "serviceNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Create Or Update Service Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-certificate)\n* Inserts (or replaces) the Service under the requested resource with the definition specified in the body. The Service will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Service being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Service without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update</td>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Or Update Service Associated to a Specific Route",
									"id": "099a961b-47af-45f8-bf6a-5dba5690c8c9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"service"
											],
											"variable": [
												{
													"id": "5ff30ec9-df25-4071-912f-11e1c2f5ab38",
													"key": "routeNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Create Or Update Service Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-route)\n* Inserts (or replaces) the Service under the requested resource with the definition specified in the body. The Service will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Service being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Service without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Or Update Service Associated to a Specific Plugin",
									"id": "9aec1c17-af4c-4837-a009-8edf846e9fb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"service"
											],
											"variable": [
												{
													"id": "c4ec3db7-5330-4818-83b5-45fef3ee9f7c",
													"key": "pluginId",
													"value": ""
												}
											]
										},
										"description": "## Create Or Update Service Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-plugin)\n* Inserts (or replaces) the Service under the requested resource with the definition specified in the body. The Service will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Service being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Service without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "d8445d1e-0922-47e8-be05-2dd944e836b5",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "35bd8bbe-b9d7-433b-abd0-6741bf7a2e63"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ca2e4de0-dfe0-4f4e-a079-de6f3b75c4f2"
									}
								}
							]
						},
						{
							"name": "Delete Service",
							"item": [
								{
									"name": "Delete Service",
									"id": "845d1227-ea18-4ed4-b9d7-b15ad72b194b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:ServiceNameOrID",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":ServiceNameOrID"
											],
											"variable": [
												{
													"id": "854d859e-1f92-4492-b7d6-a8c5e8445472",
													"key": "ServiceNameOrID",
													"value": ""
												}
											]
										},
										"description": "## Delete Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to delete</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "2d3d5d4d-9c3d-421e-9af9-719b132fb822",
											"name": "Delete Service - 204",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:ServiceNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":ServiceNameOrID"
													],
													"variable": [
														{
															"key": "ServiceNameOrID",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 01:57:04 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "2ad71a61-ecb6-4022-beac-e40b350c0e71",
											"name": "Delete Service - 400",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:ServiceNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":ServiceNameOrID"
													],
													"variable": [
														{
															"key": "ServiceNameOrID",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 01:55:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "152"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "8"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"an existing 'routes' entity references this 'services' entity\",\n    \"name\": \"foreign key violation\",\n    \"fields\": {\n        \"@referenced_by\": \"routes\"\n    },\n    \"code\": 4\n}"
										}
									]
								},
								{
									"name": "Delete Service Associated to a Specific Certificate",
									"id": "dc7d58bb-49f4-44da-87c4-fa53710c6a05",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "7cefcf4f-8068-4c26-83d6-70e1a6c29304",
													"key": "certificateId",
													"value": ""
												},
												{
													"id": "515f1ca1-b713-4fe6-a0e1-58b60ae07b4c",
													"key": "serviceNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Delete Service Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to delete.</td>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Delete Service Associated to a Specific Route",
									"id": "beb705bc-1179-4d52-a4bb-516c6377affd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"service"
											],
											"variable": [
												{
													"id": "1ac54899-69ea-4d6a-9fc0-58b32ecb6ff0",
													"key": "routeNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Delete Service Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-route)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route associated to the Service to be deleted</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "07776bcc-9204-40af-b32e-84ccaa29e311",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-service"
						}
					],
					"id": "16718603-5a9f-406f-a41c-e5b01cc760c0",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#service-object\n\n* Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc.\n\n* The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its protocol, host, port and path individually.\n\n* Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the Proxy Reference for a detailed explanation of how Kong proxies traffic.\n\n* Services can be both tagged and filtered by [tags](https://docs.konghq.com/2.0.x/admin-api/#tags)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d27eafc5-35eb-46b5-813b-f93f2487790e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0acd75be-eb25-498f-b375-d01d7aca656c"
							}
						}
					]
				},
				{
					"name": "Consumer Object",
					"item": [
						{
							"name": "Add Consumer",
							"item": [
								{
									"name": "Create Consumer",
									"id": "08b030c2-d0de-41ab-b1f4-b3a26ae4fd46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										"url": "{{kong.admin}}/consumers",
										"description": "## Create Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-consumer)\n\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>username</td>\n    <td>semi-optional</td>\n    <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>\n  </tr>\n  <tr>\n    <td>custom_id</td>\n    <td>semi-optional</td>\n    <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "3b4338c2-fec9-46c1-bd69-0c112baf42e6",
											"name": "Create Consumer",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{kong.admin}}/consumers"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 05:32:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "158"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"custom_id\": \"my-custom-id\",\n    \"created_at\": 1583991173,\n    \"id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"username\": \"my-username\"\n}"
										}
									]
								}
							],
							"id": "b1139487-a56a-4629-809b-d11a5a814b6a",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-consumer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "04747d09-c36e-4fbb-9041-5785f31c6182"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "520b7938-a498-428d-960e-77dbe8cbe91f"
									}
								}
							]
						},
						{
							"name": "List Consumers",
							"item": [
								{
									"name": "List All Consumers",
									"id": "f4e2f2a2-f642-45bc-9a97-ba1192a590cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/consumers",
										"description": "## List All Consumers [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-consumers)"
									},
									"response": [
										{
											"id": "eb3b46a0-a2a1-4fe3-a32f-b56d8fae3707",
											"name": "List All Routes",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/routes"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:21:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a9daa3ba-8186-4a0d-96e8-00d80ce7240b\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"http\",\n\t\t\t\t\"https\"\n\t\t\t],\n\t\t\t\"methods\": [\n\t\t\t\t\"GET\",\n\t\t\t\t\"POST\"\n\t\t\t],\n\t\t\t\"hosts\": [\n\t\t\t\t\"example.com\",\n\t\t\t\t\"foo.test\"\n\t\t\t],\n\t\t\t\"paths\": [\n\t\t\t\t\"/foo\",\n\t\t\t\t\"/bar\"\n\t\t\t],\n\t\t\t\"headers\": {\n\t\t\t\t\"x-another-header\": [\n\t\t\t\t\t\"bla\"\n\t\t\t\t],\n\t\t\t\t\"x-my-header\": [\n\t\t\t\t\t\"foo\",\n\t\t\t\t\t\"bar\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"127dfc88-ed57-45bf-b77a-a9d3a152ad31\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"9aa116fd-ef4a-4efa-89bf-a0b17c4be982\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"tcp\",\n\t\t\t\t\"tls\"\n\t\t\t],\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"snis\": [\n\t\t\t\t\"foo.test\",\n\t\t\t\t\"example.com\"\n\t\t\t],\n\t\t\t\"sources\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"destinations\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"ba641b07-e74a-430a-ab46-94b61e5ea66b\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/routes?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										},
										{
											"id": "a9d6b05d-1ace-4e81-a76e-beb33beab2a9",
											"name": "List All Consumers",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/consumers"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 05:35:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "305"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"next\": \"http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\",\n \"data\": [\n  {\n   \"custom_id\": \"my-custom-id\",\n   \"created_at\": 1583991173,\n   \"id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n   \"tags\": [\n    \"user-level\",\n    \"low-priority\"\n   ],\n   \"username\": \"my-username\",\n   \"updated_at\": 96342876,\n   \"name\": \"pariatur occaecat\",\n   \"protocols\": [\n    \"elit sunt\",\n    \"sit est\",\n    \"tempor id\"\n   ],\n   \"https_redirect_status_code\": 7940952,\n   \"regex_priority\": -84514160,\n   \"strip_path\": false,\n   \"path_handling\": \"commodo Excepteur anim officia\",\n   \"preserve_host\": true,\n   \"service\": {\n    \"id\": \"sunt est\"\n   }\n  },\n  {\n   \"custom_id\": null,\n   \"created_at\": 1583991062,\n   \"id\": \"67775de2-2f2e-4eb1-90c8-967490e7b6c5\",\n   \"tags\": [\n    \"ullamco magna\",\n    \"sint officia ullamco sit\",\n    \"deserunt consectetur\",\n    \"qui enim sit veniam\"\n   ],\n   \"username\": \"my-consumer\",\n   \"updated_at\": 64497866,\n   \"name\": \"occaecat incididunt qui aliqua comm\",\n   \"protocols\": [\n    \"eu elit\",\n    \"minim velit enim\",\n    \"est sit fugiat commodo\"\n   ],\n   \"https_redirect_status_code\": -26417144,\n   \"regex_priority\": -51823528,\n   \"strip_path\": false,\n   \"path_handling\": \"deserunt sit\",\n   \"preserve_host\": false,\n   \"service\": {\n    \"id\": \"esse\"\n   }\n  }\n ]\n}"
										}
									]
								}
							],
							"id": "e8f2ffeb-f409-499f-b908-667e150fc779",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-consumers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7f96fef7-dedc-4ed1-813c-fde3b97e22a8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d80cbea2-7178-4836-9271-53541ecfc383"
									}
								}
							]
						},
						{
							"name": "Retrieve Consumer",
							"item": [
								{
									"name": "Retrieve Consumer",
									"id": "a7b307ec-c283-4bbd-815a-f3433eb6a51e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrID",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrID"
											],
											"variable": [
												{
													"id": "243024f0-ad60-4db7-a8f3-f62430348701",
													"key": "consumerUsernameOrID",
													"value": "my-username",
													"description": "The unique identifier or the username of the Consumer to retrieve."
												}
											]
										},
										"description": "## Retrieve Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "d3cc4ea8-8abd-4a88-9a7d-dbdbf914ae72",
											"name": "Retrieve Consumer - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/consumers/:consumerUsernameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"consumers",
														":consumerUsernameOrID"
													],
													"variable": [
														{
															"key": "consumerUsernameOrID",
															"value": "my-username",
															"description": "The unique identifier or the username of the Consumer to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 06:16:23 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "158"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"custom_id\": \"my-custom-id\",\n    \"created_at\": 1583991173,\n    \"id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"username\": \"my-username\"\n}"
										},
										{
											"id": "2daa0c28-7dfb-41d1-ae23-fafdfdc57b0c",
											"name": "Retrieve Consumer - 404",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/consumers/:consumerUsernameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"consumers",
														":consumerUsernameOrID"
													],
													"variable": [
														{
															"key": "consumerUsernameOrID",
															"value": "my-usernamel",
															"description": "The unique identifier or the username of the Consumer to retrieve."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 06:17:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Consumer Associated to a Specific Plugin",
									"id": "856aeb44-d51f-402b-90ed-6e5870134b61",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/consumer",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"consumer"
											],
											"variable": [
												{
													"id": "2346da71-d4ad-4dc9-9ff3-136c8526e452",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to retrieve"
												}
											]
										},
										"description": "## Retrieve Consumer Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-associated-to-a-specific-plugin</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "270d2527-5042-49a1-8962-d44fac63ffe6",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8615af55-738b-4f2e-8d06-32396930b5fb"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "35e3026d-83f5-4f03-a2f8-cbe7fe8d3282"
									}
								}
							]
						},
						{
							"name": "Update Consumer",
							"item": [
								{
									"name": "Update Consumer",
									"id": "ad02300b-8367-4e57-8aae-6d6e085d77cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrId"
											],
											"variable": [
												{
													"id": "cbfca1b7-e12d-4bca-814f-b1843acc4cb5",
													"key": "consumerUsernameOrId",
													"value": "my-username",
													"description": "The unique identifier or the username of the Consumer to retrieve"
												}
											]
										},
										"description": "## Update Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-consumer-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to retrieve.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>username</td>\n    <td>semi-optional</td>\n    <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>\n  </tr>\n  <tr>\n    <td>custom_id</td>\n    <td>semi-optional</td>\n    <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "711ea38f-222c-4644-abfa-660061cfc3ea",
											"name": "Update Consumer - 200",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"consumers",
														":consumerUsernameOrId"
													],
													"variable": [
														{
															"key": "consumerUsernameOrId",
															"value": "my-username",
															"description": "The unique identifier or the username of the Consumer to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 06:27:20 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "158"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"custom_id\": \"my-custom-id\",\n    \"created_at\": 1583991173,\n    \"id\": \"626169e4-6cd7-4952-85b1-3fda70fd5333\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"username\": \"my-username\"\n}"
										}
									]
								},
								{
									"name": "Update Consumer Associated to a Specific Plugin",
									"id": "a114a2d5-e501-4b42-9ee8-bc009a6e81ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/consumer",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"consumer"
											],
											"variable": [
												{
													"id": "f2d152bd-5cef-48f5-8100-639e1d66afe0",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin associated to the Consumer to be updated."
												}
											]
										},
										"description": "## Update Consumer Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-consumer-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Consumer to be updated.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>username</td>\n    <td>semi-optional</td>\n    <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>\n  </tr>\n  <tr>\n    <td>custom_id</td>\n    <td>semi-optional</td>\n    <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "06a3e096-5bad-48a9-bae2-ba26855ae7a1",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-consumer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7a7bf050-b87a-4ec6-895e-da0a1920b23f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8859ca74-3698-43fb-93af-c622b8179454"
									}
								}
							]
						},
						{
							"name": "Update Or Create Consumer",
							"item": [
								{
									"name": "Create Or Update Consumer",
									"id": "2e70fc20-a41e-436d-a952-9cc9c687c789",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"my-username1\",\r\n    \"custom_id\": \"my-custom-id1\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrId"
											],
											"variable": [
												{
													"id": "1a5fdb45-5198-48cd-ae40-f57ee6b1fc02",
													"key": "consumerUsernameOrId",
													"value": "my-username1",
													"description": "The unique identifier or the username of the Consumer to retrieve"
												}
											]
										},
										"description": "## Create Or Update Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-consumer)\n\n* Inserts (or replaces) the Consumer under the requested resource with the definition specified in the body. The Consumer will be identified via the username or id attribute.\n* When the username or id attribute has the structure of a UUID, the Consumer being inserted/replaced will be identified by its id. Otherwise it will be identified by its username.\n* When creating a new Consumer without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a username in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to retrieve.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>username</td>\n    <td>semi-optional</td>\n    <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>\n  </tr>\n  <tr>\n    <td>custom_id</td>\n    <td>semi-optional</td>\n    <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "c9398a5f-da24-42a5-8a94-d3c93b551e3f",
											"name": "Create Or Update Consumer - 200",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"my-username1\",\r\n    \"custom_id\": \"my-custom-id1\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"consumers",
														":consumerUsernameOrId"
													],
													"variable": [
														{
															"key": "consumerUsernameOrId",
															"value": "my-username1",
															"description": "The unique identifier or the username of the Consumer to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 06:37:32 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "160"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "7"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"custom_id\": \"my-custom-id1\",\n    \"created_at\": 1583995052,\n    \"id\": \"c883d8e7-0a33-4153-9d18-0741a3412125\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"username\": \"my-username1\"\n}"
										},
										{
											"id": "831a1588-339f-470a-8ed1-a261f0cbed81",
											"name": "Create Or Update Consumer - 409",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"my-username2\",\r\n    \"custom_id\": \"my-custom-id\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"consumers",
														":consumerUsernameOrId"
													],
													"variable": [
														{
															"key": "consumerUsernameOrId",
															"value": "my-username",
															"description": "The unique identifier or the username of the Consumer to retrieve"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 06:36:37 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "157"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"UNIQUE violation detected on '{custom_id=\\\"my-custom-id\\\"}'\",\n    \"name\": \"unique constraint violation\",\n    \"fields\": {\n        \"custom_id\": \"my-custom-id\"\n    },\n    \"code\": 5\n}"
										}
									]
								},
								{
									"name": "Create Or Update Consumer Associated to a Specific Plugin",
									"id": "fae2b1c2-9db6-4c77-8c28-3e8b6901ad98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"my-username1\",\r\n    \"custom_id\": \"my-custom-id1\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/consumer",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"consumer"
											],
											"variable": [
												{
													"id": "7990ce22-adf9-4251-b884-9487ab2b4b26",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin associated to the Consumer to be created or updated."
												}
											]
										},
										"description": "## Create Or Update Consumer Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-consumer-associated-to-a-specific-plugin)\n\n* Inserts (or replaces) the Consumer under the requested resource with the definition specified in the body. The Consumer will be identified via the username or id attribute.\n* When the username or id attribute has the structure of a UUID, the Consumer being inserted/replaced will be identified by its id. Otherwise it will be identified by its username.\n* When creating a new Consumer without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a username in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Consumer to be created or updated.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>username</td>\n    <td>semi-optional</td>\n    <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>\n  </tr>\n  <tr>\n    <td>custom_id</td>\n    <td>semi-optional</td>\n    <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "2ffcffa7-0e82-4d27-a6e8-740ad9ba3d5c",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-consumer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8e953c43-2101-4cf9-9c0b-c12c9ad9994f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d60ca614-df67-4852-be45-c6b2e98af2ac"
									}
								}
							]
						},
						{
							"name": "Delete Consumer",
							"item": [
								{
									"name": "Delete Consumer",
									"id": "778eaf1e-d476-4c4b-9ae1-8f8423960843",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrId"
											],
											"variable": [
												{
													"id": "34ff903c-240b-497a-90f1-af599e52a9aa",
													"key": "consumerUsernameOrId",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to delete."
												}
											]
										},
										"description": "## Delete Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-consumer-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "272ae531-1988-4a78-b952-4221b7005cff",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-consumer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5849555f-bf93-4df7-a181-dc4fe532efe9"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "1a082b5e-f70b-4e33-8d44-ba732b77978e"
									}
								}
							]
						}
					],
					"id": "7c1f4885-7111-4fcd-8415-4cd9dafdb7a4",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#consumer-object\n\n* The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.\n\n* Consumers can be both tagged and filtered by tags.\n\n{\n    \"id\": \"ec1a1f6f-2aa4-4e58-93ff-b56368f19b27\",\n    \"created_at\": 1422386534,\n    \"username\": \"my-username\",\n    \"custom_id\": \"my-custom-id\",\n    \"tags\": [\"user-level\", \"low-priority\"]\n}\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8e67e76f-d3f8-4e53-95af-59ea357f632a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f76d6ebd-527f-4cc0-a29c-0e522f4d40d4"
							}
						}
					]
				},
				{
					"name": "Route Object",
					"item": [
						{
							"name": "Add Route",
							"item": [
								{
									"name": "Create Route",
									"id": "efdc11c8-fdd9-40c0-b998-da95dd5970e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
										},
										"url": "{{kong.admin}}/routes",
										"description": "## Create Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-route)\n\n* See also [konghq](https://docs.konghq.com/2.0.x/admin-api/#route-object)\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Route name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"]</td>\n  </tr>\n   <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n       <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n       <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n       <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n       <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "035b6614-96f4-451b-a755-607292dc853a",
											"name": "Create Route - 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"my-route\",\n\t\"protocols\": [\n\t\t\"http\",\n\t\t\"https\"\n\t],\n\t\"methods\": [\n\t\t\"GET\",\n\t\t\"POST\"\n\t],\n\t\"hosts\": [\n\t\t\"example.com\",\n\t\t\"foo.test\"\n\t],\n\t\"paths\": [\n\t\t\"/foo\",\n\t\t\"/bar\"\n\t],\n\t\"headers\": {\n\t\t\"x-another-header\": [\n\t\t\t\"bla\"\n\t\t],\n\t\t\"x-my-header\": [\n\t\t\t\"foo\",\n\t\t\t\"bar\"\n\t\t]\n\t},\n\t\"https_redirect_status_code\": 426,\n\t\"regex_priority\": 0,\n\t\"strip_path\": true,\n\t\"path_handling\": \"v0\",\n\t\"preserve_host\": false,\n\t\"tags\": [\n\t\t\"user-level\",\n\t\t\"low-priority\"\n\t],\n\t\"service\": {\n\t\t\"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n\t}\n}"
												},
												"url": "{{kong.admin}}/routes"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:51:19 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "25"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "9d69a960-3b76-453a-b079-7464d1d90f69",
											"name": "Create Route - 400",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\": \"d35165e2-d03e-461a-bdeb-dad0a112abfe\",\n\t\"created_at\": 1422386534,\n\t\"updated_at\": 1422386534,\n\t\"name\": \"my-route\",\n\t\"protocols\": [\n\t\t\"http\",\n\t\t\"https\"\n\t],\n\t\"methods\": [\n\t\t\"GET\",\n\t\t\"POST\"\n\t],\n\t\"hosts\": [\n\t\t\"example.com\",\n\t\t\"foo.test\"\n\t],\n\t\"paths\": [\n\t\t\"/foo\",\n\t\t\"/bar\"\n\t],\n\t\"headers\": {\n\t\t\"x-another-header\": [\n\t\t\t\"bla\"\n\t\t],\n\t\t\"x-my-header\": [\n\t\t\t\"foo\",\n\t\t\t\"bar\"\n\t\t]\n\t},\n\t\"https_redirect_status_code\": 426,\n\t\"regex_priority\": 0,\n\t\"strip_path\": true,\n\t\"path_handling\": \"v0\",\n\t\"preserve_host\": false,\n\t\"tags\": [\n\t\t\"user-level\",\n\t\t\"low-priority\"\n\t],\n\t\"service\": {\n\t\t\"id\": \"af8330d3-dbdc-48bd-b1be-55b98608834b\"\n\t}\n}"
												},
												"url": "{{kong.admin}}/routes"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:49:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "234"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "7"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"the foreign key '{id=\\\"af8330d3-dbdc-48bd-b1be-55b98608834b\\\"}' does not reference an existing 'services' entity.\",\n    \"name\": \"foreign key violation\",\n    \"fields\": {\n        \"service\": {\n            \"id\": \"af8330d3-dbdc-48bd-b1be-55b98608834b\"\n        }\n    },\n    \"code\": 4\n}"
										}
									]
								},
								{
									"name": "Create Route Associated to a Specific Service",
									"id": "a091e5e8-03d8-43ee-8ddc-3d16b3a4aa28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"url\": \"https://httpbin.org/\"\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/routes",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"routes"
											],
											"variable": [
												{
													"id": "e16c754d-c25e-4a53-a9a9-805511b290dd",
													"key": "serviceNameOrId",
													"value": ""
												}
											]
										},
										"description": "## Create Route Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-route-associated-to-a-specific-service)\n\n* See also [konghq](https://docs.konghq.com/2.0.x/admin-api/#route-object)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Service that should be associated to the newly-created Route.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Route name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"]</td>\n  </tr>\n   <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n       <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n       <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n       <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n       <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "706afefa-13ef-4323-9c99-2774321ee080",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "1157f320-c499-488e-be5f-b41be50e6c5a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "00f38842-8b46-44ab-8c1a-6fa4b02a5a09"
									}
								}
							]
						},
						{
							"name": "List Routes",
							"item": [
								{
									"name": "List All Routes",
									"id": "d9345b52-ef29-40ce-9922-dac12f6f11ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/routes",
										"description": "## List All Routes [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-routes)"
									},
									"response": [
										{
											"id": "34e81ce5-05ba-4628-86f9-92ced5328b0f",
											"name": "List All Routes",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/routes"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:21:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a9daa3ba-8186-4a0d-96e8-00d80ce7240b\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"http\",\n\t\t\t\t\"https\"\n\t\t\t],\n\t\t\t\"methods\": [\n\t\t\t\t\"GET\",\n\t\t\t\t\"POST\"\n\t\t\t],\n\t\t\t\"hosts\": [\n\t\t\t\t\"example.com\",\n\t\t\t\t\"foo.test\"\n\t\t\t],\n\t\t\t\"paths\": [\n\t\t\t\t\"/foo\",\n\t\t\t\t\"/bar\"\n\t\t\t],\n\t\t\t\"headers\": {\n\t\t\t\t\"x-another-header\": [\n\t\t\t\t\t\"bla\"\n\t\t\t\t],\n\t\t\t\t\"x-my-header\": [\n\t\t\t\t\t\"foo\",\n\t\t\t\t\t\"bar\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"127dfc88-ed57-45bf-b77a-a9d3a152ad31\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"9aa116fd-ef4a-4efa-89bf-a0b17c4be982\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"tcp\",\n\t\t\t\t\"tls\"\n\t\t\t],\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"snis\": [\n\t\t\t\t\"foo.test\",\n\t\t\t\t\"example.com\"\n\t\t\t],\n\t\t\t\"sources\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"destinations\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"ba641b07-e74a-430a-ab46-94b61e5ea66b\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/routes?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								},
								{
									"name": "List Routes Associated to a Specific Service",
									"id": "0e56555d-ca55-4531-a0e1-af6d552edfd5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/routes",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"routes"
											],
											"variable": [
												{
													"id": "9045d308-4c9e-49a6-8794-6e60ba3410a3",
													"key": "serviceNameOrId",
													"value": "httpbin-api",
													"description": "The unique identifier or the name attribute of the Service whose Routes are to be retrieved. When using this endpoint, only Routes associated to the specified Service will be listed."
												}
											]
										},
										"description": "## List Routes Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-routes-associated-to-a-specific-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Service whose Routes are to be retrieved. When using this endpoint, only Routes associated to the specified Service will be listed.</td>\n  </tr>"
									},
									"response": [
										{
											"id": "bfdd1be8-e260-41dd-9153-994045db9ebb",
											"name": "List Routes Associated to a Specific Service",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId/routes",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId",
														"routes"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api",
															"description": "The unique identifier or the name attribute of the Service whose Routes are to be retrieved. When using this endpoint, only Routes associated to the specified Service will be listed."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:53:37 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "569"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "3"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"next\": null,\n    \"data\": [\n        {\n            \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n            \"path_handling\": \"v0\",\n            \"paths\": [\n                \"/foo\",\n                \"/bar\"\n            ],\n            \"destinations\": null,\n            \"headers\": {\n                \"x-another-header\": [\n                    \"bla\"\n                ],\n                \"x-my-header\": [\n                    \"foo\",\n                    \"bar\"\n                ]\n            },\n            \"protocols\": [\n                \"http\",\n                \"https\"\n            ],\n            \"methods\": [\n                \"GET\",\n                \"POST\"\n            ],\n            \"snis\": null,\n            \"service\": {\n                \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n            },\n            \"name\": \"my-route\",\n            \"strip_path\": true,\n            \"preserve_host\": false,\n            \"regex_priority\": 0,\n            \"updated_at\": 1583977879,\n            \"sources\": null,\n            \"hosts\": [\n                \"example.com\",\n                \"foo.test\"\n            ],\n            \"https_redirect_status_code\": 426,\n            \"tags\": [\n                \"user-level\",\n                \"low-priority\"\n            ],\n            \"created_at\": 1583977879\n        }\n    ]\n}"
										}
									]
								}
							],
							"id": "2d88f65a-2141-4a1e-891d-c6148f5c6e4b",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-routes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fbb46721-6db4-4858-8706-2b0d5d06b8c0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "51241b77-f053-487a-a1fa-ffa509ae0847"
									}
								}
							]
						},
						{
							"name": "Retrieve Route",
							"item": [
								{
									"name": "Retrieve Route",
									"id": "01bd3cef-8513-4305-a3bc-a6b8836b308c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrID",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrID"
											],
											"variable": [
												{
													"id": "57940474-98f4-4a30-8768-17df7ff6e24e",
													"key": "routeNameOrID",
													"value": "my-route",
													"description": "The unique identifier or the name of the Route to retrieve."
												}
											]
										},
										"description": "## Retrieve Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "d873c877-9467-4f88-b897-a87f6dab6352",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:55:07 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "24ff2383-4d21-4bfb-8e97-b88939fb77cc",
											"name": "Retrieve Route - 404",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:48:17 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										},
										{
											"id": "89c29efd-a817-4ef9-bd1d-ec18f867c070",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:46:14 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"id\": \"d35165e2-d03e-461a-bdeb-dad0a112abfe\",\n \"created_at\": 1422386534,\n \"updated_at\": 1422386534,\n \"name\": \"my-route\",\n \"protocols\": [\n  \"http\",\n  \"https\"\n ],\n \"methods\": [\n  \"GET\",\n  \"POST\"\n ],\n \"hosts\": [\n  \"example.com\",\n  \"foo.test\"\n ],\n \"paths\": [\n  \"/foo\",\n  \"/bar\"\n ],\n \"headers\": {\n  \"x-another-header\": [\n   \"bla\"\n  ],\n  \"x-my-header\": [\n   \"foo\",\n   \"bar\"\n  ]\n },\n \"https_redirect_status_code\": 426,\n \"regex_priority\": 0,\n \"strip_path\": true,\n \"path_handling\": \"v0\",\n \"preserve_host\": false,\n \"tags\": [\n  \"user-level\",\n  \"low-priority\"\n ],\n \"service\": {\n  \"id\": \"af8330d3-dbdc-48bd-b1be-55b98608834b\"\n },\n \"destinations\": \"Excepteur magna\",\n \"snis\": \"eu fugiat\",\n \"sources\": \"irure\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Route Associated to a Specific Service",
									"id": "5c065563-979d-4fb0-898d-223f6e5c5781",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "41e286bf-a17d-4410-a57a-0078334829c2",
													"key": "serviceNameOrId",
													"value": "httpbin-api",
													"description": "The unique identifier or the name of the Service to retrieve."
												},
												{
													"id": "2b741833-2634-4c52-8290-db26254c0cd3",
													"key": "routeNameOrId",
													"value": "my-route",
													"description": "The unique identifier or the name of the Route to retrieve."
												}
											]
										},
										"description": "## Retrieve Route Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-associated-to-a-specific-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to retrieve</td>\n  </tr>\n  <tr>\n    <td>Route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "a3878ddb-81a3-4eca-8277-533937a85486",
											"name": "Retrieve Route - 404",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:48:17 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										},
										{
											"id": "8b029150-710b-47fa-a802-da23b2695208",
											"name": "Retrieve Route Associated to a Specific Service",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId/routes/:routeNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId",
														"routes",
														":routeNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api",
															"description": "The unique identifier or the name of the Service to retrieve."
														},
														{
															"key": "routeNameOrId",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 02:22:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "4"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "94b688fc-55d5-4070-afd2-da3f7757d3c3",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:55:07 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "bc311db4-bdf1-43db-9ff5-62e2cf39c215",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:46:14 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"id\": \"d35165e2-d03e-461a-bdeb-dad0a112abfe\",\n \"created_at\": 1422386534,\n \"updated_at\": 1422386534,\n \"name\": \"my-route\",\n \"protocols\": [\n  \"http\",\n  \"https\"\n ],\n \"methods\": [\n  \"GET\",\n  \"POST\"\n ],\n \"hosts\": [\n  \"example.com\",\n  \"foo.test\"\n ],\n \"paths\": [\n  \"/foo\",\n  \"/bar\"\n ],\n \"headers\": {\n  \"x-another-header\": [\n   \"bla\"\n  ],\n  \"x-my-header\": [\n   \"foo\",\n   \"bar\"\n  ]\n },\n \"https_redirect_status_code\": 426,\n \"regex_priority\": 0,\n \"strip_path\": true,\n \"path_handling\": \"v0\",\n \"preserve_host\": false,\n \"tags\": [\n  \"user-level\",\n  \"low-priority\"\n ],\n \"service\": {\n  \"id\": \"af8330d3-dbdc-48bd-b1be-55b98608834b\"\n },\n \"destinations\": \"anim id esse\",\n \"snis\": \"in magna\",\n \"sources\": \"aliquip anim\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Route Associated to a Specific Plugin",
									"id": "5c12fe40-dfe8-4db0-9cc0-8a22a6ae9550",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/route",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"route"
											],
											"variable": [
												{
													"id": "f3849b2c-9d9d-4684-b983-9f1f03f0c574",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin associated to the Route to be retrieved."
												}
											]
										},
										"description": "## Retrieve Route Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Route to be retrieved.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "b64180b4-64ea-4064-8766-0c0469f6c324",
											"name": "Retrieve Route Associated to a Specific Service",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId/routes/:routeNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId",
														"routes",
														":routeNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api",
															"description": "The unique identifier or the name of the Service to retrieve."
														},
														{
															"key": "routeNameOrId",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 02:22:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "4"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "75f2493a-614f-4c66-82c8-27f4a14d0a60",
											"name": "Retrieve Route - 404",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:48:17 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Not found\"\n}"
										},
										{
											"id": "c0538e8c-2cd8-4676-9c81-8ca05faae099",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:55:07 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "546"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\",\n    \"path_handling\": \"v0\",\n    \"paths\": [\n        \"/foo\",\n        \"/bar\"\n    ],\n    \"destinations\": null,\n    \"headers\": {\n        \"x-another-header\": [\n            \"bla\"\n        ],\n        \"x-my-header\": [\n            \"foo\",\n            \"bar\"\n        ]\n    },\n    \"protocols\": [\n        \"http\",\n        \"https\"\n    ],\n    \"methods\": [\n        \"GET\",\n        \"POST\"\n    ],\n    \"snis\": null,\n    \"service\": {\n        \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\"\n    },\n    \"name\": \"my-route\",\n    \"strip_path\": true,\n    \"preserve_host\": false,\n    \"regex_priority\": 0,\n    \"updated_at\": 1583977879,\n    \"sources\": null,\n    \"hosts\": [\n        \"example.com\",\n        \"foo.test\"\n    ],\n    \"https_redirect_status_code\": 426,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"created_at\": 1583977879\n}"
										},
										{
											"id": "78c231eb-ac64-464d-b1aa-e79649f1b6ef",
											"name": "Retrieve Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrID",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrID"
													],
													"variable": [
														{
															"key": "routeNameOrID",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 01:46:14 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"id\": \"d35165e2-d03e-461a-bdeb-dad0a112abfe\",\n \"created_at\": 1422386534,\n \"updated_at\": 1422386534,\n \"name\": \"my-route\",\n \"protocols\": [\n  \"http\",\n  \"https\"\n ],\n \"methods\": [\n  \"GET\",\n  \"POST\"\n ],\n \"hosts\": [\n  \"example.com\",\n  \"foo.test\"\n ],\n \"paths\": [\n  \"/foo\",\n  \"/bar\"\n ],\n \"headers\": {\n  \"x-another-header\": [\n   \"bla\"\n  ],\n  \"x-my-header\": [\n   \"foo\",\n   \"bar\"\n  ]\n },\n \"https_redirect_status_code\": 426,\n \"regex_priority\": 0,\n \"strip_path\": true,\n \"path_handling\": \"v0\",\n \"preserve_host\": false,\n \"tags\": [\n  \"user-level\",\n  \"low-priority\"\n ],\n \"service\": {\n  \"id\": \"af8330d3-dbdc-48bd-b1be-55b98608834b\"\n },\n \"destinations\": \"anim id esse\",\n \"snis\": \"in magna\",\n \"sources\": \"aliquip anim\"\n}"
										}
									]
								}
							],
							"id": "9270ae66-e9fd-48e8-ab8f-fd9cc41aa6d3",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fb126a3d-ac4d-47fc-8f5b-9e1b9e1f3c44"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ccaa06c4-247e-41ae-b3a1-3c3c8e4148f0"
									}
								}
							]
						},
						{
							"name": "Update Route",
							"item": [
								{
									"name": "Update Route",
									"id": "de85dbf4-9043-414b-bf99-d54091eb363a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "f87964f2-62a4-41e5-8815-460fbdf995da",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to update."
												}
											]
										},
										"description": "## Update Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-route-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"].</td>\n  </tr>\n  <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route.</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n         <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n        <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n        <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n        <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n         <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n        <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "eb4ede8c-1e8a-477e-9a35-3e29c1caf624",
											"name": "Update Service",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sun, 08 Mar 2020 01:25:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "294"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"host\": \"httpbin.org\",\r\n    \"created_at\": 1583630747,\r\n    \"connect_timeout\": 60000,\r\n    \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\",\r\n    \"protocol\": \"https\",\r\n    \"name\": \"httpbin-api\",\r\n    \"read_timeout\": 60000,\r\n    \"port\": 443,\r\n    \"path\": \"/\",\r\n    \"updated_at\": 1583630747,\r\n    \"retries\": 5,\r\n    \"write_timeout\": 60000,\r\n    \"tags\": null,\r\n    \"client_certificate\": null\r\n}"
										},
										{
											"id": "6df6ea50-00de-4a1b-b321-3c431eac5cb5",
											"name": "Update Service_Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"host\": \"httpbin.org\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null,\n\t\"url\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/services/:serviceNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"services",
														":serviceNameOrId"
													],
													"variable": [
														{
															"key": "serviceNameOrId",
															"value": "httpbin-api"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Sun, 08 Mar 2020 01:20:52 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "330"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"3 schema violations (host: required field missing; path: should start with: /; protocol: expected one of: grpc, grpcs, http, https, tcp, tls)\",\n    \"name\": \"schema violation\",\n    \"fields\": {\n        \"host\": \"required field missing\",\n        \"path\": \"should start with: /\",\n        \"protocol\": \"expected one of: grpc, grpcs, http, https, tcp, tls\"\n    },\n    \"code\": 2\n}"
										}
									]
								},
								{
									"name": "Update Service Associated to a Specific Certificate",
									"id": "6728883d-ea9d-4eb7-b0d2-7fd58f1cd9f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/services/:serviceNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"services",
												":serviceNameOrId"
											],
											"variable": [
												{
													"id": "c6737d29-0555-45e5-9bb4-69be5eda2a45",
													"key": "certificateId"
												},
												{
													"id": "5b787fc4-56c4-4498-ac89-eec266129f00",
													"key": "serviceNameOrId"
												}
											]
										},
										"description": "## Update Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-certificate)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update</td>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Update Service Associated to a Specific Route",
									"id": "a73fa9d8-ae83-4ddb-970f-9904bb4cad0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"service"
											],
											"variable": [
												{
													"id": "837447b5-99ac-4fd3-a411-07a47b19c0c8",
													"key": "routeNameOrId"
												}
											]
										},
										"description": "## Update Service Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-route)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Update Service Associated to a Specific Plugin",
									"id": "3ca3832c-d12d-4442-8099-75b96fd04043",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/service",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"service"
											],
											"variable": [
												{
													"id": "14d41793-4d6b-46de-bea1-ebb84fd6cb22",
													"key": "pluginId"
												}
											]
										},
										"description": "## Update Service Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-plugin)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Service to be updated</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Service name</td>\n  </tr>\n  <tr>\n    <td>retries</td>\n    <td>optional</td>\n    <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>\n  </tr>\n  <tr>\n    <td>protocol</td>\n    <td>required</td>\n    <td>The protocol used to communicate with the upstream. Accepted values are: \"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\". Defaults to \"http\"</td>\n  </tr>\n   <tr>\n    <td>host</td>\n    <td>required</td>\n    <td>The host of the upstream server</td>\n  </tr>\n   <tr>\n    <td>port</td>\n    <td>required</td>\n    <td>The upstream server port. Defaults to 80</td>\n  </tr>\n   <tr>\n    <td>path</td>\n    <td>optional</td>\n    <td>The path to be used in requests to the upstream server.</td>\n  </tr>\n     <tr>\n    <td>connect_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>write_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>read_timeout</td>\n    <td>optional</td>\n    <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>\n  </tr>\n     <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Service, for grouping and filtering.</td>\n  </tr>\n       <tr>\n    <td>client_certificate</td>\n    <td>optional</td>\n    <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “\"client_certificate\":{\"id\":\"<client_certificate id>\"}.</td>\n  </tr>\n       <tr>\n    <td>url</td>\n    <td>required</td>\n    <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "385107ff-633a-49a4-a79b-bbf702ab24d0",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c5693bd7-fe00-4ccb-98af-28a290b191ea"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c63c52d1-702d-4e6e-8dc1-274248cd85fd"
									}
								}
							]
						},
						{
							"name": "Update Or Create Route",
							"item": [
								{
									"name": "Create Or Update Route",
									"id": "5b4311d9-9743-408b-bfe0-1c20c082cd8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "41172c06-a9f8-467d-9dd9-d5b0a1c4ff81",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to update."
												}
											]
										},
										"description": "## Create Or Update Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route)\n\n* Inserts (or replaces) the Route under the requested resource with the definition specified in the body. The Route will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Route being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Route without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n*Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to create or update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Route name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"].</td>\n  </tr>\n  <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route.</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n         <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n        <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n        <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n        <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n         <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n        <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n</table>\n\n## Response\n* HTTP 201 Created or HTTP 200 OK\n* See POST and PATCH responses."
									},
									"response": []
								},
								{
									"name": "Create Or Update Route Associated to a Specific Service",
									"id": "8b3b7aea-1ffd-46d1-8f96-9d745ae3130e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "c5e6c934-e721-4fcd-bf8b-9aad395adcf0",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to create or update."
												},
												{
													"id": "bab08c9b-94fc-47d8-a967-fbf91ca211c6",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to create or update."
												}
											]
										},
										"description": "## Create Or Update Route Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route-associated-to-a-specific-service)\n\n* Inserts (or replaces) the Route under the requested resource with the definition specified in the body. The Route will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Route being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Route without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n*Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to create or update.</td>\n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to create or update.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Route name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"].</td>\n  </tr>\n  <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route.</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n         <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n        <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n        <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n        <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n         <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n        <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n</table>\n\n## Response\n* HTTP 201 Created or HTTP 200 OK\n* See POST and PATCH responses."
									},
									"response": []
								},
								{
									"name": "Create Or Update Route Associated to a Specific Plugin",
									"id": "4d59e028-012f-4c2f-9448-a48a26b2259f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"host\": \"httpbin.org\",\n\t\"name\": \"httpbin-api\",\n\t\"retries\": 5,\n\t\"protocol\": \"https\",\n\t\"port\": 443,\n\t\"path\": \"/\",\n\t\"connect_timeout\": 60000,\n\t\"write_timeout\": 60000,\n\t\"read_timeout\": 60000,\n\t\"tags\": null,\n\t\"client_certificate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId/route",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId",
												"route"
											],
											"variable": [
												{
													"id": "c39b569f-dec8-40b5-97fb-be4f88552f3f",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin associated to the Route to be created or updated."
												}
											]
										},
										"description": "## Create Or Update Route Associated to a Specific Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route-associated-to-a-specific-plugin)\n\n* Inserts (or replaces) the Route under the requested resource with the definition specified in the body. The Route will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Route being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Route without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n*Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin associated to the Route to be created or updated.</td>\n  </tr>\n</table>\n\n## Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>optional</td>\n    <td>The Route name</td>\n  </tr>\n  <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the protocols this Route should allow. When set to [\"https\"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to [\"http\", \"https\"].</td>\n  </tr>\n  <tr>\n    <td>methods</td>\n    <td>semi-optional</td>\n    <td>A list of HTTP methods that match this Route.</td>\n  </tr>\n   <tr>\n    <td>hosts</td>\n    <td>semi-optional</td>\n    <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>\n  </tr>\n   <tr>\n    <td>paths</td>\n    <td>semi-optional</td>\n    <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>\n  </tr>\n     <tr>\n    <td>headers</td>\n    <td>semi-optional</td>\n    <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>\n  </tr>\n     <tr>\n    <td>https_redirect_status_code</td>\n    <td>required</td>\n    <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>\n  </tr>\n     <tr>\n    <td>regex_priority</td>\n    <td>optional</td>\n    <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>\n  </tr>\n     <tr>\n    <td>strip_path</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>\n  </tr>\n       <tr>\n    <td>path_handling</td>\n    <td>optional</td>\n    <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: \"v0\", \"v1\". Defaults to \"v0\".</td>\n  </tr>\n       <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n         <tr>\n    <td>preserve_host</td>\n    <td>optional</td>\n    <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>\n  </tr>\n        <tr>\n    <td>snis</td>\n    <td>semi-optional</td>\n    <td>A list of SNIs that match this Route when using stream routing.</td>\n  </tr>\n        <tr>\n    <td>sources</td>\n    <td>semi-optional</td>\n    <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n        <tr>\n    <td>destinations</td>\n    <td>semi-optional</td>\n    <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>\n  </tr>\n         <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Route, for grouping and filtering.</td>\n  </tr>\n        <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n</table>\n\n## Response\n* HTTP 201 Created or HTTP 200 OK\n* See POST and PATCH responses."
									},
									"response": []
								}
							],
							"id": "87e9d92d-20ec-4876-93ff-31c555e84f9e",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bf0a2087-8061-4950-934c-5a77d305f868"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "44d0a3cd-fc34-40a0-94cd-32e678096bef"
									}
								}
							]
						},
						{
							"name": "Delete Route",
							"item": [
								{
									"name": "Delete Route",
									"id": "53729b93-63ed-4eac-bf1b-77f785d2d367",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "94b9a150-c3ef-45a3-90ff-809d9cbefcd4",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to delete."
												}
											]
										},
										"description": "## Delete Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-route-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>Route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to delete.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "209f161d-31e8-44b6-9497-a0d5b4931417",
											"name": "Delete Route - 204",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrId"
													],
													"variable": [
														{
															"key": "routeNameOrId",
															"value": "my-route",
															"description": "The unique identifier or the name of the Route to delete."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Fri, 13 Mar 2020 01:56:42 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "18"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Delete Route Associated to a Specific Service",
									"id": "e2a14ae4-269d-419c-99c7-74c819d462bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/routes/:routeNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"routes",
												":routeNameOrId"
											],
											"variable": [
												{
													"id": "d3f1135b-7020-4736-a32e-ab5820fd9916",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to delete."
												},
												{
													"id": "298ae69b-3b30-4be5-a35f-63471217458a",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to delete."
												}
											]
										},
										"description": "## Delete Service Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to delete.</td>\n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "719ad571-71c9-41a8-9fc3-574f3824d764",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-route",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ff74c8cf-e445-4f5d-8962-f9eba826ac45"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "cf359971-cd23-49d3-806c-62669c925b7b"
									}
								}
							]
						}
					],
					"id": "4981b219-91d8-47ed-93bb-ebe31e7bd913",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#route-object\n\nRoute entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service.\n\nThe combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure.\n\nYou need at least one matching rule that applies to the protocol being matched by the Route. Depending on the protocols configured to be matched by the Route (as defined with the protocols field), this means that at least one of the following attributes must be set:\n\n* For http, at least one of methods, hosts, headers or paths;\n* For https, at least one of methods, hosts, headers, paths or snis;\n* For tcp, at least one of sources or destinations;\n* For tls, at least one of sources, destinations or snis;\n* For grpc, at least one of hosts, headers or paths;\n* For grpcs, at least one of hosts, headers, paths or snis.\n \n## Path handling algorithms  https://docs.konghq.com/2.0.x/admin-api/#path-handling-algorithms\n\"v0\" is the behavior used in Kong 0.x and 2.x. It treats service.path, route.path and request path as segments of a url. It will always join them via slashes. Given a service path /s, route path /r and request path /re, the concatenated path will be /s/re. If the resulting path is a single slash, no further transformation is done to it. If it’s longer, then the trailing slash is removed.\n\n\"v1\" is the behavior used in Kong 1.x. It treats service.path as a prefix, and ignores the initial slashes of the request and route paths. Given service path /s, route path /r and request path /re, the concatenated path will be /sre.\n\nBoth versions of the algorithm detect “double slashes” when combining paths, replacing them by single slashes.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7b6eca72-8bbe-4fe0-8860-70dccc88d2bf"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c9f42a5d-313f-4b80-9683-ec9a9f1562ef"
							}
						}
					]
				},
				{
					"name": "Plugin Object",
					"item": [
						{
							"name": "Add Plugin",
							"item": [
								{
									"name": "Create Plugin",
									"id": "67fd707e-337d-468e-a2f6-7a52dded8ff9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"rate-limiting\",\r\n    \"route\": null,\r\n    \"service\": null,\r\n    \"consumer\": null,\r\n    \"config\": {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"grpc\", \"grpcs\"],\r\n    \"enabled\": true,\r\n    \"tags\": [\"admin\", \"high-priority\", \"critical\"]\r\n}"
										},
										"url": "{{kong.admin}}/plugins",
										"description": "# Create Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin)\n\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Plugin Associated to a Specific Route",
									"id": "99fef844-be7c-4657-b47d-7a3b47280828",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"rate-limiting\",\r\n    \"service\": null,\r\n    \"consumer\": null,\r\n    \"config\": {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"https\", \"http\"],\r\n    \"enabled\": true,\r\n    \"tags\": [\"admin\", \"high-priority\", \"critical\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeId",
												"plugins"
											],
											"variable": [
												{
													"id": "c04a6209-737d-4b0e-8a72-5400b4b33a93",
													"key": "routeId",
													"value": "my-route",
													"description": "The unique identifier of the Route that should be associated to the newly-created Plugin."
												}
											]
										},
										"description": "# Create Plugin Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-route)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Route that should be associated to the newly-created Plugin.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "cb4e3c9e-08ab-4ddf-ad60-b6e16a8ceedb",
											"name": "Create Plugin Associated to a Specific Route",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"rate-limiting\",\r\n    \"service\": null,\r\n    \"consumer\": null,\r\n    \"config\": {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"https\", \"http\"],\r\n    \"enabled\": true,\r\n    \"tags\": [\"admin\", \"high-priority\", \"critical\"]\r\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/routes/:routeId/plugins",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeId",
														"plugins"
													],
													"variable": [
														{
															"key": "routeId",
															"value": "my-route",
															"description": "The unique identifier of the Route that should be associated to the newly-created Plugin."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 07:40:23 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "15"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"created_at\": 1583998823,\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Create Plugin Associated to a Specific Service",
									"id": "b79c0f75-7904-48cc-9f2b-06b12aec9452",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"rate-limiting\",\r\n    \"service\": null,\r\n    \"consumer\": null,\r\n    \"config\": {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"https\", \"http\"],\r\n    \"enabled\": true,\r\n    \"tags\": [\"admin\", \"high-priority\", \"critical\"]\r\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceId",
												"plugins"
											],
											"variable": [
												{
													"id": "a86a7bdf-93bd-4700-9355-181d9f56bac9",
													"key": "serviceId",
													"value": "",
													"description": "The unique identifier of the Service that should be associated to the newly-created Plugin."
												}
											]
										},
										"description": "# Create Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Service that should be associated to the newly-created Plugin.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Plugin Associated to a Specific Service",
									"id": "3252744f-6f45-4d90-818c-5881b6291f4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{kong.admin}}/services/:consumerId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":consumerId",
												"plugins"
											],
											"variable": [
												{
													"id": "31e289fc-d3ef-403f-b4c8-3f584c680e12",
													"key": "consumerId"
												}
											]
										},
										"description": "# Create Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Service that should be associated to the newly-created Plugin.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "4a116534-c19b-4c76-b75e-6e5354c7fcaf",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-plugin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "eadaf76c-ded0-40c1-9dcb-b963e4330be8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "927a3d72-1ea5-469c-afab-edb40cc7a285"
									}
								}
							]
						},
						{
							"name": "List Plugins",
							"item": [
								{
									"name": "List All Plugins",
									"id": "3dd599cd-d827-4319-8d67-0aa1f6b66c30",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/plugins",
										"description": "# List All Plugins [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-plugins)"
									},
									"response": [
										{
											"id": "f01896a9-d629-4c90-8f5c-dcd0085bf058",
											"name": "List All Plugins",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/plugins"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 10:13:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "1052"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"next\": null,\n \"data\": [\n  {\n   \"created_at\": 1583998823,\n   \"config\": {\n    \"minute\": 20,\n    \"policy\": \"cluster\",\n    \"month\": null,\n    \"redis_timeout\": 2000,\n    \"limit_by\": \"consumer\",\n    \"hide_client_headers\": false,\n    \"second\": null,\n    \"day\": null,\n    \"redis_password\": null,\n    \"year\": null,\n    \"redis_database\": 0,\n    \"hour\": 500,\n    \"redis_port\": 6379,\n    \"redis_host\": null,\n    \"fault_tolerant\": true\n   },\n   \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n   \"service\": null,\n   \"enabled\": true,\n   \"protocols\": [\n    \"https\",\n    \"http\"\n   ],\n   \"name\": \"rate-limiting\",\n   \"consumer\": null,\n   \"route\": {\n    \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   },\n   \"tags\": [\n    \"admin\",\n    \"high-priority\",\n    \"critical\"\n   ]\n  },\n  {\n   \"created_at\": 1422386534,\n   \"config\": {\n    \"minute\": 20,\n    \"policy\": \"cluster\",\n    \"month\": null,\n    \"redis_timeout\": 2000,\n    \"limit_by\": \"consumer\",\n    \"hide_client_headers\": false,\n    \"second\": null,\n    \"day\": null,\n    \"redis_password\": null,\n    \"year\": null,\n    \"redis_database\": 0,\n    \"hour\": 500,\n    \"redis_port\": 6379,\n    \"redis_host\": null,\n    \"fault_tolerant\": true\n   },\n   \"id\": \"e080cdd2-cdf4-4634-9d5d-1668c6929697\",\n   \"service\": null,\n   \"enabled\": true,\n   \"protocols\": [\n    \"http\",\n    \"https\"\n   ],\n   \"name\": \"rate-limiting\",\n   \"consumer\": null,\n   \"route\": {},\n   \"tags\": [\n    \"user-level\",\n    \"low-priority\"\n   ]\n  }\n ]\n}"
										}
									]
								},
								{
									"name": "List Plugins Associated to a Specific Route",
									"id": "48feb74f-fc3a-491e-9ed9-eb7c367bfebf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeId",
												"plugins"
											],
											"variable": [
												{
													"id": "1b5acd1b-bb3a-4f89-9779-175cfc2e06d3",
													"key": "routeId",
													"value": "",
													"description": "The unique identifier of the Route whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Route will be listed."
												}
											]
										},
										"description": "# List Plugins Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-route)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Route whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Route will be listed.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "5d914562-df91-49af-8fb6-f269b86996fc",
											"name": "List Plugins Associated to a Specific Route",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/routes/:routeId/plugins",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeId",
														"plugins"
													],
													"variable": [
														{
															"key": "routeId",
															"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
															"description": "The unique identifier of the Route whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Route will be listed."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 10:14:36 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "561"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "3"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"next\": null,\n    \"data\": [\n        {\n            \"created_at\": 1583998823,\n            \"config\": {\n                \"minute\": 20,\n                \"policy\": \"cluster\",\n                \"month\": null,\n                \"redis_timeout\": 2000,\n                \"limit_by\": \"consumer\",\n                \"hide_client_headers\": false,\n                \"second\": null,\n                \"day\": null,\n                \"redis_password\": null,\n                \"year\": null,\n                \"redis_database\": 0,\n                \"hour\": 500,\n                \"redis_port\": 6379,\n                \"redis_host\": null,\n                \"fault_tolerant\": true\n            },\n            \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n            \"service\": null,\n            \"enabled\": true,\n            \"protocols\": [\n                \"https\",\n                \"http\"\n            ],\n            \"name\": \"rate-limiting\",\n            \"consumer\": null,\n            \"route\": {\n                \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n            },\n            \"tags\": [\n                \"admin\",\n                \"high-priority\",\n                \"critical\"\n            ]\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "List Plugins Associated to a Specific Service",
									"id": "ef519262-11be-4a93-bd10-ab548d8c9005",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceId",
												"plugins"
											],
											"variable": [
												{
													"id": "ab55b67f-267e-491b-84f3-4dd9632d9937",
													"key": "serviceId",
													"value": "",
													"description": "The unique identifier of the Service whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Service will be listed."
												}
											]
										},
										"description": "# List Plugins Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-service)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Service whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Service will be listed.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "List Plugins Associated to a Specific Consumer",
									"id": "7a79adae-0d02-4ccf-a34c-03166634e68e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerId/plugins",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerId",
												"plugins"
											],
											"variable": [
												{
													"id": "afd749c8-4985-4bd6-b025-b900cbda6212",
													"key": "consumerId",
													"value": "",
													"description": "The unique identifier of the Consumer whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Consumer will be listed."
												}
											]
										},
										"description": "# List Plugins Associated to a Specific Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-consumer)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Consumer whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Consumer will be listed.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "6636763e-38c6-4a19-8d55-4fd41ec9390a",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-plugins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e33dfc69-92ae-4e98-abee-d0bbfe1b4bd0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9b227d5a-9e44-4b42-93a9-2fa919f0cf8d"
									}
								}
							]
						},
						{
							"name": "Retrieve Plugin",
							"item": [
								{
									"name": "Retrieve Enabled Plugins",
									"id": "f7712b24-60ef-4aa6-94bb-68bdcfcd3061",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "4d28c440-d001-42bf-b5f3-d743088cfc6b",
													"key": "pluginId"
												}
											]
										},
										"description": "# Retrieve Enabled Plugins [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-enabled-plugins)\n\nRetrieve a list of all installed plugins on the Kong node"
									},
									"response": [
										{
											"id": "1207a704-3fd0-4721-ab7b-d3400792a31a",
											"name": "Retrieve Plugin",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 10:33:31 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"created_at\": 1583998823,\n \"config\": {\n  \"minute\": 20,\n  \"policy\": \"cluster\",\n  \"month\": null,\n  \"redis_timeout\": 2000,\n  \"limit_by\": \"consumer\",\n  \"hide_client_headers\": false,\n  \"second\": null,\n  \"day\": null,\n  \"redis_password\": null,\n  \"year\": null,\n  \"redis_database\": 0,\n  \"hour\": 500,\n  \"redis_port\": 6379,\n  \"redis_host\": null,\n  \"fault_tolerant\": true\n },\n \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n \"service\": null,\n \"enabled\": true,\n \"protocols\": [\n  \"https\",\n  \"http\"\n ],\n \"name\": \"rate-limiting\",\n \"consumer\": null,\n \"route\": {\n  \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n },\n \"tags\": [\n  \"admin\",\n  \"high-priority\",\n  \"critical\"\n ],\n \"enabled_plugins\": [\n  \"correlation-id\",\n  \"pre-function\",\n  \"cors\",\n  \"ldap-auth\",\n  \"loggly\",\n  \"hmac-auth\",\n  \"zipkin\",\n  \"request-size-limiting\",\n  \"azure-functions\",\n  \"request-transformer\",\n  \"oauth2\",\n  \"response-transformer\",\n  \"ip-restriction\",\n  \"statsd\",\n  \"jwt\",\n  \"proxy-cache\",\n  \"basic-auth\",\n  \"key-auth\",\n  \"http-log\",\n  \"datadog\",\n  \"tcp-log\",\n  \"post-function\",\n  \"prometheus\",\n  \"acl\",\n  \"syslog\",\n  \"file-log\",\n  \"session\",\n  \"udp-log\",\n  \"response-ratelimiting\",\n  \"aws-lambda\",\n  \"bot-detection\",\n  \"rate-limiting\",\n  \"request-termination\"\n ]\n}"
										}
									]
								},
								{
									"name": "Retrieve Plugin Associated to a Specific Route",
									"id": "50c7cd97-b0ba-4984-a5e7-57ae09c533c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "5c878619-3994-4f41-b064-ae710a92c598",
													"key": "routeNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Route to retrieve"
												},
												{
													"id": "f323ea32-3dfc-4ade-b344-fb70e6915df9",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to retrieve."
												}
											]
										},
										"description": "# Retrieve Plugin Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-route)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Route to retrieve.</td>\n  </tr>\n   <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Retrieve Plugin Associated to a Specific Service",
									"id": "8863f3db-c5f7-4939-811b-a6ac48bdac01",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "acec936a-68b5-4492-af6d-e61714b60469",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to retrieve"
												},
												{
													"id": "43d140a7-6043-4491-9886-d46ceab500c0",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to retrieve"
												}
											]
										},
										"description": "# Retrieve Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-service)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Service to retrieve.</td>\n  </tr>\n   <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Retrieve Plugin Associated to a Specific Consumer",
									"id": "d622673a-5423-4001-a696-e22afad069e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "d1488368-e118-4e4a-83b8-4e3c69d81482",
													"key": "consumerUsernameOrId",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to retriev"
												},
												{
													"id": "9689e2e3-3819-4cdb-8c82-720c45891e69",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to retrieve"
												}
											]
										},
										"description": "# Retrieve Plugin Associated to a Specific Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-consumer)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the username of the Consumer to retrieve</td>\n  </tr>\n   <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Plugin to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "7f9f8a09-33f1-48fe-b9d3-caa045ec80ac",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2dbe002f-f4c2-4055-91e7-fe6ff1fa1d32"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c2ed411d-29bf-409f-a739-d57af3cdc30d"
									}
								}
							]
						},
						{
							"name": "Update Plugin",
							"item": [
								{
									"name": "Update Plugin",
									"id": "2d18dd45-e2c7-46da-b60f-1637ee23abb1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "8693955e-d752-470a-a157-175b56352142",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Update Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "445404cf-387b-447c-ac59-78d27eb7a7f2",
											"name": "Update Plugin - 400",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "xxxxxxxxxx",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:06:03 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "145"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"invalid primary key: '{id=\\\"expected a valid UUID\\\"}'\",\n    \"name\": \"invalid primary key\",\n    \"fields\": {\n        \"id\": \"expected a valid UUID\"\n    },\n    \"code\": 1\n}"
										},
										{
											"id": "eaa5c667-3828-402c-876d-580b85dbf145",
											"name": "Update Plugin - 200",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"config\": {\n\t\t\"minute\": 20,\n\t\t\"policy\": \"cluster\",\n\t\t\"month\": null,\n\t\t\"redis_timeout\": 2000,\n\t\t\"limit_by\": \"consumer\",\n\t\t\"hide_client_headers\": false,\n\t\t\"second\": null,\n\t\t\"day\": null,\n\t\t\"redis_password\": null,\n\t\t\"year\": null,\n\t\t\"redis_database\": 0,\n\t\t\"hour\": 500,\n\t\t\"redis_port\": 6379,\n\t\t\"redis_host\": null,\n\t\t\"fault_tolerant\": true\n\t},\n\t\"service\": null,\n\t\"enabled\": true,\n\t\"protocols\": [\n\t\t\"https\",\n\t\t\"http\"\n\t],\n\t\"name\": \"rate-limiting\",\n\t\"consumer\": null,\n\t\"route\": {\n\t\t\"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n\t},\n\t\"tags\": [\n\t\t\"admin\",\n\t\t\"high-priority\",\n\t\t\"critical\"\n\t]\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:10:55 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "14"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Update Plugin Associated to a Specific Route",
									"id": "062236dd-0082-4543-9a9f-cd3bef3944c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "6c4d7868-b61f-4a25-88f6-3dd294dfff4e",
													"key": "routeNameOrId",
													"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
													"description": "The unique identifier or the name of the Route to update."
												},
												{
													"id": "11d46d88-9535-41ee-994a-89830fef9e35",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Update Plugin Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-route)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Route to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "7a5548f3-d9d4-44a1-bf47-8d65163f7f87",
											"name": "Update Plugin Associated to a Specific Route",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"created_at\": 1583998823,\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrId",
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "routeNameOrId",
															"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
															"description": "The unique identifier or the name of the Route to update."
														},
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:23:03 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "15"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Update Plugin Associated to a Specific Service",
									"id": "df2eeeb7-46e4-482b-92ab-5e858ff0f61a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "eb78a2e4-24ae-4b68-b3ee-4bf7fd9f472a",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to update."
												},
												{
													"id": "bddbbce3-57dc-4651-b25b-656d4bc66143",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Update Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-service)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Update Plugin Associated to a Specific Consumer",
									"id": "fe70f6b8-7bff-431f-af54-e84ffbd2d74e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrd}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrd}",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "057d8507-4f62-47dd-9864-68038e9d852b",
													"key": "consumerUsernameOrd}",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to update"
												},
												{
													"id": "79c6bc72-2209-4391-82da-d39040552897",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Update Plugin Associated to a Specific Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-consumer)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>The unique identifier or the username of the Consumer to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "028abfda-07be-4312-8990-0f750c151668",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-plugin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "37076b3b-ece6-4b5f-ba51-00564c8a9bc7"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "cafbca73-6c45-4697-9dfb-3a8a368adc8b"
									}
								}
							]
						},
						{
							"name": "Update or Create Plugin",
							"item": [
								{
									"name": "Create Or Update Plugin",
									"id": "3f687f65-93b5-49a6-be93-0498e25cc827",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "9c158e7b-e47b-4b35-bc69-0ecf99a5aecb",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Create Or Update Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin)\n* Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "ca874c0b-9332-4840-9fed-be32e540b0e5",
											"name": "Create Or Update Plugin",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:37:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "11"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"created_at\": 1584013073,\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Create Or Update Plugin Associated to a Specific Route",
									"id": "a15deede-c848-45a0-94ac-891030f1095a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "8c1f9826-64ac-4bac-b2e3-4e38a47dad97",
													"key": "routeNameOrId",
													"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
													"description": "The unique identifier or the name of the Route to update."
												},
												{
													"id": "27bace84-df76-4a01-92b7-2c6098c85853",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Create Or Update Plugin Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-route)\n* Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Route to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "a506fd63-7cd6-4e5e-9a29-6973b572b3e8",
											"name": "Update Plugin Associated to a Specific Route",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"created_at\": 1583998823,\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrId",
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "routeNameOrId",
															"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
															"description": "The unique identifier or the name of the Route to update."
														},
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:23:03 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "15"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Create Or Update Plugin Associated to a Specific Service",
									"id": "20cb6cdb-ee35-46cb-9a6b-3596b3c70ba2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "74287d12-dc7a-4168-a4b1-8ce0e3acfac3",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to update."
												},
												{
													"id": "aff0cb54-cee8-48f0-bfa3-0028a2aae968",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Create Or Update Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-service)\n* Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Service to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Or Update Plugin Associated to a Specific Consumer",
									"id": "5a93941a-037a-4cff-bf31-8684c6b98ff0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrd}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrd}",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "dbc9c117-c4b2-4a40-90a3-0ea91b239aec",
													"key": "consumerUsernameOrd}",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to update"
												},
												{
													"id": "fac4c2c5-a758-4003-8227-7e0c1a33054c",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to update."
												}
											]
										},
										"description": "# Create Or Update Plugin Associated to a Specific Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-consumer)\n* Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>The unique identifier or the username of the Consumer to update.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>\n  </tr>\n  <tr>\n    <td>route</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “\"route\":{\"id\":\"<route id>\"} or \"route\":{\"name\":\"<route name>\"}.</td>\n  </tr>\n   <tr>\n    <td>service</td>\n    <td>optional</td>\n    <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “\"service\":{\"id\":\"<service id>\"} or \"service\":{\"name\":\"<service name>\"}.</td>\n  </tr>\n   <tr>\n    <td>consumer</td>\n    <td>optional</td>\n    <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “\"consumer\":{\"id\":\"<consumer id>\"} or \"consumer\":{\"username\":\"<consumer username>\"}.</td>\n  </tr>\n   <tr>\n    <td>config</td>\n    <td>optional</td>\n    <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>\n  </tr>\n   <tr>\n    <td>protocols</td>\n    <td>required</td>\n    <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support \"tcp\" and \"tls\". Defaults to [\"grpc\", \"grpcs\", \"http\", \"https\"].</td>\n  </tr>\n   <tr>\n    <td>enabled</td>\n    <td>optional</td>\n    <td>Whether the plugin is applied. Defaults to true.</td>\n  </tr>\n   <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "4e2e3531-dcc4-4bb7-bee7-6464a3134fba",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-plugin\n\n* Inserts (or replaces) the Plugin under the requested resource with the definition specified in the body. The Plugin will be identified via the name or id attribute.\n\n* When the name or id attribute has the structure of a UUID, the Plugin being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n\n* When creating a new Plugin without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "24aec589-6e31-4874-85c0-9906a4b776a8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0d807156-03fd-497c-b4cd-019f669d2f0a"
									}
								}
							]
						},
						{
							"name": "Delete Plugin",
							"item": [
								{
									"name": "Delete Plugin",
									"id": "0455b227-4cb5-425e-b730-4be289e92e82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "e43d9050-bb42-4817-af78-e48b861967e0",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to delete"
												}
											]
										},
										"description": "# Delete Plugin [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-1)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to delete.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "a52a4846-08a4-44ef-a152-5eae421d133f",
											"name": "Delete Plugin - 204",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 12:14:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "17"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Delete Plugin Associated to a Specific Route",
									"id": "281b0331-82e7-4664-951d-d0fd4d5cc30b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"routes",
												":routeNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "f9d098aa-f7aa-428e-bf88-6e8dd0e74a6b",
													"key": "routeNameOrId",
													"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
													"description": "The unique identifier or the name of the Route to delete."
												},
												{
													"id": "435873bd-73ee-4772-a9c2-b510e5859acb",
													"key": "pluginId",
													"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
													"description": "The unique identifier of the Plugin to delete."
												}
											]
										},
										"description": "# Delete Plugin Associated to a Specific Route [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-route)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>route name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Route to delete.</td>\n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to delete.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "9e9ea0da-8563-4bee-be72-34c74021d784",
											"name": "Update Plugin Associated to a Specific Route",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"created_at\": 1583998823,\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"id\": \"9175fd5b-e364-4759-bbe2-e7d00da5edd2\",\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/routes/:routeNameOrId/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"routes",
														":routeNameOrId",
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "routeNameOrId",
															"value": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
															"description": "The unique identifier or the name of the Route to update."
														},
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 11:23:03 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "15"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"config\": {\n        \"minute\": 20,\n        \"policy\": \"cluster\",\n        \"month\": null,\n        \"redis_timeout\": 2000,\n        \"limit_by\": \"consumer\",\n        \"hide_client_headers\": false,\n        \"second\": null,\n        \"day\": null,\n        \"redis_password\": null,\n        \"year\": null,\n        \"redis_database\": 0,\n        \"hour\": 500,\n        \"redis_port\": 6379,\n        \"redis_host\": null,\n        \"fault_tolerant\": true\n    },\n    \"service\": null,\n    \"enabled\": true,\n    \"protocols\": [\n        \"https\",\n        \"http\"\n    ],\n    \"name\": \"rate-limiting\",\n    \"consumer\": null,\n    \"route\": {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n    },\n    \"tags\": [\n        \"admin\",\n        \"high-priority\",\n        \"critical\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Delete Plugin Associated to a Specific Service",
									"id": "c4b764f3-d1b7-4f40-a57b-2ee8cbc36b26",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/services/:serviceNameOrId/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"services",
												":serviceNameOrId",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "4b03119d-eef5-4c73-8d3e-8b4582461738",
													"key": "serviceNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the Service to delete"
												},
												{
													"id": "c2a7caed-28cf-4e08-9ae0-4757ed02d5f0",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to delete"
												}
											]
										},
										"description": "# Delete Plugin Associated to a Specific Service [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-service)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>service name or id</td>\n    <td>required</td>\n    <td>The unique identifier or the name of the Service to delete.</td>\n  </tr>\n  <tr>\n    <td>plugin id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Delete Plugin Associated to a Specific Consumer",
									"id": "33660480-8feb-466e-b759-2f940ef0db98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/consumers/:consumerUsernameOrd}/plugins/:pluginId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"consumers",
												":consumerUsernameOrd}",
												"plugins",
												":pluginId"
											],
											"variable": [
												{
													"id": "e7d3ca61-b39b-4402-a712-9c8da5b8e666",
													"key": "consumerUsernameOrd}",
													"value": "",
													"description": "The unique identifier or the username of the Consumer to delete"
												},
												{
													"id": "c98b732a-966c-405b-b888-7afdfe8a37f8",
													"key": "pluginId",
													"value": "",
													"description": "The unique identifier of the Plugin to delete"
												}
											]
										},
										"description": "# Delete Plugin Associated to a Specific Consumer [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-consumer)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>consumer username or id</td>\n    <td>required</td>\n    <td>The unique identifier or the username of the Consumer to delete.</td>\n  </tr>\n  <tr>\n    <td>plugin  id</td>\n    <td>required</td>\n    <td>The unique identifier of the Plugin to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "094a7368-c29f-4c03-87fb-c0df382bc164",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-plugin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fc98e2c4-7e20-473d-8ff4-57034941de7f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "10c17d7f-022f-4863-88e4-51de67295320"
									}
								}
							]
						},
						{
							"name": "Retrieve Plugin",
							"item": [
								{
									"name": "Retrieve Enabled Plugins",
									"id": "c95cda6b-d793-44d1-b039-11e324b9d47f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{kong.admin}}/plugins/enabled",
										"description": "# Retrieve Enabled Plugins [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-enabled-plugins)\n\nRetrieve a list of all installed plugins on the Kong node"
									},
									"response": [
										{
											"id": "4317332e-c85d-420d-b394-acb89d626f02",
											"name": "Retrieve Enabled Plugins",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/plugins/enabled"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 13:05:38 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "465"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"enabled_plugins\": [\n        \"correlation-id\",\n        \"pre-function\",\n        \"cors\",\n        \"ldap-auth\",\n        \"loggly\",\n        \"hmac-auth\",\n        \"zipkin\",\n        \"request-size-limiting\",\n        \"azure-functions\",\n        \"request-transformer\",\n        \"oauth2\",\n        \"response-transformer\",\n        \"ip-restriction\",\n        \"statsd\",\n        \"jwt\",\n        \"proxy-cache\",\n        \"basic-auth\",\n        \"key-auth\",\n        \"http-log\",\n        \"datadog\",\n        \"tcp-log\",\n        \"post-function\",\n        \"prometheus\",\n        \"acl\",\n        \"syslog\",\n        \"file-log\",\n        \"session\",\n        \"udp-log\",\n        \"response-ratelimiting\",\n        \"aws-lambda\",\n        \"bot-detection\",\n        \"rate-limiting\",\n        \"request-termination\"\n    ]\n}"
										}
									]
								},
								{
									"name": "Retrieve Plugin Schema",
									"id": "b94b6c65-00b0-4d5e-975b-e12883e5c6d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/plugins/schema/:pluginName",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"plugins",
												"schema",
												":pluginName"
											],
											"variable": [
												{
													"id": "f9197a41-8392-4f6f-a4d5-e0954ca9fdfa",
													"key": "pluginName",
													"value": "basic-auth"
												}
											]
										},
										"description": "# Retrieve Plugin Schema [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-schema)\n* Retrieve the schema of a plugin’s configuration. This is useful to understand what fields a plugin accepts, and can be used for building third-party integrations to the Kong’s plugin system.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>plugin name</td>\n    <td>required</td>\n    <td>The Plugin name to retrieve</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "3f10e721-80ff-4cd1-85e8-d1f04c114f1e",
											"name": "Delete Plugin - 204",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{kong.admin}}/plugins/:pluginId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														":pluginId"
													],
													"variable": [
														{
															"key": "pluginId",
															"value": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
															"description": "The unique identifier of the Plugin to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 12:14:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "17"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "6757d32e-2799-4811-9ce8-0d2a3db9e275",
											"name": "Retrieve Plugin Schema",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/plugins/schema/:pluginName",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"plugins",
														"schema",
														":pluginName"
													],
													"variable": [
														{
															"key": "pluginName",
															"value": "basic-auth"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 13:11:45 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "126"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"fields\": {\r\n        \"hide_credentials\": {\r\n            \"default\": false,\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"key_names\": {\r\n            \"default\": \"function\",\r\n            \"required\": true,\r\n            \"type\": \"array\"\r\n        }\r\n    }\r\n}"
										}
									]
								}
							],
							"id": "66950a99-eb61-4e67-811c-dbd41e53a10f"
						}
					],
					"id": "2b94a98b-19e4-4dda-ac87-c61f51688404",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#plugin-object\n\n* A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the Kong Hub.\n\n* When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the service and consumer fields.\n\n* Plugins can be both tagged and filtered by tags.\n\n{\n    \"id\": \"ce44eef5-41ed-47f6-baab-f725cecf98c7\",\n    \"name\": \"rate-limiting\",\n    \"created_at\": 1422386534,\n    \"route\": null,\n    \"service\": null,\n    \"consumer\": null,\n    \"config\": {\"hour\":500, \"minute\":20},\n    \"protocols\": [\"http\", \"https\"],\n    \"enabled\": true,\n    \"tags\": [\"user-level\", \"low-priority\"]\n}\n\n# Precedence\n\n* A plugin will always be run once and only once per request. But the configuration with which it will run depends on the entities it has been configured for.\n\n* Plugins can be configured for various entities, combination of entities, or even globally. This is useful, for example, when you wish to configure a plugin a certain way for most requests, but make authenticated requests behave slightly differently.\n\n* Therefore, there exists an order of precedence for running a plugin when it has been applied to different entities with different configurations. The rule of thumb is: the more specific a plugin is with regards to how many entities it has been configured on, the higher its priority.\n\n* The complete order of precedence when a plugin has been configured multiple times is:\n\n\t* Plugins configured on a combination of: a Route, a Service, and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Route and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Service and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Route and a Service.\n\t*Plugins configured on a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a Route.\n\t* Plugins configured on a Service.\n\t* Plugins configured to run globally.\n\n* Example: if the rate-limiting plugin is applied twice (with different configurations): for a Service (Plugin config A), and for a Consumer (Plugin config B), then requests authenticating this Consumer will run Plugin config B and ignore A. However, requests that do not authenticate this Consumer will fallback to running Plugin config A. Note that if config B is disabled (its enabled flag is set to false), config A will apply to requests that would have otherwise matched config B.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "42d04a9e-6c0e-4173-83e5-91a6fce488cb"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "22f9725e-c245-4375-a4f9-1d76fdcc26d9"
							}
						}
					]
				},
				{
					"name": "Certificate Object",
					"item": [
						{
							"name": "Add Certificate",
							"item": [
								{
									"name": "Create Certificate",
									"id": "96a69476-72cf-4d81-87f0-fe1b7e9c72f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": "{{kong.admin}}/certificates",
										"description": "# Create Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-certificate)\n* A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.\n* If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.\n* Certificates can be both tagged and filtered by tags.\n\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate chain of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>key</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded private key of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>snis</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "2eb88a7c-81fc-4554-b002-6330ae5cfd02",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0d428f9b-a4fd-41a1-99e6-45210e1d5a2a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "60bf0cff-bbbc-4e88-b204-aa8ae45906d2"
									}
								}
							]
						},
						{
							"name": "List Certificates",
							"item": [
								{
									"name": "List All Certificates",
									"id": "1f20d18b-0e75-4920-b770-c9f256cccd47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/certificates",
										"description": "# List All Certificates [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-certificates)"
									},
									"response": [
										{
											"id": "c4ff9d39-afff-4606-bfda-f4def76a63e9",
											"name": "List All Certificates",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/certificates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:08:32 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"d044b7d4-3dc2-4bbc-8e9f-6b7a69416df6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a9b2107f-a214-47b3-add4-46b942187924\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								}
							],
							"id": "ebf82678-0090-429a-b6f4-4f2c04c2679c",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-certificates"
						},
						{
							"name": "Retrieve Certificate",
							"item": [
								{
									"name": "Retrieve Certificate",
									"id": "72354e7c-49e8-4d82-9e28-48febf5298f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId"
											],
											"variable": [
												{
													"id": "34b8e808-36d0-4d8c-951c-d23b53dc9fe3",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to retrieve."
												}
											]
										},
										"description": "# Retrieve Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-certificate-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "e313f812-e6d4-4550-8fb7-bb33dfc02222",
											"name": "Retrieve Certificate",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateId"
													],
													"variable": [
														{
															"key": "certificateId",
															"value": "",
															"description": "The unique identifier of the Certificate to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:17:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"7fca84d6-7d37-4a74-a7b0-93e576089a41\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										}
									]
								}
							],
							"id": "a9e27238-61e6-40dc-99f7-bcd897decc5f",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e623459d-2dfa-43fc-b241-a8048ad58cc2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a956e33a-35f5-4e09-87e3-00197cc50b3a"
									}
								}
							]
						},
						{
							"name": "Update Certificate",
							"item": [
								{
									"name": "Update Certificate",
									"id": "08179b12-8fee-4ecd-bd85-ebd2d37c4673",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId"
											],
											"variable": [
												{
													"id": "48859794-f551-485a-8ef5-04d818b3cf9d",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to update."
												}
											]
										},
										"description": "# Update Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-certificate-1)\n* A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.\n* If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.\n* Certificates can be both tagged and filtered by tags.\n\n# Path parameters\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate chain of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>key</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded private key of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>snis</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "633769bf-7572-431e-af2d-d0bdd9f3e2f4",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9e7ccd1c-8f50-4482-a57f-2e9d92b97db5"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6fa4111f-dcc3-493e-8191-18c8779e5012"
									}
								}
							]
						},
						{
							"name": "Update Or Create Certificate",
							"item": [
								{
									"name": "Create Or Update Certificate",
									"id": "e3d9e56c-21bc-4586-9dea-2a11b7a32416",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId"
											],
											"variable": [
												{
													"id": "d9b3d9f5-2a43-4da7-8ec7-a4789b2681e2",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to update."
												}
											]
										},
										"description": "# Create Or Update Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-certificate)\n* A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.\n* If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.\n* Certificates can be both tagged and filtered by tags.\n\n* Inserts (or replaces) the Certificate under the requested resource with the definition specified in the body. The Certificate will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the Certificate being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new Certificate without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n# Path parameters\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to create or update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate chain of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>key</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded private key of the SSL key pair.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>snis</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "5db9aab4-7816-4f6c-aa68-f6789a866756",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "849317f0-a12a-49f1-babe-614df7a3461d"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "83e9e040-1034-4239-9633-8504335cc7a1"
									}
								}
							]
						},
						{
							"name": "Delete Certificate",
							"item": [
								{
									"name": "Delete Certificate",
									"id": "4115b2de-c537-4da8-af8f-8df3d5aafc83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId"
											],
											"variable": [
												{
													"id": "ccbbf6e5-1ff0-455b-8829-b8f13d1b9505",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to delete"
												}
											]
										},
										"description": "# Delete Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-certificate-1)\n\n# Path parameters\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to delete</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "e1b25c35-cb61-45d9-b3fd-816e7e9cbe3f",
											"name": "Delete Certificate - 404",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateId"
													],
													"variable": [
														{
															"key": "certificateId",
															"value": "kkkkk",
															"description": "The unique identifier of the Certificate to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:49:31 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "27"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"SNI not found\"\n}"
										}
									]
								}
							],
							"id": "d04a81fc-ef5c-4f9b-bba6-a9c2552c523a",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a7e4707f-687d-462a-b2f6-68544f4bb8c2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e7ef8374-c90d-47a4-a0af-594f4185952c"
									}
								}
							]
						}
					],
					"id": "860bb4a0-da61-4da8-ad14-9eb65dbf6fd3",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#certificate-object\n\nA certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.\n\nIf intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.\n\nCertificates can be both tagged and filtered by tags.\n\n{\n    \"id\": \"7fca84d6-7d37-4a74-a7b0-93e576089a41\",\n    \"created_at\": 1422386534,\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\": [\"user-level\", \"low-priority\"]\n}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "066fff43-cc2d-4642-8c38-aaa8d3667a05"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a20f358a-1e81-4227-8cb1-b3ce3f6516b6"
							}
						}
					]
				},
				{
					"name": "CA Certificate Object",
					"item": [
						{
							"name": "Add CA Certificate",
							"item": [
								{
									"name": "Create CA Certificate",
									"id": "3b59a517-6934-454c-8fc6-ddfcfb8e8b22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE----------END CERTIFICATE-----\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": "{{kong.admin}}/ca_certificates",
										"description": "# Create CA Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-ca-certificate)\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate of the CA.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "3f2ba301-4805-45f5-99ba-a8f3af741150",
											"name": "Create CA Certificate - 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE----------END CERTIFICATE-----\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{kong.admin}}/ca_certificates"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 16:02:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "315"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"04fbeacf-a9f1-4a5d-ae4a-b0407445db3f\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										{
											"id": "4dd6207e-c607-42fa-93ed-932636fed4bb",
											"name": "Create CA Certificate - 400",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"name": "Content-Type",
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----dsfdfad-----END CERTIFICATE-----\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
												},
												"url": "{{kong.admin}}/ca_certificates"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 16:00:21 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "315"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"schema violation (cert: invalid certificate: x509.new: pem/pem_lib.c:812:error:0908F070:PEM routines:get_header_and_data:short header)\",\n    \"name\": \"schema violation\",\n    \"fields\": {\n        \"cert\": \"invalid certificate: x509.new: pem/pem_lib.c:812:error:0908F070:PEM routines:get_header_and_data:short header\"\n    },\n    \"code\": 2\n}"
										}
									]
								}
							],
							"id": "d7cbc318-9074-439e-afa9-1626ca769a36",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-ca-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5242ccb8-7408-4050-a012-3141c5b00bea"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f58f8d54-baed-4129-b72f-9aa5fdabbb43"
									}
								}
							]
						},
						{
							"name": "List CA Certificates",
							"item": [
								{
									"name": "List All CA Certificates",
									"id": "5225b9e9-88c1-4618-a81c-c97620e81fd0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/ca_certificates",
										"description": "# List All CA Certificates [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-ca-certificates)"
									},
									"response": [
										{
											"id": "57508b1f-6bd1-4124-8e43-dfd27226c913",
											"name": "List All CA Certificates",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/ca_certificates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:53:48 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "3"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"43429efd-b3a5-4048-94cb-5cc4029909bb\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"d26761d5-83a4-4f24-ac6c-cff276f2b79c\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/ca_certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								}
							],
							"id": "6a2da504-b00a-47cd-9906-d24ff263a85d",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-ca-certificates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "35a04229-bc98-4c7c-b84b-ba818ebf26dc"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "1bd1ad32-4b37-4e26-9dec-d932ff7118f3"
									}
								}
							]
						},
						{
							"name": "Retrieve CA Certificate",
							"item": [
								{
									"name": "Retrieve CA Certificate",
									"id": "b05bab20-c1ed-47b1-841a-197aac579c9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/ca_certificates/:ca_certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"ca_certificates",
												":ca_certificateId"
											],
											"variable": [
												{
													"id": "166692d3-f6e3-47cc-81ae-c528d1d78566",
													"key": "ca_certificateId",
													"value": ""
												}
											]
										},
										"description": "# Retrieve CA Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-ca-certificate-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>ca_certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the CA Certificate to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "847afe16-0a6d-4c7e-b14d-65a12b940596",
											"name": "Retrieve CA Certificate - 400",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}} /ca_certificates/:ca_certificateId",
													"host": [
														"{{kong.admin}} "
													],
													"path": [
														"ca_certificates",
														":ca_certificateId"
													],
													"variable": [
														{
															"key": "ca_certificateId",
															"value": "as",
															"description": "The unique identifier of the CA Certificate to retrieve."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Server",
													"value": "openresty"
												},
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 16:07:38 GMT"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=UTF-8"
												},
												{
													"key": "Content-Length",
													"value": "122"
												},
												{
													"key": "Connection",
													"value": "close"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "<html>\n    <head>\n        <title>400 Bad Request</title>\n    </head>\n    <body>\n        <center>\n            <h1>400 Bad Request</h1>\n        </center>\n    </body>\n</html>"
										},
										{
											"id": "7742fc80-41fd-4f8c-9ea8-89e99bb3be21",
											"name": "Retrieve Certificate",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateId"
													],
													"variable": [
														{
															"key": "certificateId",
															"value": "",
															"description": "The unique identifier of the Certificate to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:17:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"7fca84d6-7d37-4a74-a7b0-93e576089a41\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
										},
										{
											"id": "c1130392-2f97-4052-8fcc-9f0a7e447565",
											"name": "Retrieve CA Certificate - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/ca_certificates/:ca_certificateId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"ca_certificates",
														":ca_certificateId"
													],
													"variable": [
														{
															"key": "ca_certificateId",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 16:10:31 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"id\": \"04fbeacf-a9f1-4a5d-ae4a-b0407445db3f\",\n \"created_at\": 1422386534,\n \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n \"tags\": [\n  \"user-level\",\n  \"low-priority\"\n ],\n \"key\": \"incididunt Lorem elit\"\n}"
										}
									]
								}
							],
							"id": "b3198fad-057e-4f20-a544-5ee6f7ef5e5e",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-ca-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b282807e-b023-4f0b-ba1c-03b06e2eae3d"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "947a9c2f-c434-4f9b-9b7a-ede950d7cf38"
									}
								}
							]
						},
						{
							"name": "Update CA Certificate",
							"item": [
								{
									"name": "Update CA Certificate",
									"id": "f3cb3ddc-dd4a-4569-8299-6e95abdf3ff4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE----------END CERTIFICATE-----\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/ca_certificates/:ca_certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"ca_certificates",
												":ca_certificateId"
											],
											"variable": [
												{
													"id": "198435b4-a870-4923-90fc-d6d2b4fe0885",
													"key": "ca_certificateId",
													"value": ""
												}
											]
										},
										"description": "# Update CA Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-ca-certificate-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>ca_certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the CA Certificate to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate of the CA.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "88d159d5-2161-4aa4-84d4-bfffae01ac46",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-ca-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5bf522d5-bb6d-46ee-85d8-83943bf11028"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5a052031-9fce-4349-8a9d-02c2544c4226"
									}
								}
							]
						},
						{
							"name": "Update Or Create CA Certificate",
							"item": [
								{
									"name": "Create Or Update CA Certificate",
									"id": "c9e58af5-14f5-40d0-902c-27f3f84c4f26",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/ca_certificates/:ca_certificateId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"ca_certificates",
												":ca_certificateId"
											],
											"variable": [
												{
													"id": "5ff102fd-09f0-4615-aa9b-3cb083793f48",
													"key": "ca_certificateId",
													"value": "",
													"description": "The unique identifier of the CA Certificate to create or update."
												}
											]
										},
										"description": "# Create Or Update CA Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-ca-certificate)\n* Inserts (or replaces) the CA Certificate under the requested resource with the definition specified in the body. The CA Certificate will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the CA Certificate being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new CA Certificate without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n# Path parameters\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>ca certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the CA Certificate to create or update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>cert</td>\n    <td>required</td>\n    <td>body</td>\n    <td>PEM-encoded public certificate of the CA.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "d131ec15-ce48-41ac-9a0c-c93dbfb7ff29",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-ca-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "04b0e6c8-5617-4bf7-93b4-d47ad5f9707b"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5b9973d1-26b9-4818-accc-38fb9b105147"
									}
								}
							]
						},
						{
							"name": "Delete CA Certificate",
							"item": [
								{
									"name": "Delete Certificate",
									"id": "fce3b9b4-4473-426e-aa00-08a4470aaac0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}ca_/certificates/:ca_certificateId",
											"host": [
												"{{kong.admin}}ca_"
											],
											"path": [
												"certificates",
												":ca_certificateId"
											],
											"variable": [
												{
													"id": "50cf5310-7c3a-49d4-b28c-4ca7156ba014",
													"key": "ca_certificateId"
												}
											]
										},
										"description": "# Delete Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-certificate-1)\n\n# Path parameters\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to delete</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "2e6e4f89-1d62-41ce-9208-af0dd03c43c7",
											"name": "Delete Certificate - 404",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{kong.admin}}/certificates/:certificateId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"certificates",
														":certificateId"
													],
													"variable": [
														{
															"key": "certificateId",
															"value": "kkkkk",
															"description": "The unique identifier of the Certificate to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 15:49:31 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "27"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"SNI not found\"\n}"
										}
									]
								}
							],
							"id": "5a19e615-9341-4baa-8c72-5a63abc638f8",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-ca-certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "39aad841-d913-46d7-a809-97de448a3909"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "65fa8466-466b-4db9-a3e4-0330137df3cd"
									}
								}
							]
						}
					],
					"id": "9f51abfc-ae37-4788-b264-6e21dd6e7003",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#ca-certificate-object\n\n* A CA certificate object represents a trusted CA. These objects are used by Kong to verify the validity of a client or server certificate.\n\n* CA Certificates can be both tagged and filtered by tags.\n\n{\n    \"id\": \"04fbeacf-a9f1-4a5d-ae4a-b0407445db3f\",\n    \"created_at\": 1422386534,\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n    \"tags\": [\"user-level\", \"low-priority\"]\n}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5a572ceb-7341-4c6d-9edd-c805fe289ebd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3702c08f-46c6-4b99-a475-11fdeef89d05"
							}
						}
					]
				},
				{
					"name": "SNI Object",
					"item": [
						{
							"name": "Add SNI",
							"item": [
								{
									"name": "Create SNI",
									"id": "cb15a676-f5fe-4e6b-85a2-bbe542aa6512",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.admin}}/snis",
										"description": "# Create SNI [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-sni)\n* An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.\n* SNIs can be both tagged and filtered by tags.\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "e430db77-b07f-4107-92cf-cde1d375fc2b",
											"name": "Create SNI - 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{kong.admin}}/snis"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 17:05:06 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}\r\n"
										}
									]
								},
								{
									"name": "Create SNI Associated to a Specific Certificate",
									"id": "a774faa4-d9c0-4c47-aa5e-012d55da8c97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateNameOrId/snis",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateNameOrId",
												"snis"
											],
											"variable": [
												{
													"id": "65392ed3-0e16-4ff7-aef2-069b92fd9f08",
													"key": "certificateNameOrId",
													"value": "",
													"description": "The unique identifier or the name attribute of the Certificate that should be associated to the newly-created SNI."
												}
											]
										},
										"description": "# Create SNI Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-sni-associated-to-a-specific-certificate)\n* An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.\n* SNIs can be both tagged and filtered by tags.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Certificate that should be associated to the newly-created SNI.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "bfb18a51-880b-4aa7-af86-ebec138992e8",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-sni"
						},
						{
							"name": "List SNIs",
							"item": [
								{
									"name": "List All SNIs",
									"id": "9a0da10f-6127-4e6d-84ff-d26e526ecea5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/snis",
										"description": "# List All SNIs [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-snis)\n* An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.\n* SNIs can be both tagged and filtered by tags."
									},
									"response": [
										{
											"id": "7b6da7b9-42ba-48cb-9033-970d4f8efa8d",
											"name": "List All SNIs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/snis"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 17:15:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"147f5ef0-1ed6-4711-b77f-489262f8bff7\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"a3ad71a8-6685-4b03-a101-980a953544f6\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"b87eb55d-69a1-41d2-8653-8d706eecefc0\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"4e8d95d4-40f2-4818-adcb-30e00c349618\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								},
								{
									"name": "List SNIs Associated to a Specific Certificate",
									"id": "aa0027f4-63a2-4d0c-9566-49d44e39e76d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateNameOrId/snis",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateNameOrId",
												"snis"
											],
											"variable": [
												{
													"id": "ea52e595-5bdc-488d-8972-1fbd124531e7",
													"key": "certificateNameOrId",
													"value": "",
													"description": "The unique identifier or the name attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed."
												}
											]
										},
										"description": "# List SNIs Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-snis-associated-to-a-specific-certificate)\n* An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.\n* SNIs can be both tagged and filtered by tags.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "447fd8e0-8bc9-49a6-b891-2de25cc62e40",
											"name": "List All SNIs",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/snis"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 17:15:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"147f5ef0-1ed6-4711-b77f-489262f8bff7\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"a3ad71a8-6685-4b03-a101-980a953544f6\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"b87eb55d-69a1-41d2-8653-8d706eecefc0\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"4e8d95d4-40f2-4818-adcb-30e00c349618\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								}
							],
							"id": "c6cd3612-693b-4cae-83ab-ed4756972350",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-snis"
						},
						{
							"name": "Retrieve SNI",
							"item": [
								{
									"name": "Retrieve SNI",
									"id": "b7397fa4-b0a3-4ac1-95a0-c2a9bab4956c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "78060593-bb91-450c-bea0-1a7ae9b13d93",
													"key": "sniNameOrId",
													"value": "my-sni",
													"description": "The unique identifier or the name of the SNI to retrieve"
												}
											]
										},
										"description": "# Retrieve SNI [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-snis)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to retrieve</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "782ad704-796a-47af-84ed-b9956ec6ab72",
											"name": "Retrieve SNI - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/snis/:sniNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"snis",
														":sniNameOrId"
													],
													"variable": [
														{
															"key": "sniNameOrId",
															"value": "my-sni",
															"description": "The unique identifier or the name of the SNI to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 17:25:48 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}"
										}
									]
								},
								{
									"name": "Retrieve SNI Associated to a Specific Certificate",
									"id": "b774446d-f7d8-43cf-8d99-6fdb9a58b96d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "3d164706-ef1a-487c-82f7-f853240b240d",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to retrieve"
												},
												{
													"id": "e5f0457b-bc1b-4f49-82a1-e1967a594ddb",
													"key": "sniNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the SNI to retrieve"
												}
											]
										},
										"description": "# Retrieve SNI Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to retrieve.</td>\n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "48d757c0-d337-4e88-bbf2-d007a70dc8ad",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3af62965-7f20-4199-9a9b-66feec932af8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "df0a1a49-a117-485f-874c-02b6de8e3daf"
									}
								}
							]
						},
						{
							"name": "Update SNI",
							"item": [
								{
									"name": "Update  SNI",
									"id": "8eba9332-1db7-46b7-a1a8-93dd18cbc94a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "6356fec0-95d5-4bd5-9ddf-2751f1696f5f",
													"key": "sniNameOrId",
													"value": "my-sni",
													"description": "The unique identifier or the name of the SNI to update"
												}
											]
										},
										"description": "# Update SNI [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-1)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to update</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "84b7207e-f0cb-4b78-be25-fffb73b4e5d1",
											"name": "Update  SNI - 404",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
												},
												"url": {
													"raw": "{{kong.admin}}/snis/:sniNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"snis",
														":sniNameOrId"
													],
													"variable": [
														{
															"key": "sniNameOrId",
															"value": "my-sni",
															"description": "The unique identifier or the name of the SNI to update"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 18:34:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "119"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"could not find the entity with '{name=\\\"my-sni\\\"}'\",\n    \"name\": \"not found\",\n    \"fields\": {\n        \"name\": \"my-sni\"\n    },\n    \"code\": 6\n}"
										}
									]
								},
								{
									"name": "Update SNI Associated to a Specific Certificate",
									"id": "df3a992e-fdc9-4e23-8950-e7539806cfa9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "cb27114f-229e-4e01-8fc2-17ae09bdeec6",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to update"
												},
												{
													"id": "7ab84b8a-af67-4e1b-977a-20437766a3da",
													"key": "sniNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the SNI to update"
												}
											]
										},
										"description": "# Update SNI Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update.</td>\n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "dce2b294-1c02-4cd1-bc4f-03c8ff24cf3f",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-sni",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e7892ef2-6467-414b-aea6-8b660492c370"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "cc53f699-3f3a-483b-bf39-de51156c0edf"
									}
								}
							]
						},
						{
							"name": "Update Or Create SNI",
							"item": [
								{
									"name": "Create Or Update SNI",
									"id": "28c8f207-90e1-40a4-bf17-04736f313619",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "cf64448e-a941-440c-8bc5-18dd8a25b798",
													"key": "sniNameOrId",
													"value": "my-sni",
													"description": "The unique identifier or the name of the SNI to create or update"
												}
											]
										},
										"description": "# Create Or Update SNI [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-sni)\n* Inserts (or replaces) the SNI under the requested resource with the definition specified in the body. The SNI will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the SNI being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new SNI without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to create or update</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Or Update SNI Associated to a Specific Certificate",
									"id": "d8fdefac-4850-4030-961f-587c047532d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"certificate\": {\n        \"id\": \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
										},
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "c98c3be0-3696-4dc9-8813-a4942e3bca1a",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to update"
												},
												{
													"id": "d8ac5435-e03d-45e6-937e-c0427d1dc035",
													"key": "sniNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the SNI to update"
												}
											]
										},
										"description": "# Update SNI Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-associated-to-a-specific-certificate)\n* Inserts (or replaces) the SNI under the requested resource with the definition specified in the body. The SNI will be identified via the name or id attribute.\n* When the name or id attribute has the structure of a UUID, the SNI being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n* When creating a new SNI without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to update.</td>\n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The SNI name to associate with the given certificate.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>certificate</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “\"certificate\":{\"id\":\"<certificate id>\"}.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "886800b9-861e-44a7-bca3-427839899165",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-sni",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "342125f1-68a9-4f41-afe2-2ee3d0f56803"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b2b175ba-bd3d-4152-ae5d-7db3f18dd6c9"
									}
								}
							]
						},
						{
							"name": "Retrieve SNI Copy",
							"item": [
								{
									"name": "Delete SNI",
									"id": "05558127-378a-4a60-ad33-709ca3650b59",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "d038bcaf-5fb3-42c5-8e21-1d6f73853b73",
													"key": "sniNameOrId",
													"value": "my-sni",
													"description": "The unique identifier or the name of the SNI to retrieve"
												}
											]
										},
										"description": "# Delete SNI [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-sni-1)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to delete</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "052e55ea-6420-45d9-ba21-304bb134b261",
											"name": "Retrieve SNI - 200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/snis/:sniNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"snis",
														":sniNameOrId"
													],
													"variable": [
														{
															"key": "sniNameOrId",
															"value": "my-sni",
															"description": "The unique identifier or the name of the SNI to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 17:25:48 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}"
										}
									]
								},
								{
									"name": "Delete SNI Associated to a Specific Certificate",
									"id": "be704ec4-70a6-43a1-90e1-df05d97d3782",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/certificates/:certificateId/snis/:sniNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"certificates",
												":certificateId",
												"snis",
												":sniNameOrId"
											],
											"variable": [
												{
													"id": "c55e93f5-065a-4bea-914f-ce891b7685d2",
													"key": "certificateId",
													"value": "",
													"description": "The unique identifier of the Certificate to delete"
												},
												{
													"id": "71f30700-ed5d-40e4-9c39-121126f1bfc8",
													"key": "sniNameOrId",
													"value": "",
													"description": "The unique identifier or the name of the SNI to delete"
												}
											]
										},
										"description": "# Delete SNI Associated to a Specific Certificate [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-sni-associated-to-a-specific-certificate)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>certificate id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier of the Certificate to delete.</td>\n  </tr>\n  <tr>\n    <td>sni name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the SNI to delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "77ed9eab-db3f-4693-8f70-d3985d4a2807",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "74e3d4a4-57e5-4a93-9d1e-33f6fc648fb7"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "11956450-e023-4685-9ed1-5cae0754c3d9"
									}
								}
							]
						}
					],
					"id": "1084df9d-f0c0-4b77-b52a-59934109ce4d",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#sni-object\n\nAn SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.\n\nSNIs can be both tagged and filtered by tags.\n\n{\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\n    \"name\": \"my-sni\",\n    \"created_at\": 1422386534,\n    \"tags\": [\"user-level\", \"low-priority\"],\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\n}"
				},
				{
					"name": "Upstream Object",
					"item": [
						{
							"name": "Add Upstream",
							"item": [
								{
									"name": "Create Upstream",
									"id": "03d0f330-31ec-46fa-9df3-ab79a2255053",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"created_at\": 1584044267,\n    \"hash_on\": \"none\",\n    \"id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n    \"algorithm\": \"round-robin\",\n    \"name\": \"my-upstream\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"hash_fallback_header\": null,\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie\": null,\n    \"host_header\": \"example.com\",\n    \"hash_on_cookie_path\": \"/\",\n    \"healthchecks\": {\n        \"threshold\": 0,\n        \"active\": {\n            \"unhealthy\": {\n                \"http_statuses\": [\n                    429,\n                    404,\n                    500,\n                    501,\n                    502,\n                    503,\n                    504,\n                    505\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"type\": \"http\",\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"successes\": 0,\n                \"interval\": 0,\n                \"http_statuses\": [\n                    200,\n                    302\n                ]\n            },\n            \"https_sni\": \"example.com\",\n            \"https_verify_certificate\": true,\n            \"concurrency\": 10\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [\n                    429,\n                    500,\n                    503\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"healthy\": {\n                \"http_statuses\": [\n                    200,\n                    201,\n                    202,\n                    203,\n                    204,\n                    205,\n                    206,\n                    207,\n                    208,\n                    226,\n                    300,\n                    301,\n                    302,\n                    303,\n                    304,\n                    305,\n                    306,\n                    307,\n                    308\n                ],\n                \"successes\": 0\n            },\n            \"type\": \"http\"\n        }\n    },\n    \"hash_on_header\": null,\n    \"slots\": 10000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{kong.admin}}/upstreams",
										"description": "# Create Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-upstream)\n* The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named service.v1.xyz for a Service object whose host is service.v1.xyz. Requests for this Service would be proxied to the targets defined within the upstream.\n\n* An upstream also includes a health checker, which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.\n\n* Upstreams can be both tagged and filtered by tags.\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>This is a hostname, which must be equal to the host of a Service.</td>\n  </tr>\n  <tr>\n    <td>algorithm</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Which load balancing algorithm to use. Accepted values are: \"consistent-hashing\", \"least-connections\", \"round-robin\". Defaults to \"round-robin\".</td>\n  </tr>\n  <tr>\n    <td>hash_on</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_fallback</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_on_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_fallback_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie_path</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>slots</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_verify_certificate</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.http_path</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.timeout</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_sni</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.concurrency</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.threshold</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>host_header</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to be used as Host header when proxying requests through Kong.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "050120c9-0567-41ed-8d5c-d1881c18694e",
											"name": "Create Upstream-201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"my-upstream\",\n    \"algorithm\": \"round-robin\",\n    \"hash_on\": \"none\",\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie_path\": \"/\",\n    \"slots\": 10000,\n    \"healthchecks\": {\n        \"active\": {\n            \"https_verify_certificate\": true,\n            \"unhealthy\": {\n                \"http_statuses\": [\n                    429,\n                    404,\n                    500,\n                    501,\n                    502,\n                    503,\n                    504,\n                    505\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"http_statuses\": [\n                    200,\n                    302\n                ],\n                \"interval\": 0,\n                \"successes\": 0\n            },\n            \"https_sni\": \"example.com\",\n            \"concurrency\": 10,\n            \"type\": \"http\"\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [\n                    429,\n                    500,\n                    503\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"type\": \"http\",\n            \"healthy\": {\n                \"successes\": 0,\n                \"http_statuses\": [\n                    200,\n                    201,\n                    202,\n                    203,\n                    204,\n                    205,\n                    206,\n                    207,\n                    208,\n                    226,\n                    300,\n                    301,\n                    302,\n                    303,\n                    304,\n                    305,\n                    306,\n                    307,\n                    308\n                ]\n            }\n        },\n        \"threshold\": 0\n    },\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"host_header\": \"example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{kong.admin}}/upstreams"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 20:17:47 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "922"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "32"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"created_at\": 1584044267,\n    \"hash_on\": \"none\",\n    \"id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n    \"algorithm\": \"round-robin\",\n    \"name\": \"my-upstream\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"hash_fallback_header\": null,\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie\": null,\n    \"host_header\": \"example.com\",\n    \"hash_on_cookie_path\": \"/\",\n    \"healthchecks\": {\n        \"threshold\": 0,\n        \"active\": {\n            \"unhealthy\": {\n                \"http_statuses\": [\n                    429,\n                    404,\n                    500,\n                    501,\n                    502,\n                    503,\n                    504,\n                    505\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"type\": \"http\",\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"successes\": 0,\n                \"interval\": 0,\n                \"http_statuses\": [\n                    200,\n                    302\n                ]\n            },\n            \"https_sni\": \"example.com\",\n            \"https_verify_certificate\": true,\n            \"concurrency\": 10\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [\n                    429,\n                    500,\n                    503\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"healthy\": {\n                \"http_statuses\": [\n                    200,\n                    201,\n                    202,\n                    203,\n                    204,\n                    205,\n                    206,\n                    207,\n                    208,\n                    226,\n                    300,\n                    301,\n                    302,\n                    303,\n                    304,\n                    305,\n                    306,\n                    307,\n                    308\n                ],\n                \"successes\": 0\n            },\n            \"type\": \"http\"\n        }\n    },\n    \"hash_on_header\": null,\n    \"slots\": 10000\n}"
										}
									]
								}
							],
							"id": "d8ddad13-114c-45cb-956c-9c803bd441d2",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-upstream"
						},
						{
							"name": "List All Upstreams",
							"item": [
								{
									"name": "List All Upstreams",
									"id": "42e39a4d-3b85-4d20-a3d8-2ba3c05c9a24",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{kong.admin}}/upstreams",
										"description": "# List All Upstreams [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-upstreams)"
									},
									"response": [
										{
											"id": "1d16f9c0-c365-483e-9e2c-b6d5ad157417",
											"name": "List All Upstreams-200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/upstreams"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 20:21:55 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "945"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"4fe14415-73d5-4f00-9fbc-c72a0fccfcb2\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/upstreams?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								}
							],
							"id": "770644d8-be01-4eca-936c-a3451243b019",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-upstreams"
						},
						{
							"name": "Retrieve Upstream",
							"item": [
								{
									"name": "Retrieve Upstream",
									"id": "48024c51-7003-4b3b-a087-654eaef9d18a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamNameOrId"
											],
											"variable": [
												{
													"id": "013e01e8-acab-4e6e-b118-09e9b9476df7",
													"key": "upstreamNameOrId",
													"value": "my-upstream",
													"description": "The unique identifier or the name of the Upstream to retrieve."
												}
											]
										},
										"description": "# Retrieve Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream to retrieve.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "77c7e957-c852-4121-90e3-c5c1ee13e611",
											"name": "Retrieve Upstream-200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":upstreamNameOrId"
													],
													"variable": [
														{
															"key": "upstreamNameOrId",
															"value": "my-upstream",
															"description": "The unique identifier or the name of the Upstream to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 20:39:05 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "922"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"created_at\": 1584044267,\n    \"hash_on\": \"none\",\n    \"id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n    \"algorithm\": \"round-robin\",\n    \"name\": \"my-upstream\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"hash_fallback_header\": null,\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie\": null,\n    \"host_header\": \"example.com\",\n    \"hash_on_cookie_path\": \"/\",\n    \"healthchecks\": {\n        \"threshold\": 0,\n        \"active\": {\n            \"unhealthy\": {\n                \"http_statuses\": [\n                    429,\n                    404,\n                    500,\n                    501,\n                    502,\n                    503,\n                    504,\n                    505\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"type\": \"http\",\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"successes\": 0,\n                \"interval\": 0,\n                \"http_statuses\": [\n                    200,\n                    302\n                ]\n            },\n            \"https_sni\": \"example.com\",\n            \"https_verify_certificate\": true,\n            \"concurrency\": 10\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [\n                    429,\n                    500,\n                    503\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"healthy\": {\n                \"http_statuses\": [\n                    200,\n                    201,\n                    202,\n                    203,\n                    204,\n                    205,\n                    206,\n                    207,\n                    208,\n                    226,\n                    300,\n                    301,\n                    302,\n                    303,\n                    304,\n                    305,\n                    306,\n                    307,\n                    308\n                ],\n                \"successes\": 0\n            },\n            \"type\": \"http\"\n        }\n    },\n    \"hash_on_header\": null,\n    \"slots\": 10000\n}"
										}
									]
								},
								{
									"name": "Retrieve Upstream Associated to a Specific Target",
									"id": "dde8e201-18e5-4fd5-a272-d9d3973180e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/targets/:targetHost:portOrId/upstream",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"targets",
												":targetHost:portOrId",
												"upstream"
											],
											"variable": [
												{
													"id": "bb09f47e-2fcb-4f7e-a091-6c2c661e13e6",
													"key": "targetHost:portOrId",
													"value": "",
													"description": "The unique identifier or the host:port of the Target associated to the Upstream to be retrieved."
												}
											]
										},
										"description": "# Retrieve Upstream Associated to a Specific Target [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream-associated-to-a-specific-target)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>target host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port of the Target associated to the Upstream to be retrieved.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "f26e39bf-da1b-4f93-8e4a-9ba2a3bd510a",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "34d9e198-9ed9-409c-8010-e51d22fc8a4a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "42e71743-da69-4d05-aa1a-31d1348429bd"
									}
								}
							]
						},
						{
							"name": "Update Upstream",
							"item": [
								{
									"name": "Update Upstream",
									"id": "b73d9685-e881-4d11-b83a-8b055db9f4dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"hash_on\": \"none\",\r\n    \"algorithm\": \"round-robin\",\r\n    \"name\": \"my-upstream\",\r\n    \"tags\": [\r\n        \"user-level\",\r\n        \"low-priority\"\r\n    ],\r\n    \"hash_fallback_header\": null,\r\n    \"hash_fallback\": \"none\",\r\n    \"hash_on_cookie\": null,\r\n    \"host_header\": \"example.com\",\r\n    \"hash_on_cookie_path\": \"/\",\r\n    \"healthchecks\": {\r\n        \"threshold\": 0,\r\n        \"active\": {\r\n            \"unhealthy\": {\r\n                \"http_statuses\": [\r\n                    429,\r\n                    404,\r\n                    500,\r\n                    501,\r\n                    502,\r\n                    503,\r\n                    504,\r\n                    505\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0,\r\n                \"http_failures\": 0,\r\n                \"interval\": 0\r\n            },\r\n            \"type\": \"http\",\r\n            \"http_path\": \"/\",\r\n            \"timeout\": 1,\r\n            \"healthy\": {\r\n                \"successes\": 0,\r\n                \"interval\": 0,\r\n                \"http_statuses\": [\r\n                    200,\r\n                    302\r\n                ]\r\n            },\r\n            \"https_sni\": \"example.com\",\r\n            \"https_verify_certificate\": true,\r\n            \"concurrency\": 10\r\n        },\r\n        \"passive\": {\r\n            \"unhealthy\": {\r\n                \"http_failures\": 0,\r\n                \"http_statuses\": [\r\n                    429,\r\n                    500,\r\n                    503\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0\r\n            },\r\n            \"healthy\": {\r\n                \"http_statuses\": [\r\n                    200,\r\n                    201,\r\n                    202,\r\n                    203,\r\n                    204,\r\n                    205,\r\n                    206,\r\n                    207,\r\n                    208,\r\n                    226,\r\n                    300,\r\n                    301,\r\n                    302,\r\n                    303,\r\n                    304,\r\n                    305,\r\n                    306,\r\n                    307,\r\n                    308\r\n                ],\r\n                \"successes\": 0\r\n            },\r\n            \"type\": \"http\"\r\n        }\r\n    },\r\n    \"hash_on_header\": null,\r\n    \"slots\": 10000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamNameOrId"
											],
											"variable": [
												{
													"id": "756608f9-d8ad-4984-ac1a-bedde84b7f8d",
													"key": "upstreamNameOrId",
													"value": "my-upstream"
												}
											]
										},
										"description": "# Update Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-upstream-1)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream to update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>This is a hostname, which must be equal to the host of a Service.</td>\n  </tr>\n  <tr>\n    <td>algorithm</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Which load balancing algorithm to use. Accepted values are: \"consistent-hashing\", \"least-connections\", \"round-robin\". Defaults to \"round-robin\".</td>\n  </tr>\n  <tr>\n    <td>hash_on</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_fallback</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_on_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_fallback_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie_path</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>slots</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_verify_certificate</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.http_path</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.timeout</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_sni</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.concurrency</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.threshold</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>host_header</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to be used as Host header when proxying requests through Kong.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "864fb281-71a3-4f68-805d-298d3b1fae34",
											"name": "Update Upstream - 200",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"hash_on\": \"none\",\r\n    \"algorithm\": \"round-robin\",\r\n    \"name\": \"my-upstream\",\r\n    \"tags\": [\r\n        \"user-level\",\r\n        \"low-priority\"\r\n    ],\r\n    \"hash_fallback_header\": null,\r\n    \"hash_fallback\": \"none\",\r\n    \"hash_on_cookie\": null,\r\n    \"host_header\": \"example.com\",\r\n    \"hash_on_cookie_path\": \"/\",\r\n    \"healthchecks\": {\r\n        \"threshold\": 0,\r\n        \"active\": {\r\n            \"unhealthy\": {\r\n                \"http_statuses\": [\r\n                    429,\r\n                    404,\r\n                    500,\r\n                    501,\r\n                    502,\r\n                    503,\r\n                    504,\r\n                    505\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0,\r\n                \"http_failures\": 0,\r\n                \"interval\": 0\r\n            },\r\n            \"type\": \"http\",\r\n            \"http_path\": \"/\",\r\n            \"timeout\": 1,\r\n            \"healthy\": {\r\n                \"successes\": 0,\r\n                \"interval\": 0,\r\n                \"http_statuses\": [\r\n                    200,\r\n                    302\r\n                ]\r\n            },\r\n            \"https_sni\": \"example.com\",\r\n            \"https_verify_certificate\": true,\r\n            \"concurrency\": 10\r\n        },\r\n        \"passive\": {\r\n            \"unhealthy\": {\r\n                \"http_failures\": 0,\r\n                \"http_statuses\": [\r\n                    429,\r\n                    500,\r\n                    503\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0\r\n            },\r\n            \"healthy\": {\r\n                \"http_statuses\": [\r\n                    200,\r\n                    201,\r\n                    202,\r\n                    203,\r\n                    204,\r\n                    205,\r\n                    206,\r\n                    207,\r\n                    208,\r\n                    226,\r\n                    300,\r\n                    301,\r\n                    302,\r\n                    303,\r\n                    304,\r\n                    305,\r\n                    306,\r\n                    307,\r\n                    308\r\n                ],\r\n                \"successes\": 0\r\n            },\r\n            \"type\": \"http\"\r\n        }\r\n    },\r\n    \"hash_on_header\": null,\r\n    \"slots\": 10000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":upstreamNameOrId"
													],
													"variable": [
														{
															"key": "upstreamNameOrId",
															"value": "my-upstream"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 20:47:32 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "922"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "21"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"created_at\": 1584044267,\n    \"hash_on\": \"none\",\n    \"id\": \"f8d38987-1eb6-4cb2-a7c8-6b11a17de911\",\n    \"algorithm\": \"round-robin\",\n    \"name\": \"my-upstream\",\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ],\n    \"hash_fallback_header\": null,\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie\": null,\n    \"host_header\": \"example.com\",\n    \"hash_on_cookie_path\": \"/\",\n    \"healthchecks\": {\n        \"threshold\": 0,\n        \"active\": {\n            \"unhealthy\": {\n                \"http_statuses\": [\n                    429,\n                    404,\n                    500,\n                    501,\n                    502,\n                    503,\n                    504,\n                    505\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"type\": \"http\",\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"successes\": 0,\n                \"interval\": 0,\n                \"http_statuses\": [\n                    200,\n                    302\n                ]\n            },\n            \"https_sni\": \"example.com\",\n            \"https_verify_certificate\": true,\n            \"concurrency\": 10\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [\n                    429,\n                    500,\n                    503\n                ],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"healthy\": {\n                \"http_statuses\": [\n                    200,\n                    201,\n                    202,\n                    203,\n                    204,\n                    205,\n                    206,\n                    207,\n                    208,\n                    226,\n                    300,\n                    301,\n                    302,\n                    303,\n                    304,\n                    305,\n                    306,\n                    307,\n                    308\n                ],\n                \"successes\": 0\n            },\n            \"type\": \"http\"\n        }\n    },\n    \"hash_on_header\": null,\n    \"slots\": 10000\n}"
										}
									]
								},
								{
									"name": "Update Upstream Associated to a Specific Target",
									"id": "454d6cd3-34fd-48ae-a942-3580fb882cb7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"hash_on\": \"none\",\r\n    \"algorithm\": \"round-robin\",\r\n    \"name\": \"my-upstream\",\r\n    \"tags\": [\r\n        \"user-level\",\r\n        \"low-priority\"\r\n    ],\r\n    \"hash_fallback_header\": null,\r\n    \"hash_fallback\": \"none\",\r\n    \"hash_on_cookie\": null,\r\n    \"host_header\": \"example.com\",\r\n    \"hash_on_cookie_path\": \"/\",\r\n    \"healthchecks\": {\r\n        \"threshold\": 0,\r\n        \"active\": {\r\n            \"unhealthy\": {\r\n                \"http_statuses\": [\r\n                    429,\r\n                    404,\r\n                    500,\r\n                    501,\r\n                    502,\r\n                    503,\r\n                    504,\r\n                    505\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0,\r\n                \"http_failures\": 0,\r\n                \"interval\": 0\r\n            },\r\n            \"type\": \"http\",\r\n            \"http_path\": \"/\",\r\n            \"timeout\": 1,\r\n            \"healthy\": {\r\n                \"successes\": 0,\r\n                \"interval\": 0,\r\n                \"http_statuses\": [\r\n                    200,\r\n                    302\r\n                ]\r\n            },\r\n            \"https_sni\": \"example.com\",\r\n            \"https_verify_certificate\": true,\r\n            \"concurrency\": 10\r\n        },\r\n        \"passive\": {\r\n            \"unhealthy\": {\r\n                \"http_failures\": 0,\r\n                \"http_statuses\": [\r\n                    429,\r\n                    500,\r\n                    503\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0\r\n            },\r\n            \"healthy\": {\r\n                \"http_statuses\": [\r\n                    200,\r\n                    201,\r\n                    202,\r\n                    203,\r\n                    204,\r\n                    205,\r\n                    206,\r\n                    207,\r\n                    208,\r\n                    226,\r\n                    300,\r\n                    301,\r\n                    302,\r\n                    303,\r\n                    304,\r\n                    305,\r\n                    306,\r\n                    307,\r\n                    308\r\n                ],\r\n                \"successes\": 0\r\n            },\r\n            \"type\": \"http\"\r\n        }\r\n    },\r\n    \"hash_on_header\": null,\r\n    \"slots\": 10000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/targets/:targetHost:portOrId/upstream",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"targets",
												":targetHost:portOrId",
												"upstream"
											],
											"variable": [
												{
													"id": "a78dd2f4-219d-4b10-b522-c46021a6b358",
													"key": "targetHost:portOrId",
													"value": ""
												}
											]
										},
										"description": "# Update Upstream Associated to a Specific Target [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-upstream-associated-to-a-specific-target)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>target host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port of the Target associated to the Upstream to be updated.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>This is a hostname, which must be equal to the host of a Service.</td>\n  </tr>\n  <tr>\n    <td>algorithm</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Which load balancing algorithm to use. Accepted values are: \"consistent-hashing\", \"least-connections\", \"round-robin\". Defaults to \"round-robin\".</td>\n  </tr>\n  <tr>\n    <td>hash_on</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_fallback</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_on_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_fallback_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie_path</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>slots</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_verify_certificate</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.http_path</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.timeout</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_sni</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.concurrency</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.threshold</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>host_header</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to be used as Host header when proxying requests through Kong.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "22938d54-26cb-4712-850d-d1b0726a815f",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-upstream",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6cb32ce9-7863-4920-8fae-bde71c3986fc"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3bc1a91e-2fca-4c72-9177-a227cf6ba249"
									}
								}
							]
						},
						{
							"name": "Update Or Create Upstream",
							"item": [
								{
									"name": "Create Or Update Upstream",
									"id": "e7353d83-427b-488f-a46b-1c4ce99857e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"hash_on\": \"none\",\r\n    \"algorithm\": \"round-robin\",\r\n    \"name\": \"my-upstream\",\r\n    \"tags\": [\r\n        \"user-level\",\r\n        \"low-priority\"\r\n    ],\r\n    \"hash_fallback_header\": null,\r\n    \"hash_fallback\": \"none\",\r\n    \"hash_on_cookie\": null,\r\n    \"host_header\": \"example.com\",\r\n    \"hash_on_cookie_path\": \"/\",\r\n    \"healthchecks\": {\r\n        \"threshold\": 0,\r\n        \"active\": {\r\n            \"unhealthy\": {\r\n                \"http_statuses\": [\r\n                    429,\r\n                    404,\r\n                    500,\r\n                    501,\r\n                    502,\r\n                    503,\r\n                    504,\r\n                    505\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0,\r\n                \"http_failures\": 0,\r\n                \"interval\": 0\r\n            },\r\n            \"type\": \"http\",\r\n            \"http_path\": \"/\",\r\n            \"timeout\": 1,\r\n            \"healthy\": {\r\n                \"successes\": 0,\r\n                \"interval\": 0,\r\n                \"http_statuses\": [\r\n                    200,\r\n                    302\r\n                ]\r\n            },\r\n            \"https_sni\": \"example.com\",\r\n            \"https_verify_certificate\": true,\r\n            \"concurrency\": 10\r\n        },\r\n        \"passive\": {\r\n            \"unhealthy\": {\r\n                \"http_failures\": 0,\r\n                \"http_statuses\": [\r\n                    429,\r\n                    500,\r\n                    503\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0\r\n            },\r\n            \"healthy\": {\r\n                \"http_statuses\": [\r\n                    200,\r\n                    201,\r\n                    202,\r\n                    203,\r\n                    204,\r\n                    205,\r\n                    206,\r\n                    207,\r\n                    208,\r\n                    226,\r\n                    300,\r\n                    301,\r\n                    302,\r\n                    303,\r\n                    304,\r\n                    305,\r\n                    306,\r\n                    307,\r\n                    308\r\n                ],\r\n                \"successes\": 0\r\n            },\r\n            \"type\": \"http\"\r\n        }\r\n    },\r\n    \"hash_on_header\": null,\r\n    \"slots\": 10000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamNameOrId"
											],
											"variable": [
												{
													"id": "dbc77444-1f52-475b-a757-a07d275964f0",
													"key": "upstreamNameOrId",
													"value": "my-upstream"
												}
											]
										},
										"description": "# Create Or Update Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-upstream)\n* Inserts (or replaces) the Upstream under the requested resource with the definition specified in the body. The Upstream will be identified via the name or id attribute.\n\n* When the name or id attribute has the structure of a UUID, the Upstream being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n\n* When creating a new Upstream without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n\n* Notice that specifying a name in the URL and a different one in the request body is not allowed.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream to create or update.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>This is a hostname, which must be equal to the host of a Service.</td>\n  </tr>\n  <tr>\n    <td>algorithm</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Which load balancing algorithm to use. Accepted values are: \"consistent-hashing\", \"least-connections\", \"round-robin\". Defaults to \"round-robin\".</td>\n  </tr>\n  <tr>\n    <td>hash_on</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_fallback</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_on_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_fallback_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie_path</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>slots</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_verify_certificate</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.http_path</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.timeout</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_sni</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.concurrency</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.threshold</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>host_header</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to be used as Host header when proxying requests through Kong.</td>\n  </tr>\n</table>"
									},
									"response": []
								},
								{
									"name": "Create Or Update Upstream Associated to a Specific Target",
									"id": "34df57dc-6588-432b-8087-ea7e78d890ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"hash_on\": \"none\",\r\n    \"algorithm\": \"round-robin\",\r\n    \"name\": \"my-upstream\",\r\n    \"tags\": [\r\n        \"user-level\",\r\n        \"low-priority\"\r\n    ],\r\n    \"hash_fallback_header\": null,\r\n    \"hash_fallback\": \"none\",\r\n    \"hash_on_cookie\": null,\r\n    \"host_header\": \"example.com\",\r\n    \"hash_on_cookie_path\": \"/\",\r\n    \"healthchecks\": {\r\n        \"threshold\": 0,\r\n        \"active\": {\r\n            \"unhealthy\": {\r\n                \"http_statuses\": [\r\n                    429,\r\n                    404,\r\n                    500,\r\n                    501,\r\n                    502,\r\n                    503,\r\n                    504,\r\n                    505\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0,\r\n                \"http_failures\": 0,\r\n                \"interval\": 0\r\n            },\r\n            \"type\": \"http\",\r\n            \"http_path\": \"/\",\r\n            \"timeout\": 1,\r\n            \"healthy\": {\r\n                \"successes\": 0,\r\n                \"interval\": 0,\r\n                \"http_statuses\": [\r\n                    200,\r\n                    302\r\n                ]\r\n            },\r\n            \"https_sni\": \"example.com\",\r\n            \"https_verify_certificate\": true,\r\n            \"concurrency\": 10\r\n        },\r\n        \"passive\": {\r\n            \"unhealthy\": {\r\n                \"http_failures\": 0,\r\n                \"http_statuses\": [\r\n                    429,\r\n                    500,\r\n                    503\r\n                ],\r\n                \"tcp_failures\": 0,\r\n                \"timeouts\": 0\r\n            },\r\n            \"healthy\": {\r\n                \"http_statuses\": [\r\n                    200,\r\n                    201,\r\n                    202,\r\n                    203,\r\n                    204,\r\n                    205,\r\n                    206,\r\n                    207,\r\n                    208,\r\n                    226,\r\n                    300,\r\n                    301,\r\n                    302,\r\n                    303,\r\n                    304,\r\n                    305,\r\n                    306,\r\n                    307,\r\n                    308\r\n                ],\r\n                \"successes\": 0\r\n            },\r\n            \"type\": \"http\"\r\n        }\r\n    },\r\n    \"hash_on_header\": null,\r\n    \"slots\": 10000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/targets/:targetHost:portOrId/upstream",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"targets",
												":targetHost:portOrId",
												"upstream"
											],
											"variable": [
												{
													"id": "d20ab2f7-1f96-4d3f-ab2b-fcb2d008dafe",
													"key": "targetHost:portOrId",
													"value": ""
												}
											]
										},
										"description": "# Create Or Update Upstream Associated to a Specific Target [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-upstream-associated-to-a-specific-target)\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>target host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port of the Target associated to the Upstream to be created or updated.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name</td>\n    <td>required</td>\n    <td>body</td>\n    <td>This is a hostname, which must be equal to the host of a Service.</td>\n  </tr>\n  <tr>\n    <td>algorithm</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Which load balancing algorithm to use. Accepted values are: \"consistent-hashing\", \"least-connections\", \"round-robin\". Defaults to \"round-robin\".</td>\n  </tr>\n  <tr>\n    <td>hash_on</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_fallback</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: \"none\", \"consumer\", \"ip\", \"header\", \"cookie\". Defaults to \"none\".</td>\n  </tr>\n  <tr>\n    <td>hash_on_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_fallback_header</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>\n  </tr>\n  <tr>\n    <td>hash_on_cookie_path</td>\n    <td>semi-optional</td>\n    <td>body</td>\n    <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>slots</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_verify_certificate</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.unhealthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.http_path</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to \"/\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.timeout</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.interval</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.https_sni</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.concurrency</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.active.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.tcp_failures</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.unhealthy.timeouts</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.type</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: \"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\". Defaults to \"http\".</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.successes</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.passive.healthy.http_statuses</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>\n  </tr>\n  <tr>\n    <td>healthchecks.threshold</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>\n  </tr>\n  <tr>\n    <td>host_header</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The hostname to be used as Host header when proxying requests through Kong.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "c96d6d24-9321-4f29-9cc0-7e05c5992111",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#update-or-create-upstream",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5ce3b3ac-a13a-40bb-aacc-e484b29c6d73"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5b0ec720-9c37-4ca6-91f8-0471c940d55a"
									}
								}
							]
						},
						{
							"name": "Delete Upstream",
							"item": [
								{
									"name": "Delete Upstream",
									"id": "5944ce0f-575c-44cc-9c59-bcf67ae9282f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamNameOrId"
											],
											"variable": [
												{
													"id": "beb5286e-58f7-4083-97cb-de2758ad21ac",
													"key": "upstreamNameOrId",
													"value": "my-upstream",
													"description": "The unique identifier or the name of the Upstream to retrieve."
												}
											]
										},
										"description": "# Delete Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream to delete.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "0802e550-b2e1-48d0-9fbe-650240155281",
											"name": "Delete Upstream - 204",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":upstreamNameOrId"
													],
													"variable": [
														{
															"key": "upstreamNameOrId",
															"value": "my-upstream",
															"description": "The unique identifier or the name of the Upstream to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 21:14:03 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "27"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Delete Upstream Associated to a Specific Target",
									"id": "7002b1c8-5755-4a8a-9d09-0b39b8a9ff9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/targets/:targetHost:portOrId/upstream",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"targets",
												":targetHost:portOrId",
												"upstream"
											],
											"variable": [
												{
													"id": "14c3a496-201a-42cd-8f1c-bc67db085a10",
													"key": "targetHost:portOrId",
													"value": "",
													"description": "The unique identifier or the host:port of the Target associated to the Upstream to be delete."
												}
											]
										},
										"description": "# Delete Upstream Associated to a Specific Target [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-associated-to-a-specific-target)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>target host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port of the Target associated to the Upstream to be delete.</td>\n  </tr>\n</table>"
									},
									"response": []
								}
							],
							"id": "5939751c-88af-4e0c-8555-58f549fdc3b7",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#delete-upstream",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "46d68a9f-4ce5-45a6-b55e-41b1464008b0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0beb06d1-df93-40cc-ade9-d0be59a00fb1"
									}
								}
							]
						},
						{
							"name": "Show Upstream Health for Node",
							"item": [
								{
									"name": "List All Upstreams",
									"id": "fae92fdf-58b8-4121-a4f8-435deaafe762",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/upstreams/:nameOrId/health?balancer_health=1",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":nameOrId",
												"health"
											],
											"query": [
												{
													"key": "balancer_health",
													"value": "1",
													"description": "If set to 1, Kong will return the health status of the whole Upstream."
												}
											],
											"variable": [
												{
													"id": "4aef934a-32ac-4dfd-87a7-53a643833125",
													"key": "nameOrId",
													"value": "my-upstream",
													"description": "The unique identifier or the name of the Upstream for which to display Target health."
												}
											]
										},
										"description": "# List All Upstreams [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-upstreams)\n* Displays the health status for all Targets of a given Upstream, or for the whole Upstream, according to the perspective of a specific Kong node. Note that, being node-specific information, making this same request to different nodes of the Kong cluster may produce different results. For example, one specific node of the Kong cluster may be experiencing network issues, causing it to fail to connect to some Targets: these Targets will be marked as unhealthy by that node (directing traffic from this node to other Targets that it can successfully reach), but healthy to all others Kong nodes (which have no problems using that Target).\n\n* The data field of the response contains an array of Target objects. The health for each Target is returned in its health field:\n\n\t* If a Target fails to be activated in the balancer due to DNS issues, its status displays as DNS_ERROR.\n\t* When health checks are not enabled in the Upstream configuration, the health status for active Targets is displayed as HEALTHCHECKS_OFF.\n\t* When health checks are enabled and the Target is determined to be healthy, either automatically or manually, its status is displayed as HEALTHY. This means that this Target is currently included in this Upstream’s load balancer execution.\n\n* When a Target has been disabled by either active or passive health checks (circuit breakers) or manually, its status is displayed as UNHEALTHY. The load balancer is not directing any traffic to this Target via this Upstream.\nWhen the request query parameter balancer_health is set to 1, the data field of the response refers to the whole Upstream, and its health attribute is defined by the state of all of Upstream’s Targets, according to the field [health checker’s threshold][healthchecks.threshold].\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream for which to display Target health.</td>\n  </tr>\n  <tr>\n    <td>balancer_health</td>\n    <td>optional</td>\n    <td>query</td>\n    <td>If set to 1, Kong will return the health status of the whole Upstream.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "802730f3-8457-49ff-ab51-f14dd98c292f",
											"name": "List All Upstreams-200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{kong.admin}}/upstreams"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 20:21:55 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "945"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "1"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"4fe14415-73d5-4f00-9fbc-c72a0fccfcb2\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/upstreams?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										},
										{
											"id": "22087d12-6dc8-4ade-b3bb-c11735c326e4",
											"name": "List All Upstreams",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/upstreams/:nameOrId/health?balancer_health=0",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":nameOrId",
														"health"
													],
													"query": [
														{
															"key": "balancer_health",
															"value": "0",
															"description": "If set to 1, Kong will return the health status of the whole Upstream."
														}
													],
													"variable": [
														{
															"key": "nameOrId",
															"value": "my-upstream",
															"description": "The unique identifier or the name of the Upstream for which to display Target health."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 21:32:22 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "143"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"total\": 2,\n \"node_id\": \"cbb297c0-14a9-46bc-ad91-1d0ef9b42df9\",\n \"data\": [\n  {\n   \"created_at\": 1485524883980,\n   \"id\": \"18c0ad90-f942-4098-88db-bbee3e43b27f\",\n   \"health\": \"HEALTHY\",\n   \"target\": \"127.0.0.1:20000\",\n   \"upstream_id\": \"07131005-ba30-4204-a29f-0927d53257b4\",\n   \"weight\": 100,\n   \"name\": \"aliqua veniam\",\n   \"algorithm\": \"non officia aliquip\",\n   \"hash_on\": \"laborum dolore ea pariatur\",\n   \"hash_fallback\": \"mollit anim sit\",\n   \"hash_on_cookie_path\": \"deserunt cillum\",\n   \"slots\": -93720927,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"culpa ei\",\n    \"enim\"\n   ],\n   \"host_header\": \"labore proident elit irure incididunt\"\n  },\n  {\n   \"created_at\": 1485524914883,\n   \"id\": \"6c6f34eb-e6c3-4c1f-ac58-4060e5bca890\",\n   \"health\": \"UNHEALTHY\",\n   \"target\": \"127.0.0.1:20002\",\n   \"upstream_id\": \"07131005-ba30-4204-a29f-0927d53257b4\",\n   \"weight\": 200,\n   \"name\": \"\",\n   \"algorithm\": \"labore aliqua pariatur\",\n   \"hash_on\": \"esse ea in id\",\n   \"hash_fallback\": \"aliquip\",\n   \"hash_on_cookie_path\": \"incididunt eu eiusmod mollit\",\n   \"slots\": -60979601,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"consectetur qui eiusmod\"\n   ],\n   \"host_header\": \"reprehenderit ad quis\"\n  }\n ],\n \"next\": \"aliquip ipsum\"\n}"
										},
										{
											"id": "8f7c8217-b2cc-4675-8dbb-7b6bfb8b9062",
											"name": "List All Upstreams",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/upstreams/:nameOrId/health?balancer_health=1",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":nameOrId",
														"health"
													],
													"query": [
														{
															"key": "balancer_health",
															"value": "1",
															"description": "If set to 1, Kong will return the health status of the whole Upstream."
														}
													],
													"variable": [
														{
															"key": "nameOrId",
															"value": "my-upstream",
															"description": "The unique identifier or the name of the Upstream for which to display Target health."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 21:32:22 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "143"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "2"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"data\": [\n  {\n   \"id\": \"incididunt\",\n   \"created_at\": 3675253,\n   \"name\": \"aliqua veniam\",\n   \"algorithm\": \"non officia aliquip\",\n   \"hash_on\": \"laborum dolore ea pariatur\",\n   \"hash_fallback\": \"mollit anim sit\",\n   \"hash_on_cookie_path\": \"deserunt cillum\",\n   \"slots\": -93720927,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"culpa ei\",\n    \"enim\"\n   ],\n   \"host_header\": \"labore proident elit irure incididunt\"\n  },\n  {\n   \"id\": \"in minim ipsum dolore\",\n   \"created_at\": 66976784,\n   \"name\": \"\",\n   \"algorithm\": \"labore aliqua pariatur\",\n   \"hash_on\": \"esse ea in id\",\n   \"hash_fallback\": \"aliquip\",\n   \"hash_on_cookie_path\": \"incididunt eu eiusmod mollit\",\n   \"slots\": -60979601,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"consectetur qui eiusmod\"\n   ],\n   \"host_header\": \"reprehenderit ad quis\"\n  },\n  {\n   \"id\": \"fugiat elit non ut\",\n   \"created_at\": -99389103,\n   \"name\": \"Ut adipisicing nisi laborum\",\n   \"algorithm\": \"ea\",\n   \"hash_on\": \"et sint\",\n   \"hash_fallback\": \"commo\",\n   \"hash_on_cookie_path\": \"deserunt consectetur c\",\n   \"slots\": 71186640,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"ut ex officia consequat\"\n   ],\n   \"host_header\": \"ex elit dolore enim\"\n  },\n  {\n   \"id\": \"in Excepteur\",\n   \"created_at\": -58732565,\n   \"name\": \"ipsum\",\n   \"algorithm\": \"anim exercitation voluptate\",\n   \"hash_on\": \"Lorem velit\",\n   \"hash_fallback\": \"pariatur do\",\n   \"hash_on_cookie_path\": \"est consequat nisi\",\n   \"slots\": 93978358,\n   \"healthchecks\": {\n    \"threshold\": 0,\n    \"active\": {\n     \"unhealthy\": {\n      \"http_statuses\": [\n       429,\n       404,\n       500,\n       501,\n       502,\n       503,\n       504,\n       505\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0,\n      \"http_failures\": 0,\n      \"interval\": 0\n     },\n     \"type\": \"http\",\n     \"http_path\": \"/\",\n     \"timeout\": 1,\n     \"healthy\": {\n      \"successes\": 0,\n      \"interval\": 0,\n      \"http_statuses\": [\n       200,\n       302\n      ]\n     },\n     \"https_sni\": \"example.com\",\n     \"https_verify_certificate\": true,\n     \"concurrency\": 10\n    },\n    \"passive\": {\n     \"unhealthy\": {\n      \"http_failures\": 0,\n      \"http_statuses\": [\n       429,\n       500,\n       503\n      ],\n      \"tcp_failures\": 0,\n      \"timeouts\": 0\n     },\n     \"healthy\": {\n      \"http_statuses\": [\n       200,\n       201,\n       202,\n       203,\n       204,\n       205,\n       206,\n       207,\n       208,\n       226,\n       300,\n       301,\n       302,\n       303,\n       304,\n       305,\n       306,\n       307,\n       308\n      ],\n      \"successes\": 0\n     },\n     \"type\": \"http\"\n    }\n   },\n   \"tags\": [\n    \"do des\",\n    \"labore id ut\",\n    \"magna\"\n   ],\n   \"host_header\": \"ut magna Excepteur\"\n  }\n ],\n \"next\": \"aliquip ipsum\",\n \"node_id\": \"cbb297c0-14a9-46bc-ad91-1d0ef9b42df9\"\n}"
										}
									]
								}
							],
							"id": "48d86be2-f37e-4639-b8dd-ff8516565cfe",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-upstreams\n\n* Displays the health status for all Targets of a given Upstream, or for the whole Upstream, according to the perspective of a specific Kong node. Note that, being node-specific information, making this same request to different nodes of the Kong cluster may produce different results. For example, one specific node of the Kong cluster may be experiencing network issues, causing it to fail to connect to some Targets: these Targets will be marked as unhealthy by that node (directing traffic from this node to other Targets that it can successfully reach), but healthy to all others Kong nodes (which have no problems using that Target).\n\n* The data field of the response contains an array of Target objects. The health for each Target is returned in its health field:\n\n\t* If a Target fails to be activated in the balancer due to DNS issues, its status displays as DNS_ERROR.\n\t* When health checks are not enabled in the Upstream configuration, the health status for active Targets is displayed as HEALTHCHECKS_OFF.\n\t* When health checks are enabled and the Target is determined to be healthy, either automatically or manually, its status is displayed as HEALTHY. This means that this Target is currently included in this Upstream’s load balancer execution.\n\n* When a Target has been disabled by either active or passive health checks (circuit breakers) or manually, its status is displayed as UNHEALTHY. The load balancer is not directing any traffic to this Target via this Upstream.\nWhen the request query parameter balancer_health is set to 1, the data field of the response refers to the whole Upstream, and its health attribute is defined by the state of all of Upstream’s Targets, according to the field [health checker’s threshold][healthchecks.threshold].",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3fa8d60f-0174-4970-9575-3ed034e39b7b"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7e67574e-a049-4308-ad41-de4de082efb6"
									}
								}
							]
						}
					],
					"id": "55a57bd1-05bd-441f-8410-1fc70b08a477",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#upstream-object\n\n* The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named service.v1.xyz for a Service object whose host is service.v1.xyz. Requests for this Service would be proxied to the targets defined within the upstream.\n\n* An upstream also includes a health checker, which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.\n\n* Upstreams can be both tagged and filtered by tags.\n\n\n{\n    \"id\": \"58c8ccbb-eafb-4566-991f-2ed4f678fa70\",\n    \"created_at\": 1422386534,\n    \"name\": \"my-upstream\",\n    \"algorithm\": \"round-robin\",\n    \"hash_on\": \"none\",\n    \"hash_fallback\": \"none\",\n    \"hash_on_cookie_path\": \"/\",\n    \"slots\": 10000,\n    \"healthchecks\": {\n        \"active\": {\n            \"https_verify_certificate\": true,\n            \"unhealthy\": {\n                \"http_statuses\": [429, 404, 500, 501, 502, 503, 504, 505],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0,\n                \"http_failures\": 0,\n                \"interval\": 0\n            },\n            \"http_path\": \"/\",\n            \"timeout\": 1,\n            \"healthy\": {\n                \"http_statuses\": [200, 302],\n                \"interval\": 0,\n                \"successes\": 0\n            },\n            \"https_sni\": \"example.com\",\n            \"concurrency\": 10,\n            \"type\": \"http\"\n        },\n        \"passive\": {\n            \"unhealthy\": {\n                \"http_failures\": 0,\n                \"http_statuses\": [429, 500, 503],\n                \"tcp_failures\": 0,\n                \"timeouts\": 0\n            },\n            \"type\": \"http\",\n            \"healthy\": {\n                \"successes\": 0,\n                \"http_statuses\": [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n            }\n        },\n        \"threshold\": 0\n    },\n    \"tags\": [\"user-level\", \"low-priority\"],\n    \"host_header\": \"example.com\"\n}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "334b7c1a-b0a1-44c0-8ecb-7f571a749a22"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e50a826f-c977-4351-b0df-a635de4522e5"
							}
						}
					]
				},
				{
					"name": "Target Object",
					"item": [
						{
							"name": "Add Target",
							"item": [
								{
									"name": "Create Target Associated to a Specific Upstream",
									"id": "81c5db9b-ca2f-472b-a4fd-b54e8f8d43fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"upstream\": {\n        \"id\": \"885a0392-ef1b-4de3-aacf-af3f1697ce2c\"\n    },\n    \"target\": \"example.com:8000\",\n    \"weight\": 100,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamHost:portOriI/targets",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamHost:portOriI",
												"targets"
											],
											"variable": [
												{
													"id": "52bd13fd-8f26-4d71-9d4a-b2f2e1dcb51f",
													"key": "upstreamHost:portOriI",
													"value": "",
													"description": "The unique identifier or the host:port attribute of the Upstream that should be associated to the newly-created Target."
												}
											]
										},
										"description": "# Create Target Associated to a Specific Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-target-associated-to-a-specific-upstream)\n* A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added. Changes are effectuated on the fly.\n\n* Because the upstream maintains a history of target changes, the targets cannot be deleted or modified. To disable a target, post a new one with weight=0; alternatively, use the DELETE convenience method to accomplish the same.\n\n* The current target object definition is the one with the latest created_at.\n\n* Targets can be both tagged and filtered by tags.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port attribute of the Upstream that should be associated to the newly-created Target.</td>\n  </tr>\n</table>\n\n# Request Body\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>target</td>\n    <td>required</td>\n    <td>body</td>\n    <td>The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the port value will be overridden by the value from the DNS record.</td>\n  </tr>\n  <tr>\n    <td>weight</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>The weight this target gets within the upstream loadbalancer (0-1000). If the hostname resolves to an SRV record, the weight value will be overridden by the value from the DNS record. Defaults to 100.</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>optional</td>\n    <td>body</td>\n    <td>An optional set of strings associated with the Target, for grouping and filtering.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "5cb8537b-0dc5-422f-bdd7-ffa5adfa8537",
											"name": "Create Target Associated to a Specific Upstream - 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"upstream\": {\n        \"id\": \"885a0392-ef1b-4de3-aacf-af3f1697ce2c\"\n    },\n    \"target\": \"example.com:8000\",\n    \"weight\": 100,\n    \"tags\": [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{kong.admin}}/upstreams/:upstreamHost:portOriI/targets",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":upstreamHost:portOriI",
														"targets"
													],
													"variable": [
														{
															"key": "upstreamHost:portOriI",
															"value": "example.com:8000",
															"description": "The unique identifier or the host:port attribute of the Upstream that should be associated to the newly-created Target."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 21:57:10 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"id\": \"a3395f66-2af6-4c79-bea2-1b6933764f80\",\n\t\"created_at\": 1422386534,\n\t\"upstream\": {\n\t\t\"id\": \"885a0392-ef1b-4de3-aacf-af3f1697ce2c\"\n\t},\n\t\"target\": \"example.com:8000\",\n\t\"weight\": 100,\n\t\"tags\": [\n\t\t\"user-level\",\n\t\t\"low-priority\"\n\t]\n}"
										}
									]
								}
							],
							"id": "eba71271-d8b7-4710-ae8f-7c1eead0568d",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#add-target"
						},
						{
							"name": "List Targets",
							"item": [
								{
									"name": "List Targets Associated to a Specific Upstream",
									"id": "a36ba312-402a-4f47-9a27-74ded1b64d0e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{kong.admin}}/upstreams/:upstreamHost:portOrId/targets",
											"host": [
												"{{kong.admin}}"
											],
											"path": [
												"upstreams",
												":upstreamHost:portOrId",
												"targets"
											],
											"variable": [
												{
													"id": "8e44a5f9-afab-4654-b33e-0bd4ea20861b",
													"key": "upstreamHost:portOrId",
													"value": ""
												}
											]
										},
										"description": "# List Targets Associated to a Specific Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-targets-associated-to-a-specific-upstream)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the host:port attribute of the Upstream whose Targets are to be retrieved. When using this endpoint, only Targets associated to the specified Upstream will be listed.</td>\n  </tr>\n</table>"
									},
									"response": [
										{
											"id": "3579f029-128b-4fc2-8723-419e360868a8",
											"name": "List Targets Associated to a Specific Upstream-200",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{kong.admin}}/upstreams/:upstreamHost:portOrId/targets",
													"host": [
														"{{kong.admin}}"
													],
													"path": [
														"upstreams",
														":upstreamHost:portOrId",
														"targets"
													],
													"variable": [
														{
															"key": "upstreamHost:portOrId",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 12 Mar 2020 22:04:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Server",
													"value": "kong/2.0.1"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "X-Kong-Admin-Latency",
													"value": "0"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"f5a9c0ca-bdbb-490f-8928-2ca95836239a\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"upstream\": {\n\t\t\t\t\"id\": \"173a6cee-90d1-40a7-89cf-0329eca780a6\"\n\t\t\t},\n\t\t\t\"target\": \"example.com:8000\",\n\t\t\t\"weight\": 100,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"bdab0e47-4e37-4f0b-8fd0-87d95cc4addc\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"upstream\": {\n\t\t\t\t\"id\": \"f00c6da4-3679-4b44-b9fb-36a19bd3ae83\"\n\t\t\t},\n\t\t\t\"target\": \"example.com:8000\",\n\t\t\t\"weight\": 100,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/targets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
										}
									]
								}
							],
							"id": "efeb8651-56f6-4710-9a74-f2aa96248610",
							"description": "https://docs.konghq.com/2.0.x/admin-api/#list-targets"
						},
						{
							"name": "Delete Target",
							"id": "63bbdda6-6a42-4d8a-bab3-5009190bebb5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId/targets/:host:portOrId",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstreamNameOrId",
										"targets",
										":host:portOrId"
									],
									"variable": [
										{
											"id": "ebda98df-95aa-4855-b0dc-6ddc294e3008",
											"key": "upstreamNameOrId",
											"value": "",
											"description": "The unique identifier or the name of the upstream for which to delete the target."
										},
										{
											"id": "d3de9efe-8e37-4c19-8741-04eb3c747521",
											"key": "host:portOrId",
											"value": "",
											"description": "The host:port combination element of the target to remove, or the id of an existing target entry."
										}
									]
								},
								"description": "# Delete Upstream [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-1)\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream for which to delete the target.</td>\n  </tr>\n  <tr>\n    <td>host:port or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host:port combination element of the target to remove, or the id of an existing target entry.</td>\n  </tr>\n</table>"
							},
							"response": []
						},
						{
							"name": "Set Target Address As Healthy",
							"id": "fa24d960-84d9-4a78-92a0-85e682d15442",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId/targets/:targetOrID/:address/healthy",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstreamNameOrId",
										"targets",
										":targetOrID",
										":address",
										"healthy"
									],
									"variable": [
										{
											"id": "39920d46-6265-4bd2-95ce-cdd340cdec14",
											"key": "upstreamNameOrId",
											"value": "",
											"description": "The unique identifier or the name of the upstream."
										},
										{
											"id": "ebc1840d-b4ab-400c-9420-2aac9c44b168",
											"key": "targetOrID",
											"value": "",
											"description": "The host/port combination element of the target to set as healthy, or the id of an existing target entry."
										},
										{
											"id": "49480f3e-941a-4f90-839f-141228944dd7",
											"key": "address",
											"value": "",
											"description": "The host/port combination element of the address to set as healthy."
										}
									]
								},
								"description": "# Set Target Address As Healthy [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-address-as-healthy)\n* Set the current health status of an individual address resolved by a target in the load balancer to “healthy” in the entire Kong cluster.\n\n* This endpoint can be used to manually re-enable an address resolved by a target that was previously disabled by the upstream’s health checker. Upstreams only forward requests to healthy nodes, so this call tells Kong to start using this address again.\n\n* This resets the health counters of the health checkers running in all workers of the Kong node, and broadcasts a cluster-wide message so that the “healthy” status is propagated to the whole Kong cluster.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream.</td>\n  </tr>\n  <tr>\n    <td>target or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the target to set as healthy, or the id of an existing target entry.</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the address to set as healthy.</td>\n  </tr>\n</table>"
							},
							"response": []
						},
						{
							"name": "Set Target Address As Unhealthy",
							"id": "6a2b05af-ba59-4115-89d5-dfa607203966",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId/targets/:targetOrID/:address/unhealthy",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstreamNameOrId",
										"targets",
										":targetOrID",
										":address",
										"unhealthy"
									],
									"variable": [
										{
											"id": "f03ac717-e925-42f1-8a6a-26b2d33bad33",
											"key": "upstreamNameOrId",
											"value": "beta-upstream",
											"description": "The unique identifier or the name of the upstream."
										},
										{
											"id": "08773627-851c-438f-b882-0e79a090e494",
											"key": "targetOrID",
											"value": "",
											"description": "The host/port combination element of the target to set as unhealthy, or the id of an existing target entry."
										},
										{
											"id": "b3e3e4f4-5e4e-4f58-ba6f-c63d5da0fbb9",
											"key": "address",
											"value": "",
											"description": "The host/port combination element of the address to set as unhealthy."
										}
									]
								},
								"description": "# Set Target Address As Unhealthy [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-address-as-unhealthy)\n* Set the current health status of an individual address resolved by a target in the load balancer to “unhealthy” in the entire Kong cluster.\n\n* This endpoint can be used to manually disable an address and have it stop responding to requests. Upstreams only forward requests to healthy nodes, so this call tells Kong to start skipping this address.\n\n* This call resets the health counters of the health checkers running in all workers of the Kong node, and broadcasts a cluster-wide message so that the “unhealthy” status is propagated to the whole Kong cluster.\n\n* Active health checks continue to execute for unhealthy addresses. Note that if active health checks are enabled and the probe detects that the address is actually healthy, it will automatically re-enable it again. To permanently remove a target from the balancer, you should delete a target instead.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream.</td>\n  </tr>\n  <tr>\n    <td>target or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the target to set as unhealthy, or the id of an existing target entry.</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the address to set as unhealthy.</td>\n  </tr>\n</table>"
							},
							"response": []
						},
						{
							"name": "Set Target As Healthy",
							"id": "32f7bc89-803f-4e70-babf-dda4705160ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId/targets/:targetOrID/healthy",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstreamNameOrId",
										"targets",
										":targetOrID",
										"healthy"
									],
									"variable": [
										{
											"id": "371b81b6-2539-4c06-bf08-92438e037874",
											"key": "upstreamNameOrId",
											"value": "",
											"description": "The unique identifier or the name of the upstream."
										},
										{
											"id": "049a9258-df48-43f3-9cbd-7e2572e2dc0a",
											"key": "targetOrID",
											"value": "",
											"description": "The host/port combination element of the target to set as healthy, or the id of an existing target entry."
										}
									]
								},
								"description": "# Set Target As Healthy [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-as-healthy)\n* Set the current health status of a target in the load balancer to “healthy” in the entire Kong cluster. This sets the “healthy” status to all addresses resolved by this target.\n\n* This endpoint can be used to manually re-enable a target that was previously disabled by the upstream’s health checker. Upstreams only forward requests to healthy nodes, so this call tells Kong to start using this target again.\n\n* This resets the health counters of the health checkers running in all workers of the Kong node, and broadcasts a cluster-wide message so that the “healthy” status is propagated to the whole Kong cluster.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream.</td>\n  </tr>\n  <tr>\n    <td>target or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the target to set as healthy, or the id of an existing target entry.</td>\n  </tr>\n</table>"
							},
							"response": []
						},
						{
							"name": "Set Target As Unhealthy",
							"id": "9c670626-f4ec-41e2-82c0-1872696fed3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{kong.admin}}/upstreams/:upstreamNameOrId/targets/:targetOrID/unhealthy",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":upstreamNameOrId",
										"targets",
										":targetOrID",
										"unhealthy"
									],
									"variable": [
										{
											"id": "924b435e-9c44-47bf-a540-e3de2998a1c3",
											"key": "upstreamNameOrId",
											"value": "",
											"description": "The unique identifier or the name of the upstream."
										},
										{
											"id": "75758645-4f6f-44c5-8921-35384993a904",
											"key": "targetOrID",
											"value": "",
											"description": "The host/port combination element of the target to set as unhealthy, or the id of an existing target entry."
										}
									]
								},
								"description": "# Set Target As Unhealthy [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-as-unhealthy)\n* Set the current health status of a target in the load balancer to “unhealthy” in the entire Kong cluster. This sets the “unhealthy” status to all addresses resolved by this target.\n\n* This endpoint can be used to manually disable a target and have it stop responding to requests. Upstreams only forward requests to healthy nodes, so this call tells Kong to start skipping this target.\n\n* This call resets the health counters of the health checkers running in all workers of the Kong node, and broadcasts a cluster-wide message so that the “unhealthy” status is propagated to the whole Kong cluster.\n\n* Active health checks continue to execute for unhealthy targets. Note that if active health checks are enabled and the probe detects that the target is actually healthy, it will automatically re-enable it again. To permanently remove a target from the balancer, you should delete a target instead.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>upstream name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream.</td>\n  </tr>\n  <tr>\n    <td>target or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The host/port combination element of the target to set as unhealthy, or the id of an existing target entry.</td>\n  </tr>\n</table>"
							},
							"response": []
						},
						{
							"name": "List All Targets",
							"id": "77905e3c-7ec3-4257-a755-1f1492719f5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{kong.admin}}/upstreams/:nameOrId/targets/all/",
									"host": [
										"{{kong.admin}}"
									],
									"path": [
										"upstreams",
										":nameOrId",
										"targets",
										"all",
										""
									],
									"variable": [
										{
											"id": "d668b64f-d9b1-44fb-842b-3147aad37f24",
											"key": "nameOrId",
											"value": "",
											"description": "The unique identifier or the name of the upstream for which to list the targets."
										}
									]
								},
								"description": "# List All Targets [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-targets)\n* Lists all targets of the upstream. Multiple target objects for the same target may be returned, showing the history of changes for a specific target. The target object with the latest created_at is the current definition.\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the upstream for which to list the targets.</td>\n  </tr>\n</table>"
							},
							"response": []
						}
					],
					"id": "21e0a5af-cc32-4454-8629-3240c16f26ce",
					"description": "https://docs.konghq.com/2.0.x/admin-api/#target-object\n\n* A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added. Changes are effectuated on the fly.\n\n* Because the upstream maintains a history of target changes, the targets cannot be deleted or modified. To disable a target, post a new one with weight=0; alternatively, use the DELETE convenience method to accomplish the same.\n\n* The current target object definition is the one with the latest created_at.\n\n* Targets can be both tagged and filtered by tags.\n\n{\n    \"id\": \"a3395f66-2af6-4c79-bea2-1b6933764f80\",\n    \"created_at\": 1422386534,\n    \"upstream\": {\"id\":\"885a0392-ef1b-4de3-aacf-af3f1697ce2c\"},\n    \"target\": \"example.com:8000\",\n    \"weight\": 100,\n    \"tags\": [\"user-level\", \"low-priority\"]\n}\n"
				}
			],
			"id": "ef651cdf-98f2-4a76-923d-3aa29690c515"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a26d2cec-38b8-446a-a2f9-e145b6ef5764",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d4fbf601-db9a-4934-a00b-fc94652f27b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "kong.admin",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "kong.gateway",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "kong.gateway.ssl",
			"value": "https://localhost:8443",
			"type": "string"
		},
		{
			"key": "alpha",
			"value": "{{kong.gateway}}/alpha",
			"type": "string"
		},
		{
			"key": "beta",
			"value": "{{kong.gateway}}/beta",
			"type": "string"
		},
		{
			"key": "gamma",
			"value": "{{kong.gateway}}/gamma",
			"type": "string"
		},
		{
			"key": "omega",
			"value": "{{kong.gateway}}/omega",
			"type": "string"
		}
	]
}